'use client';

import { useSession, signOut } from 'next-auth/react';
import { usePathname } from 'next/navigation';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { normalizeRole, canViewAdmin, canViewTasks, canCreateTasks } from '@/lib/roles';
// import ChatWrap from '@/components/ChatWrap';  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è SSE-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞ (–ø–æ–¥–∫–ª—é—á–∏—Ç—å, –∫–æ–≥–¥–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞)

const BRAND = '#8d2828';  // –§–∏—Ä–º–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤ –∏ ¬´—Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö¬ª —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)
const ROLE_RU: Record<string, string> = {
  admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
  director: '–î–∏—Ä–µ–∫—Ç–æ—Ä',
  deputy_plus: '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å +',
  deputy: '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å',
  teacher_plus: '–ü–µ–¥–∞–≥–æ–≥ +',
  teacher: '–ü–µ–¥–∞–≥–æ–≥',
};

type ThreadListItem = { id: string; unreadCount?: number | null };
type TaskLite = {
  id: string;
  assignedTo?: Array<{ type?: 'user'; id: string }>;
  assignees?: Array<{ userId: string; status?: string; doneAt?: string | null }>;
  createdById?: string | null;
  createdBy?: string | null;
};

// –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –Ω–∞ —Ñ–∞–º–∏–ª–∏—é (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä) –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
function splitFio(full?: string | null) {
  const s = (full || '').trim();
  if (!s) return { last: '–ì–æ—Å—Ç—å', rest: '' };
  const parts = s.split(/\s+/);
  if (parts.length >= 2) {
    return { last: (parts[0] || '').toUpperCase(), rest: parts.slice(1).join(' ') };
  }
  return { last: s.toUpperCase(), rest: '' };
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–¥–Ω–æ–π –ø–ª–∏—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Å—Ç–µ–∫–ª—è–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞)
function NavTile(props: { 
  href?: string; 
  active?: boolean; 
  label: string; 
  unread?: number | null; 
  onClick?: () => void; 
  asButton?: boolean; 
}) {
  const { href, active, label, unread, onClick, asButton } = props;
  const hasUnread = typeof unread === 'number' && unread > 0;

  // üëâ –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å ‚Äî –æ–¥–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, —É–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ –∑–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
  const isSingleLongWord = !/\s/.test(label) && label.length >= 9;

  const content = (
    <div 
      className={`tile glass ${active ? 'active' : ''} ${hasUnread && !active ? 'unread' : ''}`} 
      role="button" 
      aria-current={active ? 'true' : undefined}
    >
      <span 
        className={`label ${isSingleLongWord ? 'label--single' : 'label--multi'}`} 
        lang="ru" 
        title={label}
      >
        {label}
      </span>
      {hasUnread ? (
        <span className="badge" aria-label="–ï—Å—Ç—å –Ω–æ–≤—ã–µ">
          {unread! > 99 ? '99+' : unread}
        </span>
      ) : null}
      <style jsx>{`
        .tile {
          position: relative;
          display: grid;
          place-items: center;
          text-align: center;
          width: 100%;
          aspect-ratio: 1 / 1;
          border-radius: 16px;
          border: 1px solid rgba(255, 255, 255, 0.7);
          transition: transform 120ms ease, border-color 120ms ease, background 120ms ease;
          cursor: pointer;
          overflow: hidden;
          padding: 6px;
        }
        .glass {
          background: rgba(255, 255, 255, 0.55);
          backdrop-filter: saturate(180%) blur(10px);
          -webkit-backdrop-filter: saturate(180%) blur(10px);
          box-shadow: 0 4px 10px rgba(0, 0, 0, 0.06);
          border-color: rgba(229, 231, 235, 0.8);
        }
        .tile:hover {
          transform: translateY(-1px);
          border-color: #c7e3ff;
        }
        .tile.active {
          outline: 2px solid rgba(199, 227, 255, 0.8);
        }
        .tile.unread::before {
          content: "";
          position: absolute;
          left: 0;
          top: 0;
          height: 3px;
          width: 100%;
          background: #ef9b28;
        }
        /* –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–ª–∏—Ç–∫–µ */
        .label {
          color: #111827;
          font-weight: 800;
          line-height: 1.15;
          max-width: 100%;
          white-space: normal;
          overflow: hidden;
          text-align: center;
        }
        /* –ú–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ ‚Äî –¥–æ 2 —Å—Ç—Ä–æ–∫, —Å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ */
        .label--multi {
          font-size: 13px;
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          word-break: normal;
          overflow-wrap: break-word;   /* –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ */
          hyphens: auto;
          -webkit-hyphens: auto;
          text-wrap: balance;
        }
        /* –û–¥–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ ‚Äî –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞–µ–º, –Ω–µ–º–Ω–æ–≥–æ —Å–∂–∏–º–∞–µ–º –∏ —É–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç */
        .label--single {
          font-size: 12px;
          word-break: keep-all;
          overflow-wrap: normal;
          hyphens: manual;
          font-stretch: 95%;
          letter-spacing: 0.02em;
        }
        .badge {
          position: absolute;
          right: 8px;
          top: 8px;
          font-size: 11px;
          line-height: 18px;
          min-width: 22px;
          text-align: center;
          padding: 0 6px;
          border-radius: 9999px;
          background: ${BRAND};
          color: #fff;
          font-weight: 800;
          box-shadow: 0 1px 4px rgba(0, 0, 0, 0.12);
        }
      `}</style>
    </div>
  );

  if (asButton) {
    // –ü–ª–∏—Ç–∫–∞ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞)
    return (
      <button onClick={onClick} className="tile-btn">
        {content}
        <style jsx>{` .tile-btn { all: unset; display: block; } `}</style>
      </button>
    );
  }

  // –û–±—ã—á–Ω–∞—è –ø–ª–∏—Ç–∫–∞-—Å—Å—ã–ª–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  return (
    <Link href={href || '#'} className="navlink" aria-current={active ? 'true' : undefined}>
      {content}
      <style jsx>{` .navlink { display: block; text-decoration: none; } `}</style>
    </Link>
  );
}

export default function Sidebar() {
  const { data } = useSession();           // –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const pathname = usePathname();          // –¢–µ–∫—É—â–∏–π –ø—É—Ç—å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞

  const authed = Boolean(data?.user);
  const roleSlug = (data?.user as any)?.role as string | null;
  const role = normalizeRole(roleSlug);
  const roleRu = roleSlug ? (ROLE_RU[roleSlug] ?? roleSlug) : null;

  // –§–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const hasAdminRights = (roleSlug === 'admin') || canViewAdmin(role);   // –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏–ª–∏ –∑–∞–º + (–∏–ª–∏ admin)
  const showTasksSection = canViewTasks(role);      // –ø–µ–¥–∞–≥–æ–≥ –∏ –≤—ã—à–µ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Ä–∞–∑–¥–µ–ª "–ó–∞–¥–∞—á–∏"
  const showCreateTasks = canCreateTasks(role);     // –∑–∞–º–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏

  const uid = (data?.user as any)?.id as string | undefined;

  // –°—á—ë—Ç—á–∏–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∞—Ç) –∏ –∑–∞–¥–∞—á, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const [unreadTotal, setUnreadTotal] = useState(0);
  const [tasksToMe, setTasksToMe] = useState(0);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∑–∞–¥–∞—á (–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–Ω–µ –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö)
  function assigneeIdsOf(t: TaskLite): string[] {
    if (Array.isArray(t.assignedTo) && t.assignedTo.length) {
      return t.assignedTo
        .filter(a => !a.type || a.type === 'user')
        .map(a => a.id)
        .filter(Boolean);
    }
    if (Array.isArray(t.assignees) && t.assignees.length) {
      return t.assignees.map(a => a.userId).filter(Boolean);
    }
    return [];
  }
  function myAssigneeStatus(t: TaskLite, myId?: string | null): string | null {
    if (!myId) return null;
    const rec = (t.assignees || []).find(a => a.userId === myId);
    return rec?.status ?? null;
  }
  function tasksFromLocal(id: string) {
    try {
      const raw = localStorage.getItem(`tasks:u:${id}:toMeCount`);
      const n = raw ? parseInt(raw, 10) : 0;
      if (!Number.isNaN(n)) setTasksToMe(n);
    } catch {}
  }
  async function tasksFromServer(id: string) {
    try {
      const r = await fetch('/api/tasks', { cache: 'no-store' });
      if (!r.ok) { 
        tasksFromLocal(id); 
        return; 
      }
      const list = (await r.json()) as TaskLite[];
      const count = Array.isArray(list)
        ? list.filter(t => assigneeIdsOf(t).includes(id) && myAssigneeStatus(t, id) !== 'done').length
        : 0;
      setTasksToMe(count);
      try {
        localStorage.setItem(`tasks:u:${id}:toMeCount`, String(count));
        window.dispatchEvent(new Event('g108:tasks-count-updated'));
      } catch {}
    } catch {
      tasksFromLocal(id);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —á–∞—Ç–æ–≤ (–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ) —Å —Å–µ—Ä–≤–µ—Ä–∞
  async function refreshUnread() {
    if (!uid) {
      setUnreadTotal(0);
      return;
    }
    try {
      const r = await fetch('/api/chat/threads/list', { 
        cache: 'no-store', 
        headers: { 'X-User-Id': uid } 
      }).catch(() => null);
      if (!r?.ok) return;
      const list = (await r.json()) as ThreadListItem[];
      const total = (list || []).reduce((acc, t) => acc + (t.unreadCount ?? 0), 0);
      setUnreadTotal(total);
    } catch {}
  }

  // –≠—Ñ—Ñ–µ–∫—Ç: –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ —á–∞—Ç–æ–≤/–∑–∞–¥–∞—á, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  useEffect(() => {
    if (!authed || !uid) return;
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    refreshUnread();
    tasksFromLocal(uid);
    tasksFromServer(uid);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const onThreadsUpdated = () => refreshUnread();
    const onSsePush = () => refreshUnread();
    const onTasksUpdated = () => tasksFromLocal(uid);
    const onVis = () => {
      if (document.visibilityState === 'visible') {
        refreshUnread();
        tasksFromServer(uid);
      }
    };

    window.addEventListener('g108:chat-threads-updated', onThreadsUpdated as any);
    window.addEventListener('g108:sse-push', onSsePush as any);
    window.addEventListener('g108:tasks-count-updated', onTasksUpdated as any);
    window.addEventListener('visibilitychange', onVis);

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á (–∫–∞–∂–¥—ã–µ 15—Å)
    const intervalId = window.setInterval(() => tasksFromServer(uid), 15000);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      window.removeEventListener('g108:chat-threads-updated', onThreadsUpdated as any);
      window.removeEventListener('g108:sse-push', onSsePush as any);
      window.removeEventListener('g108:tasks-count-updated', onTasksUpdated as any);
      window.removeEventListener('visibilitychange', onVis);
      window.clearInterval(intervalId);
    };
  }, [authed, uid]);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  const [confirmOpen, setConfirmOpen] = useState(false);
  const [cleaning, setCleaning] = useState(false);
  const [cleanMsg, setCleanMsg] = useState<string | null>(null);
  const [cleanErr, setCleanErr] = useState<string | null>(null);

  async function runPurge() {
    setCleaning(true);
    setCleanErr(null);
    setCleanMsg(null);
    try {
      const r = await fetch('/api/admin/cleanup-ghosts?purge=1', { method: 'POST' });
      const ct = r.headers.get('content-type') || '';
      const payload = ct.includes('application/json') ? await r.json() : null;
      if (!r.ok) throw new Error(payload?.error || `HTTP ${r.status}`);
      const removedCount = (payload?.deleted || []).length ?? 0;
      setConfirmOpen(false);
      setCleanMsg(`–£–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤: ${removedCount}.`);
      setTimeout(() => setCleanMsg(null), 4500);
    } catch (e: any) {
      setCleanErr(e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å');
      setTimeout(() => setCleanErr(null), 6000);
    } finally {
      setCleaning(false);
    }
  }

  const fio = splitFio((data?.user?.name as string) || null);

  return (
    <aside className="wrap">
      {/* –®–∞–ø–∫–∞ —Å–∞–π–¥–±–∞—Ä–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è */}
      <div className="head glass">
        <div className="who" title={(data?.user?.name as string) || '–ì–æ—Å—Ç—å'}>
          <div className="fio">
            <div className="last">{fio.last}</div>
            {fio.rest ? <div className="rest">{fio.rest}</div> : null}
          </div>
          <div className="metaRow">
            {roleRu && <div className="rolePill">{roleRu}</div>}
            {authed && (
              <Link href="/settings" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è" className="settings" aria-label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è">
                {/* –ò–∫–æ–Ω–∫–∞ "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" (—Ç—Ä–∏ –ø–æ–ª–æ—Å–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏) –≤ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º —Ü–≤–µ—Ç–µ */}
                <svg viewBox="0 0 24 24" width="22" height="22" aria-hidden="true">
                  <path fill={BRAND} d="M6 5h12a1 1 0 1 1 0 2H6a1 1 0 1 1 0-2Zm3 6h9a1 1 0 1 1 0 2H9a1 1 0 1 1 0-2ZM4 17h16a1 1 0 1 1 0 2H4a1 1 0 1 1 0-2Z" />
                  <circle cx="8" cy="6" r="2" fill={BRAND} />
                  <circle cx="14" cy="12" r="2" fill={BRAND} />
                  <circle cx="10" cy="18" r="2" fill={BRAND} />
                </svg>
              </Link>
            )}
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è ‚Äî —Å–µ—Ç–∫–∞ –∏–∑ 2 x N ¬´—Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö¬ª –ø–ª–∏—Ç–æ–∫ */}
      <nav className="nav">
        {authed && (
          <>
            <div className="navGrid">
              {/* –ë–ª–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç 8 –ø–ª–∏—Ç–æ–∫, –∫–∞–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) */}
              <NavTile href="/dashboard"     active={pathname === '/dashboard'}     label="–û—Å–Ω–æ–≤–Ω–æ–µ" />
              <NavTile href="/chat"          active={pathname === '/chat'}          label="–ß–∞—Ç—ã" unread={pathname !== '/chat' ? unreadTotal : 0} />
              {showTasksSection && (
                <NavTile href="/inboxTasks"    active={pathname === '/inboxTasks'}    label="–ó–∞–¥–∞—á–∏" unread={pathname !== '/inboxTasks' ? tasksToMe : 0} />
              )}
              <NavTile href="/calendar"      active={pathname === '/calendar'}      label="–ö–∞–ª–µ–Ω–¥–∞—Ä—å" />
              <NavTile href="/schedule"      active={pathname === '/schedule'}      label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" />
              <NavTile href="/teachers"      active={pathname === '/teachers'}      label="–ü–µ–¥–∞–≥–æ–≥–∏" />
              <NavTile href="/discussions"   active={pathname === '/discussions'}   label="–¢—Ä–µ–Ω–¥—ã" />
              <NavTile href="/archive_tasks" active={pathname === '/archive_tasks'} label="–ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á" />
            </div>

            {hasAdminRights && (
              <>
                <div className="adminHeader">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</div>
                <div className="navGrid">
                  {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è+ (–ø–ª–∏—Ç–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏) */}
                  <NavTile href="/admin"           active={pathname === '/admin'}           label="–ê–¥–º–∏–Ω–∫–∞" />
                  <NavTile href="/admin/db-status" active={pathname === '/admin/db-status'} label="–°—Ç–∞—Ç—É—Å –ë–î" />
                  <NavTile href="/admin/groups"    active={pathname === '/admin/groups'}    label="–ö–∞—Ñ–µ–¥—Ä—ã –∏ –≥—Ä—É–ø–ø—ã" />
                  <NavTile asButton onClick={() => setConfirmOpen(true)}                   label="–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã" />
                </div>
              </>
            )}
          </>
        )}
      </nav>

      {/* –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Å–∞–π–¥–±–∞—Ä–∞ */}
      <div className="foot">
        {hasAdminRights && (
          <>
            {cleanMsg && <div className="note">{cleanMsg}</div>}
            {cleanErr && <div className="error">{cleanErr}</div>}
          </>
        )}
        {authed ? (
          <button className="btn primary" onClick={() => signOut({ callbackUrl: '/sign-in' })}>
            –í—ã–π—Ç–∏
          </button>
        ) : (
          <Link href="/sign-in" className="btn primary">
            –í–æ–π—Ç–∏
          </Link>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ admin/director/deputy_plus) */}
      {confirmOpen && (
        <div 
          className="modal-backdrop" 
          role="dialog" 
          aria-modal="true" 
          onClick={() => !cleaning && setConfirmOpen(false)}
        >
          <div className="modal-card" onClick={(e) => e.stopPropagation()}>
            <button 
              className="close" 
              onClick={() => !cleaning && setConfirmOpen(false)} 
              aria-label="–ó–∞–∫—Ä—ã—Ç—å"
            >
              √ó
            </button>
            <h3 className="modal-title">–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ</h3>
            <p className="modal-text">
              –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –æ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.
            </p>
            <div className="modal-actions">
              <button className="btn" onClick={() => setConfirmOpen(false)} disabled={cleaning}>
                –û—Ç–º–µ–Ω–∞
              </button>
              <button className="btn primary" onClick={runPurge} disabled={cleaning}>
                {cleaning ? '–£–¥–∞–ª–µ–Ω–∏–µ‚Ä¶' : '–£–¥–∞–ª–∏—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ SSE-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ (–≤ –±—É–¥—É—â–µ–º, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π API) */}
      {/* <ChatWrap /> */}

      <style jsx>{`
        .wrap {
          display: grid;
          grid-template-rows: auto 1fr auto;
          height: 100%;
          background: #fff;
          border-right: 1px solid #e5e7eb;
          font-size: 14px;
        }
        .head {
          display: flex;
          align-items: center;
          min-height: 86px;
          padding: 12px;
          border-bottom: 1px solid rgba(229, 231, 235, 0.8);
          position: relative;
        }
        .head::after {
          content: "";
          position: absolute;
          left: 0;
          right: 0;
          bottom: -1px;
          height: 2px;
          background: ${BRAND};
          opacity: 0.12;
        }
        .glass {
          background: rgba(255, 255, 255, 0.55);
          backdrop-filter: saturate(180%) blur(10px);
          -webkit-backdrop-filter: saturate(180%) blur(10px);
        }
        .who {
          min-width: 0;
          display: grid;
          gap: 6px;
          width: 100%;
        }
        .fio {
          line-height: 1.1;
        }
        .last {
          font-weight: 900;
          font-size: 18px;
          letter-spacing: 0.4px;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
        }
        .rest {
          font-weight: 700;
          font-size: 14px;
          color: #111827;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
        }
        .metaRow {
          display: flex;
          align-items: center;
          gap: 8px;
          justify-content: space-between;
        }
        .rolePill {
          display: inline-block;
          font-size: 12px;
          color: #374151;
          padding: 2px 8px;
          border: 1px solid rgba(229, 231, 235, 0.9);
          border-radius: 9999px;
          background: rgba(255, 255, 255, 0.6);
          backdrop-filter: saturate(180%) blur(8px);
        }
        .settings {
          display: inline-flex;
          align-items: center;
          justify-content: center;
          width: 36px;
          height: 36px;
          border-radius: 12px;
          background: rgba(255, 255, 255, 0.6);
          border: 1px solid rgba(229, 231, 235, 0.9);
          backdrop-filter: saturate(180%) blur(8px);
        }
        .settings:hover {
          background: rgba(255, 255, 255, 0.9);
        }
        .nav {
          padding: 12px;
        }
        .navGrid {
          display: grid;
          grid-template-columns: repeat(2, minmax(0, 1fr));
          gap: 10px;
        }
        .adminHeader {
          margin: 12px 4px 8px;
          font-size: 12px;
          color: #6b7280;
          font-weight: 700;
          text-transform: uppercase;
          letter-spacing: 0.06em;
        }
        .foot {
          padding: 12px;
          border-top: 1px solid #e5e7eb;
          display: grid;
          gap: 8px;
        }
        .btn {
          height: 36px;
          border: 1px solid #e5e7eb;
          background: #fff;
          border-radius: 10px;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
        }
        .btn:hover {
          background: #f9fafb;
        }
        .primary {
          background: ${BRAND};
          color: #fff;
          border-color: ${BRAND};
        }
        .primary:hover {
          filter: brightness(0.96);
        }
        .note {
          font-size: 12px;
          color: #16a34a;
        }
        .error {
          font-size: 12px;
          color: #ef4444;
        }
        .modal-backdrop {
          position: fixed;
          inset: 0;
          background: rgba(0, 0, 0, 0.4);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 50;
        }
        .modal-card {
          position: relative;
          width: 520px;
          max-width: calc(100vw - 32px);
          background: #fff;
          border-radius: 12px;
          border: 1px solid #e5e7eb;
          padding: 16px;
          box-shadow: 0 16px 40px rgba(0, 0, 0, 0.2);
        }
        .close {
          position: absolute;
          right: 8px;
          top: 6px;
          border: none;
          background: transparent;
          font-size: 20px;
          line-height: 1;
          cursor: pointer;
        }
        .modal-title {
          margin: 0 0 8px;
          font-size: 16px;
          font-weight: 700;
        }
        .modal-text {
          margin: 0 0 12px;
          font-size: 14px;
          color: #374151;
        }
        .modal-actions {
          display: flex;
          justify-content: flex-end;
          gap: 8px;
        }
      `}</style>
    </aside>
  );
}
