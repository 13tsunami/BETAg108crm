generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

/* ===== Новые типы ===== */
enum TaskAssigneeStatus {
  in_progress
  submitted
  done
  rejected
}

/* ===== Пользователи и общие сущности ===== */
model User {
  id               String    @id @default(uuid())
  name             String
  username         String?   @unique
  email            String?   @unique
  phone            String?   @unique
  birthday         DateTime?
  classroom        String?
  role             String?
  avatarUrl        String?
  telegram         String?
  about            String?
  notifyEmail      Boolean   @default(true)
  notifyTelegram   Boolean   @default(false)
  subjects         String?
  methodicalGroups String?
  passwordHash     String?
  lastSeen         DateTime?

  messages           Message[]       @relation("UserMessages")
  threadsA           Thread[]        @relation("ThreadA")
  threadsB           Thread[]        @relation("ThreadB")
  readMarks          ReadMark[]      @relation("ReadMarkUser")
  groupMemberships   GroupMember[]
  taskAssignments    TaskAssignee[]
  subjectMemberships SubjectMember[]
  createdTasks       Task[]          @relation("TaskCreatedBy")
  messageHides       MessageHide[]

  notes Note[]

  // обратная связь для ревьюера задач
  reviewedAssignments TaskAssignee[] @relation("TaskReviewedBy")
}

model Group {
  id      String        @id @default(uuid())
  name    String
  members GroupMember[]
}

model GroupMember {
  id      String @id @default(uuid())
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Thread {
  id              String    @id @default(uuid())
  aId             String
  bId             String
  lastMessageAt   DateTime?
  lastMessageText String?
  title           String    @default("")

  a User @relation("ThreadA", fields: [aId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  b User @relation("ThreadB", fields: [bId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  messages  Message[]
  readMarks ReadMark[] @relation("ReadMarkThread")

  @@index([lastMessageAt, id])
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String
  authorId  String
  threadId  String

  editedAt  DateTime?
  deletedAt DateTime?

  author User   @relation("UserMessages", fields: [authorId], references: [id], onDelete: Cascade)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  attachments Attachment[]  @relation("MessageAttachments")
  hides       MessageHide[]

  @@index([threadId, createdAt])
}

model MessageHide {
  messageId String
  userId    String

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([userId])
}

/* ===== Задачи и исполнители ===== */
model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  hidden      Boolean  @default(false)
  priority    String   @default("normal")

  // audit
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  createdById   String?
  createdByName String?

  // новый флаг для review-flow
  reviewRequired Boolean @default(false)

  createdBy User? @relation("TaskCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)

  assignees TaskAssignee[]
  tags      TaskTag[]

  @@index([createdById])
  @@index([dueDate])
}

model TaskAssignee {
  id     String @id @default(uuid())
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // было String, теперь enum. миграция переведёт значения безопасно.
  status        TaskAssigneeStatus @default(in_progress)
  assignedAt    DateTime  @default(now())
  completedAt   DateTime?

  // новые поля для review-flow
  submittedAt   DateTime?
  reviewedAt    DateTime?
  reviewedById  String?
  reviewedBy    User?     @relation("TaskReviewedBy", fields: [reviewedById], references: [id], onDelete: SetNull)

  // связь с попытками сдачи
  submissions   Submission[]

  @@unique([taskId, userId])
  @@index([userId])
  @@index([taskId])
  @@index([status])
  @@index([reviewedById])
}

model Tag {
  id    String    @id @default(uuid())
  name  String    @unique
  tasks TaskTag[]
}

model TaskTag {
  id     String @id @default(uuid())
  taskId String
  tagId  String
  task   Task   @relation(fields: [taskId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  // без каскадов и без @@unique([taskId, tagId]) по текущей БД
}

/* ===== Read marks ===== */
model ReadMark {
  threadId String
  userId   String
  readAt   DateTime

  thread Thread @relation("ReadMarkThread", fields: [threadId], references: [id], onDelete: Cascade)
  user   User   @relation("ReadMarkUser", fields: [userId], references: [id], onDelete: Cascade)

  @@id([threadId, userId])
  @@index([userId])
}

/* ===== Файлы ===== */
model Attachment {
  id        String  @id @default(uuid())

  // Привязка к сообщениям теперь опциональная
  messageId String?
  message   Message? @relation("MessageAttachments", fields: [messageId], references: [id], onDelete: Cascade)

  // Метаданные
  name         String               // текущее имя в системе хранения
  originalName String?              // исходное имя файла
  mime         String
  size         Int
  data         Bytes
  sha256       String?  @db.VarChar(64)
  createdAt    DateTime @default(now())

  // связи со сдачами
  submissionLinks SubmissionAttachment[]

  @@index([messageId])
}

/* ===== Нормализованные предметы ===== */
model Subject {
  id      String          @id @default(uuid())
  name    String          @unique
  members SubjectMember[]
}

model SubjectMember {
  id        String  @id @default(uuid())
  userId    String
  subjectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId])
}

/* ===== Заметки ===== */
model Note {
  id        String   @id @default(uuid())
  userId    String
  at        DateTime
  allDay    Boolean  @default(true)
  title     String?
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, at])
  @@index([at])
}

/* ===== Новые сущности review-flow ===== */
model Submission {
  id             String   @id @default(uuid())
  taskAssigneeId String
  comment        String?
  createdAt      DateTime @default(now())

  assignee    TaskAssignee         @relation(fields: [taskAssigneeId], references: [id], onDelete: Cascade)
  attachments SubmissionAttachment[]
  @@index([taskAssigneeId])
}

model SubmissionAttachment {
  submissionId String
  attachmentId String

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  attachment Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)

  @@id([submissionId, attachmentId])
  @@index([attachmentId])
}
