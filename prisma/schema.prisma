generator client {
  provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  username         String?   @unique
  email            String?   @unique
  phone            String?   @unique
  birthday         DateTime?
  classroom        String?
  role             String?
  avatarUrl        String?
  telegram         String?
  about            String?
  notifyEmail      Boolean   @default(true)
  notifyTelegram   Boolean   @default(false)
  subjects         String?
  methodicalGroups String?
  passwordHash     String?
  lastSeen         DateTime?

  messages         Message[]      @relation("UserMessages")
  threadsA         Thread[]       @relation("ThreadA")
  threadsB         Thread[]       @relation("ThreadB")
  readMarks        ReadMark[]     @relation("ReadMarkUser")
  groupMemberships GroupMember[]
  taskAssignments  TaskAssignee[]

  // обратная сторона связи для MessageHide — ЭТО НОВАЯ СТРОКА
  messageHides MessageHide[]
}

model Group {
  id      String        @id @default(uuid())
  name    String
  members GroupMember[]
}

model GroupMember {
  id      String @id @default(uuid())
  userId  String
  groupId String
  user    User   @relation(fields: [userId],  references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Thread {
  id              String    @id @default(uuid())
  aId             String
  bId             String
  lastMessageAt   DateTime?
  lastMessageText String?
  title           String    @default("")

  a User @relation("ThreadA", fields: [aId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  b User @relation("ThreadB", fields: [bId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  messages  Message[]
  readMarks ReadMark[] @relation("ReadMarkThread")

  @@index([lastMessageAt, id])
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String
  authorId  String
  threadId  String

  editedAt  DateTime?
  deletedAt DateTime?

  author User   @relation("UserMessages", fields: [authorId], references: [id], onDelete: Cascade)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  attachments Attachment[] @relation("MessageAttachments")
  hides       MessageHide[]

  @@index([threadId, createdAt])
}

model MessageHide {
  messageId String
  userId    String

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId],    references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([userId])
}

model Task {
  id          String         @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  hidden      Boolean        @default(false)
  priority    String         @default("normal")
  assignees   TaskAssignee[]
  tags        TaskTag[]
}

model TaskAssignee {
  id     String @id @default(uuid())
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id    String    @id @default(uuid())
  name  String    @unique
  tasks TaskTag[]
}

model TaskTag {
  id     String @id @default(uuid())
  taskId String
  tagId  String
  task   Task   @relation(fields: [taskId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])
}

model ReadMark {
  threadId String
  userId   String
  readAt   DateTime

  thread Thread @relation("ReadMarkThread", fields: [threadId], references: [id], onDelete: Cascade)
  user   User   @relation("ReadMarkUser",   fields: [userId],   references: [id], onDelete: Cascade)

  @@id([threadId, userId])
  @@index([userId])
}

model Attachment {
  id        String @id @default(uuid())
  messageId String
  name      String
  mime      String
  size      Int
  data      Bytes

  message Message @relation("MessageAttachments", fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}
