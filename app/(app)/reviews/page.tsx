// app/(app)/reviews/page.tsx
import { auth } from '@/auth.config';
import { prisma } from '@/lib/prisma';
import { normalizeRole, canCreateTasks } from '@/lib/roles';
import { redirect } from 'next/navigation';
import type { Prisma } from '@prisma/client';
import { bulkReviewAction } from '@/app/(app)/reviews/bulk-actions';
import s from './reviews.module.css';

type SearchParams = Promise<Record<string, string | string[] | undefined>>;

type TaskForReview = Prisma.TaskGetPayload<{
  include: {
    assignees: {
      include: {
        user: { select: { id: true; name: true } };
        submissions: {
          where: { open: true };
          orderBy: { createdAt: 'desc' };
          take: 1;
          select: {
            createdAt: true;
            _count: { select: { attachments: true } };
          };
        };
      };
    };
    attachments: {
      select: {
        attachment: {
          select: { id: true; name: true; originalName: true; size: true; mime: true };
        };
      };
    };
  };
}>;

function fmtRuDate(d?: Date | string | null): string {
  if (!d) return '';
  const dt = typeof d === 'string' ? new Date(d) : d;
  const f = new Intl.DateTimeFormat('ru-RU', {
    timeZone: 'Asia/Yekaterinburg',
    day: '2-digit',
    month: 'short',
    year: 'numeric',
  }).format(dt);
  return f.replace('.', '');
}
function fmtTime(d?: Date | string | null): string {
  if (!d) return '';
  const dt = typeof d === 'string' ? new Date(d) : d;
  return new Intl.DateTimeFormat('ru-RU', {
    timeZone: 'Asia/Yekaterinburg',
    hour: '2-digit',
    minute: '2-digit',
  }).format(dt);
}

export const dynamic = 'force-dynamic';
export const revalidate = 0;

export default async function Page({ searchParams }: { searchParams: SearchParams }) {
  await searchParams; // –∫–æ–Ω—Ç—Ä–∞–∫—Ç Next 15

  const session = await auth();
  const meId = session?.user?.id ?? null;
  const role = normalizeRole(session?.user?.role);
  const mayReview = canCreateTasks(role);
  if (!meId || !mayReview) redirect('/inboxtasks');

  const reviewFlowOn = process.env.NEXT_PUBLIC_REVIEW_FLOW === '1';

  const tasks: TaskForReview[] = await prisma.task.findMany({
    where: {
      createdById: meId,
      ...(reviewFlowOn ? { reviewRequired: true } : {}),
      assignees: { some: { status: 'submitted' } },
      hidden: { not: true },
    },
    include: {
      assignees: {
        include: {
          user: { select: { id: true, name: true } },
          submissions: {
            where: { open: true },
            orderBy: { createdAt: 'desc' },
            take: 1,
            select: {
              createdAt: true,
              _count: { select: { attachments: true } },
            },
          },
        },
      },
      attachments: {
        select: {
          attachment: {
            select: { id: true, name: true, originalName: true, size: true, mime: true },
          },
        },
      },
    },
    orderBy: [{ dueDate: 'asc' as const }, { createdAt: 'desc' as const }],
  });

  return (
    <main className={s.reviews}>
      <header className={s.pageHead}>
        <h1 className={s.pageTitle}>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</h1>
        <div className={s.pageSubtitle}>
          –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ —Å –≤–∫–ª—é—á—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –∏–º–µ—é—â–∏–º–∏—Å—è —Å–¥–∞—á–∞–º–∏.
        </div>
      </header>

      {tasks.length === 0 && <div className={s.emptyPage}>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.</div>}

      <section className={s.grid}>
        {tasks.map((t) => {
          const onReviewAll = t.assignees.filter((a) => a.status === 'submitted');
          const acceptedAll = t.assignees.filter((a) => a.status === 'done');
          const onReviewFirst = onReviewAll.slice(0, 5);
          const onReviewRest = onReviewAll.slice(5);
          const acceptedFirst = acceptedAll.slice(0, 5);
          const acceptedRest = acceptedAll.slice(5);

          const lastActivity = onReviewAll
            .map((a) => a.submissions[0]?.createdAt)
            .filter(Boolean)
            .sort((a, b) => +new Date(b as Date) - +new Date(a as Date))[0];

          const bulkFormId = `bulk-${t.id}`;

          return (
            <details key={t.id} className={s.revCard}>
              <summary className={s.revHeader}>
                <div>
                  <div className={s.revTitle}>{t.title}</div>
                  <div className={s.revMeta}>
                    –°—Ä–æ–∫: {fmtRuDate(t.dueDate as Date)} ‚Ä¢ –ü—Ä–∏–Ω—è—Ç–æ {acceptedAll.length} –∏–∑ {t.assignees.length}
                    {t.attachments.length ? ` ‚Ä¢ üìé ${t.attachments.length}` : ''}
                  </div>
                  <div className={s.revMeta}>
                    –ù–∞–∑–Ω–∞—á–∏–ª: <span className={s.brand}>{t.createdByName ?? t.createdById}</span>
                    {' ‚Ä¢ '}–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: –≤—ã
                    {lastActivity ? ` ‚Ä¢ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${fmtTime(lastActivity as Date)}` : ''}
                  </div>
                </div>
              </summary>

              <div className={s.revBody}>
                {t.description && <div className={s.revTaskDesc}>{t.description}</div>}

                <div>
                  <div className={s.revSectionTitle}>–§–∞–π–ª—ã –∑–∞–¥–∞—á–∏</div>
                  {t.attachments.length === 0 ? (
                    <div className={s.revEmpty}>–ù–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π.</div>
                  ) : (
                    <ul className={s.filesList}>
                      {t.attachments.map(({ attachment }) => {
                        const title = attachment.originalName || attachment.name;
                        const sizeKb = Math.max(1, Math.round((attachment.size ?? 0) / 1024));
                        return (
                          <li key={attachment.id} className={s.fileItem}>
                            <a
                              href={`/api/files/${encodeURIComponent(attachment.name)}`}
                              target="_blank"
                              rel="noreferrer"
                              className={s.fileLink}
                              title={title}
                            >
                              {title}
                            </a>
                            <span className={s.fileMeta}>
                              {attachment.mime} ‚Ä¢ ~{sizeKb} –ö–ë
                            </span>
                          </li>
                        );
                      })}
                    </ul>
                  )}
                </div>

                <div>
                  <div className={s.revSectionTitle}>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</div>
                  {onReviewAll.length === 0 ? (
                    <div className={s.revEmpty}>–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ.</div>
                  ) : (
                    <>
                      {/* –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ï –º–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: —á–µ–∫–±–æ–∫—Å—ã + –Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å */}
                      <form id={bulkFormId} action={bulkReviewAction} className={s.bulkForm}>
                        <input type="hidden" name="taskId" value={t.id} />
                        <div className={s.bulkBar}>
                          <div className={s.brandHSmall}>–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</div>
                          <div className={s.bulkControls}>
                            <button type="submit" name="__op" value="approve" className={s.btnBrand}>
                              –ü—Ä–∏–Ω—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                            </button>
                            <button type="submit" name="__op" value="reject" className={s.btnGhost}>
                              –í–µ—Ä–Ω—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                            </button>
                            <input name="reason" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü.)" className={s.revReason} />
                          </div>
                          <div className={s.bulkHint}>
                            –û—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫–∞–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.
                          </div>
                        </div>
                      </form>

                      {/* –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫: –¢–û–õ–¨–ö–û —á–µ–∫–±–æ–∫—Å—ã + —Å—Å—ã–ª–∫–∞, –±–µ–∑ –±—ã—Å—Ç—Ä—ã—Ö –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ */}
                      <div className={s.rows}>
                        {onReviewFirst.map((a, idx) => {
                          const os = a.submissions[0];
                          const filesCount = os?._count?.attachments ?? 0;
                          return (
                            <div key={a.id} className={s.revRow}>
                              <input type="checkbox" form={bulkFormId} name="ids" value={a.id} className={s.revChk} />
                              <span className={s.revIdx}>{idx + 1}.</span>

                              <a href={`/reviews/${a.id}`} className={s.revPill} title="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è">
                                {a.user?.name ?? a.user?.id ?? a.id}
                              </a>

                              <span className={s.revWhen}>
                                {os?.createdAt ? `–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${fmtTime(os.createdAt)}` : '–±–µ–∑ –æ—Ç–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏'}
                                {filesCount ? ` ‚Ä¢ —Ñ–∞–π–ª–æ–≤: ${filesCount}` : ' ‚Ä¢ —Ñ–∞–π–ª–æ–≤: 0'}
                              </span>
                            </div>
                          );
                        })}
                      </div>

                      {onReviewRest.length > 0 && (
                        <details className={s.moreBlock}>
                          <summary className={s.revShowAll}>
                            –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ({onReviewRest.length})
                          </summary>
                          <div className={s.rowsMore}>
                            {onReviewRest.map((a, jdx) => {
                              const idx = 5 + jdx;
                              const os = a.submissions[0];
                              const filesCount = os?._count?.attachments ?? 0;
                              return (
                                <div key={a.id} className={s.revRow}>
                                  <input type="checkbox" form={bulkFormId} name="ids" value={a.id} className={s.revChk} />
                                  <span className={s.revIdx}>{idx + 1}.</span>

                                  <a href={`/reviews/${a.id}`} className={s.revPill} title="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è">
                                    {a.user?.name ?? a.user?.id ?? a.id}
                                  </a>

                                  <span className={s.revWhen}>
                                    {os?.createdAt ? `–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${fmtTime(os.createdAt)}` : '–±–µ–∑ –æ—Ç–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏'}
                                    {filesCount ? ` ‚Ä¢ —Ñ–∞–π–ª–æ–≤: ${filesCount}` : ' ‚Ä¢ —Ñ–∞–π–ª–æ–≤: 0'}
                                  </span>
                                </div>
                              );
                            })}
                          </div>
                        </details>
                      )}
                    </>
                  )}
                </div>

                <div>
                  <div className={s.revSectionTitle}>–ü—Ä–∏–Ω—è—Ç–æ</div>
                  {acceptedAll.length === 0 ? (
                    <div className={s.revEmpty}>–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ.</div>
                  ) : (
                    <>
                      <div className={s.acceptedList}>
                        {acceptedFirst.map((a) => (
                          <span key={a.id} title="–ü—Ä–∏–Ω—è—Ç–æ" className={s.revAccepted}>
                            {a.user?.name ?? a.user?.id ?? a.id} ‚úì
                          </span>
                        ))}
                      </div>
                      {acceptedRest.length > 0 && (
                        <details className={s.moreBlock}>
                          <summary className={s.revShowAll}>–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö ({acceptedRest.length})</summary>
                          <div className={s.acceptedMore}>
                            {acceptedRest.map((a) => (
                              <span key={a.id} title="–ü—Ä–∏–Ω—è—Ç–æ" className={s.revAccepted}>
                                {a.user?.name ?? a.user?.id ?? a.id} ‚úì
                              </span>
                            ))}
                          </div>
                        </details>
                      )}
                    </>
                  )}
                </div>
              </div>
            </details>
          );
        })}
      </section>
    </main>
  );
}
