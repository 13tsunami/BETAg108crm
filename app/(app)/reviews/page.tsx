// app/(app)/reviews/page.tsx
import { auth } from '@/auth.config';
import { prisma } from '@/lib/prisma';
import { normalizeRole, canCreateTasks } from '@/lib/roles';
import { redirect } from 'next/navigation';
import type { Prisma } from '@prisma/client';
import {
  approveSubmissionAction,
  rejectSubmissionAction,
  approveAllInTaskAction,
} from '../inboxtasks/review-actions';
import { approveSelectedAction, rejectSelectedAction } from '@/app/(app)/reviews/bulk-actions';

type SearchParams = Promise<Record<string, string | string[] | undefined>>;

type TaskForReview = Prisma.TaskGetPayload<{
  include: {
    assignees: {
      include: {
        user: { select: { id: true; name: true } };
        submissions: {
          where: { open: true };
          orderBy: { createdAt: 'desc' };
          take: 1;
          select: {
            createdAt: true;
            _count: { select: { attachments: true } };
          };
        };
      };
    };
    attachments: {
      select: {
        attachment: {
          select: { id: true; name: true; originalName: true; size: true; mime: true };
        };
      };
    };
  };
}>;

function fmtRuDate(d: Date | string | null | undefined): string {
  if (!d) return '';
  const dt = typeof d === 'string' ? new Date(d) : d;
  const f = new Intl.DateTimeFormat('ru-RU', {
    timeZone: 'Asia/Yekaterinburg',
    day: '2-digit',
    month: 'short',
    year: 'numeric',
  }).format(dt);
  return f.replace('.', '');
}
function fmtTime(d?: Date | string | null): string {
  if (!d) return '';
  const dt = typeof d === 'string' ? new Date(d) : d;
  return new Intl.DateTimeFormat('ru-RU', {
    timeZone: 'Asia/Yekaterinburg',
    hour: '2-digit',
    minute: '2-digit',
  }).format(dt);
}

export const dynamic = 'force-dynamic';
export const revalidate = 0;

export default async function Page({ searchParams }: { searchParams: SearchParams }) {
  await searchParams;

  const session = await auth();
  const meId = session?.user?.id ?? null;
  const role = normalizeRole(session?.user?.role);
  const mayReview = canCreateTasks(role);
  if (!meId || !mayReview) redirect('/inboxtasks');

  const reviewFlowOn = process.env.NEXT_PUBLIC_REVIEW_FLOW === '1';

  const tasks: TaskForReview[] = await prisma.task.findMany({
    where: {
      createdById: meId,
      ...(reviewFlowOn ? { reviewRequired: true } : {}),
      assignees: { some: { status: 'submitted' } },
      hidden: { not: true },
    },
    include: {
      assignees: {
        include: {
          user: { select: { id: true, name: true } },
          submissions: {
            where: { open: true },
            orderBy: { createdAt: 'desc' as const },
            take: 1,
            select: { createdAt: true, _count: { select: { attachments: true } } },
          },
        },
      },
      attachments: {
        select: {
          attachment: {
            select: { id: true, name: true, originalName: true, size: true, mime: true },
          },
        },
      },
    },
    orderBy: [{ dueDate: 'asc' as const }, { createdAt: 'desc' as const }],
  });

  return (
    <main className="reviews" style={{ padding: 16 }}>
      <header style={{ marginBottom: 12 }}>
        <h1 style={{ margin: 0, fontSize: 22 }}>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</h1>
        <div style={{ fontSize: 13, color: '#6b7280' }}>
          –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ —Å –≤–∫–ª—é—á—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –∏–º–µ—é—â–∏–º–∏—Å—è —Å–¥–∞—á–∞–º–∏.
        </div>
      </header>

      {tasks.length === 0 && (
        <div style={{ fontSize: 14, color: '#6b7280' }}>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.</div>
      )}

      <section style={{ display: 'grid', gap: 10 }}>
        {tasks.map((t) => {
          const onReviewAll = t.assignees.filter(a => a.status === 'submitted');
          const acceptedAll = t.assignees.filter(a => a.status === 'done');

          const lastActivity = onReviewAll
            .map(a => a.submissions[0]?.createdAt)
            .filter(Boolean)
            .sort((a, b) => +new Date(b as Date) - +new Date(a as Date))[0];

          return (
            <details key={t.id} className="revCard">
              <summary className="revHeader">
                <div>
                  <div className="revTitle">{t.title}</div>
                  <div className="revMeta">
                    –°—Ä–æ–∫: {fmtRuDate(t.dueDate as Date)} ‚Ä¢ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ {onReviewAll.length} ‚Ä¢ –ü—Ä–∏–Ω—è—Ç–æ {acceptedAll.length} –∏–∑ {t.assignees.length}
                  </div>
                  <div className="revMeta">
                    –ù–∞–∑–Ω–∞—á–∏–ª: <span className="brandText">{t.createdByName ?? t.createdById}</span>
                    {lastActivity ? ` ‚Ä¢ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${fmtTime(lastActivity as Date)}` : ''}
                    {' ‚Ä¢ '}–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: –≤—ã
                  </div>
                </div>
              </summary>

              <div className="revBody">
                {/* –§–∞–π–ª—ã –∑–∞–¥–∞—á–∏ */}
                <div>
                  <div className="revSectionTitle">–§–∞–π–ª—ã –∑–∞–¥–∞—á–∏</div>
                  {t.attachments.length === 0 ? (
                    <div className="revEmpty">–ù–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π.</div>
                  ) : (
                    <ul style={{ margin: 0, paddingLeft: 18 }}>
                      {t.attachments.map(({ attachment }) => {
                        const title = attachment.originalName || attachment.name;
                        const sizeKb = Math.max(1, Math.round((attachment.size ?? 0) / 1024));
                        return (
                          <li key={attachment.id} style={{ marginBottom: 4 }}>
                            <a
                              href={`/api/files/${encodeURIComponent(attachment.name)}`}
                              target="_blank"
                              rel="noreferrer"
                              style={{ fontWeight: 500, color: '#8d2828', textDecoration: 'underline' }}
                            >
                              {title}
                            </a>
                            <span style={{ color: '#6b7280', marginLeft: 6, fontSize: 12 }}>
                              {attachment.mime} ‚Ä¢ ~{sizeKb} –ö–ë
                            </span>
                          </li>
                        );
                      })}
                    </ul>
                  )}
                </div>

                {/* –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ */}
                <div>
                  <div className="revSectionTitle">–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</div>
                  {onReviewAll.length === 0 ? (
                    <div className="revEmpty">–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ.</div>
                  ) : (
                    <form className="revBulkForm">
                      <div style={{ display: 'grid', gap: 8 }}>
                        {onReviewAll.map((a, idx) => {
                          const open = a.submissions[0];
                          const filesCount = open?._count.attachments ?? 0;
                          return (
                            <div key={a.id} className="revRow">
                              <input
                                type="checkbox"
                                name="taskAssigneeId"
                                value={a.id}
                                className="revChk"
                                title="–í—ã–±—Ä–∞—Ç—å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"
                              />

                              <span className="revIdx">{idx + 1}.</span>

                              <a
                                href={`/reviews/${a.id}`}
                                className="revPill"
                                title="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
                              >
                                {a.user?.name ?? a.userId}
                              </a>

                              <span className="revHint">
                                –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {open ? fmtTime(open.createdAt as Date) : '‚Äî'}
                                {` ‚Ä¢ üìé ${filesCount}`}
                              </span>

                              {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                              <form action={approveSubmissionAction}>
                                <input type="hidden" name="taskAssigneeId" value={a.id} />
                                <button type="submit" className="btnBrand">–ü—Ä–∏–Ω—è—Ç—å</button>
                              </form>

                              <details className="revInlineReject">
                                <summary className="btnGhost" role="button">–í–µ—Ä–Ω—É—Ç—å</summary>
                                <form action={rejectSubmissionAction} style={{ display: 'flex', gap: 6, alignItems: 'center', flexWrap: 'wrap' }}>
                                  <input type="hidden" name="taskAssigneeId" value={a.id} />
                                  <input name="reason" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü.)" className="revReason" />
                                  <button type="submit" className="btnGhost">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                                </form>
                              </details>
                            </div>
                          );
                        })}
                      </div>

                      {/* –õ–∏–ø–∫–∞—è –ø–∞–Ω–µ–ª—å –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π */}
                      <div className="bulkBar">
                        <div className="bulkLeft">–í—ã–±—Ä–∞–Ω–æ: <span className="bulkCount">‚Äî</span></div>
                        <div className="bulkRight">
                          <button type="submit" formAction={approveSelectedAction} className="btnBrand">–ü—Ä–∏–Ω—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö</button>
                          <input name="reason" className="revReason" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü.)" />
                          <button type="submit" formAction={rejectSelectedAction} className="btnGhost">–í–µ—Ä–Ω—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö</button>
                        </div>
                      </div>
                    </form>
                  )}
                </div>

                {/* –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ–π –∑–∞–¥–∞—á–∏ */}
                <details>
                  <summary className="revShowAll">–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</summary>
                  <div style={{ display: 'flex', gap: 8, alignItems: 'center', marginTop: 6 }}>
                    <form action={approveAllInTaskAction} style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                      <input type="hidden" name="taskId" value={t.id} />
                      <span className="revHint">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ¬ª –±—É–¥—É—Ç –ø—Ä–∏–Ω—è—Ç—ã.</span>
                      <button type="submit" className="btnBrand">–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ—Ö</button>
                    </form>
                  </div>
                </details>

                {/* –ü—Ä–∏–Ω—è—Ç–æ */}
                <div>
                  <div className="revSectionTitle">–ü—Ä–∏–Ω—è—Ç–æ</div>
                  {acceptedAll.length === 0 ? (
                    <div className="revEmpty">–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ.</div>
                  ) : (
                    <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
                      {acceptedAll.map((a) => (
                        <span key={a.id} title="–ü—Ä–∏–Ω—è—Ç–æ" className="revAccepted">
                          {a.user?.name ?? a.userId} ‚úì
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              </div>

              <style>{`
                .reviews { --brand:#8d2828; }
                .brandText { color: var(--brand); }

                .revCard {
                  border: 2px solid var(--brand);
                  border-radius: 12px;
                  background: #fff;
                  margin: 10px 0 12px;
                }
                .revHeader {
                  padding: 10px;
                  cursor: pointer;
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                  gap: 12px;
                }
                .revTitle { font-weight: 600; }
                .revMeta  { font-size: 12px; color: #374151; }

                .revBody {
                  padding: 10px;
                  border-top: 1px solid #f3f4f6;
                  display: grid;
                  gap: 12px;
                }

                .revSectionTitle { font-size: 13px; color: var(--brand); margin-bottom: 6px; }
                .revEmpty { font-size: 13px; color: #9ca3af; }
                .revRow { display: grid; grid-template-columns: 20px 28px auto 1fr auto auto; align-items: center; gap: 8px; width: 100%; }
                .revIdx { font-size: 12px; color: #6b7280; text-align: right; }
                .revChk { width: 16px; height: 16px; }
                .revHint { font-size: 12px; color: #6b7280; }

                .revPill {
                  border: 1px solid var(--brand);
                  border-radius: 999px;
                  padding: 2px 10px;
                  font-size: 12px;
                  background: #fff;
                  text-decoration: none;
                  color: #111827;
                  justify-self: start;
                }

                .revInlineReject > summary { list-style: none; }
                .revInlineReject[open] > summary { opacity: .8; }

                .bulkBar {
                  position: sticky;
                  bottom: 8px;
                  margin-top: 10px;
                  border: 1px solid #e5e7eb;
                  border-radius: 10px;
                  background: #fff;
                  padding: 8px;
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                  gap: 8px;
                }
                .bulkRight { display: flex; gap: 8px; align-items: center; flex-wrap: wrap; }
                .bulkCount { font-weight: 600; }

                .revShowAll { cursor: pointer; font-size: 13px; color: var(--brand); }

                .btnBrand {
                  height: 28px;
                  padding: 0 10px;
                  border-radius: 8px;
                  border: 1px solid var(--brand);
                  background: var(--brand);
                  color: #fff;
                  cursor: pointer;
                  font-size: 13px;
                  display: inline-flex;
                  align-items: center;
                  justify-content: center;
                }
                .btnBrand:disabled { opacity: .6; cursor: not-allowed; }

                .btnGhost {
                  height: 28px;
                  padding: 0 10px;
                  border-radius: 8px;
                  border: 1px solid #e5e7eb;
                  background: #fff;
                  color: #111827;
                  cursor: pointer;
                  font-size: 13px;
                  white-space: nowrap;
                }

                .revReason { height: 28px; padding: 0 8px; border-radius: 8px; border: 1px solid #e5e7eb; font-size: 13px; min-width: 180px; }

                .revAccepted {
                  border: 1px solid #e5e7eb;
                  border-radius: 999px;
                  padding: 2px 8px;
                  font-size: 12px;
                  background: #ecfdf5;
                }

                @media (max-width: 720px) {
                  .revRow { grid-template-columns: 20px 28px 1fr; grid-auto-rows: auto; }
                  .revHint { grid-column: 3 / span 1; }
                }
              `}</style>
            </details>
          );
        })}
      </section>
    </main>
  );
}
