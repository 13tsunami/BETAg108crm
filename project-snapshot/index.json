{
  "generatedAt": "2025-08-17T15:19:08.353Z",
  "root": "BETAg108crm.clean",
  "node": "v24.5.0",
  "next": "unknown",
  "uiHints": {
    "brand": "#8d2828",
    "sidebarWidthPx": 22
  },
  "envVarNames": [],
  "files": [
    {
      "path": ".env",
      "size": 403,
      "hash": "fe5bd04fb95d8aca882115e1ad2bf2147e283edc",
      "textSample": "NEXTAUTH_URL=http://localhost:3000\r\nNEXTAUTH_SECRET=NzdjNmRjMmJiNTc2NGZjNjg2OWM0Zjg2ZjI0OGUwNGI=\r\n\r\nDATABASE_URL=\"postgresql://neondb_owner:npg_thIjF0Dr1dgo@ep-summer-frog-a2bmkiyw-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&pgbouncer=true&connection_limit=1\"\r\nDIRECT_URL=\"postgresql://neondb_owner:npg_thIjF0Dr1dgo@ep-summer-frog-a2bmkiyw.eu-central-1.aws.neon.tech/neondb?sslmode=require\"",
      "kind": "env",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": ".env.example",
      "size": 287,
      "hash": "e8afe59824c231c8557965af511c52316502cd1d",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": ".gitignore",
      "size": 46,
      "hash": "a5e5571681fac503d7e940750350eec2fc7743b7",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": ".introspection/endpoints.json",
      "size": 2302,
      "hash": "e97680e7090f11a5ff2bdec411cbfbd9efa7e3d7",
      "textSample": "[\n  {\n    \"route\": \"/api/auth/:nextauth*\",\n    \"methods\": []\n  },\n  {\n    \"route\": \"/api/chat/search-users\",\n    \"methods\": [\n      \"GET\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/sse/user/:id\",\n    \"methods\": [\n      \"GET\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/threads/:id\",\n    \"methods\": [\n      \"DELETE\",\n      \"GET\",\n      \"PATCH\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/threads/:id/messages\",\n    \"methods\": [\n      \"GET\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/threads/:id/read\",\n    \"methods\": [\n      \"GET\",\n      \"PUT\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/threads/ensure\",\n    \"methods\": [\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/threads/list\",\n    \"methods\": [\n      \"GET\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/typing\",\n    \"methods\": [\n      \"GET\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/users\",\n    \"methods\": [\n      \"GET\",\n      \"OPTIONS\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/users/_delete/:id\",\n    \"methods\": [\n      \"DELETE\",\n      \"OPTIONS\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/users/delete\",\n    \"methods\": [\n      \"OPTIONS\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/health\",\n    \"methods\": [\n      \"GET\"\n    ]\n  },\n  {\n    \"route\": \"/api/presence\",\n    \"methods\": [\n      \"GET\",\n      \"HEAD\",\n      \"OPTIONS\",\n      \"PATCH\",\n      \"POST\",\n      \"PUT\"\n    ]\n  },\n  {\n    \"route\": \"/api/profile\",\n    \"methods\": [\n      \"GET\",\n      \"PATCH\"\n    ]\n  },\n  {\n    \"route\": \"/api/profile/password\",\n    \"methods\": [\n      \"GET\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/tasks\",\n    \"methods\": [\n      \"DELETE\",\n      \"GET\",\n      \"PATCH\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/tasks/:id\",\n    \"methods\": [\n      \"DELETE\",\n      \"GET\",\n      \"PUT\"\n    ]\n  },\n  {\n    \"route\": \"/api/tasks/:id/assignees/:userid\",\n    \"methods\": [\n      \"PATCH\"\n    ]\n  },\n  {\n    \"route\": \"/api/tasks/:id/progress\",\n    \"methods\": [\n      \"GET\"\n    ]\n  },\n  {\n    \"route\": \"/api/users\",\n    \"methods\": [\n      \"GET\",\n      \"POST\",\n      \"PUT\"\n    ]\n  },\n  {\n    \"route\": \"/api/users/:id\",\n    \"methods\": [\n      \"GET\",\n      \"OPTIONS\",\n      \"PATCH\"\n    ]\n  },\n  {\n    \"route\": \"/api/users/:id/archive\",\n    \"methods\": [\n      \"OPTIONS\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/users/:id/groups\",\n    \"methods\": [\n      \"GET\"\n    ]\n  }\n]",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/calendar/CalendarBoard.tsx",
      "size": 16273,
      "hash": "cb93d619fe7c651b454da12c5da5299233a9da49",
      "textSample": "// app/(app)/calendar/CalendarBoard.tsx\r\n'use client';\r\n\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport type { TaskLite } from './page';\r\nimport { markAssigneeDoneAction } from '@/app/(app)/inboxtasks/actions';\r\n\r\ntype Props = {\r\n  meId: string;\r\n  roleSlug: string | null;\r\n  initialTasks: TaskLite[];\r\n  initialGrouped: Record<string, TaskLite[]>;\r\n};\r\n\r\nconst BRAND = '#8d2828';\r\nconst BG_MY = '#FEF3C7';\r\nconst BD_MY = '#F59E0B';\r\nconst URGENT = BRAND;\r\n\r\nfunction ymd(d: Date): string {\r\n  const y = d.getFullYear();\r\n  const m = String(d.getMonth() + 1).padStart(2, '0');\r\n  const dd = String(d.getDate()).padStart(2, '0');\r\n  return `${y}-${m}-${dd}`;\r\n}\r\nfunction startOfWeek(date: Date): Date {\r\n  const d = new Date(date);\r\n  const day = (d.getDay() + 6) % 7;\r\n  d.setDate(d.getDate() - day);\r\n  d.setHours(0, 0, 0, 0);\r\n  return d;\r\n}\r\nfunction addDays(date: Date, days: number): Date {\r\n  const d = new Date(date);\r\n  d.setDate(d.getDate() + days);\r\n  return d;\r\n}\r\nfunction fmtRuDate(d: Date | string) {\r\n  const dt = typeof d === 'string' ? new Date(d) : d;\r\n  return new Intl.DateTimeFormat('ru-RU', {\r\n    day: '2-digit', month: 'short', year: 'numeric',\r\n  }).format(dt);\r\n}\r\nfunction fmtRuDateTimeYekb(d: Date | string) {\r\n  const dt = typeof d === 'string' ? new Date(d) : d;\r\n  return new Intl.DateTimeFormat('ru-RU', {\r\n    timeZone: 'Asia/Yekaterinburg',\r\n    day: '2-digit', month: 'short', year: 'numeric',\r\n    hour: '2-digit', minute: '2-digit',\r\n  }).format(dt);\r\n}\r\n\r\nexport default function CalendarBoard({\r\n  meId,\r\n  roleSlug,\r\n  initialTasks,\r\n  initialGrouped,\r\n}: Props) {\r\n  const [view, setView] = useState<'week' | 'month'>('week');\r\n  const [cursor, setCursor] = useState<Date>(startOfWeek(new Date()));\r\n\r\n  const [tasks, setTasks] = useState<TaskLite[]>(initialTasks);\r\n\r\n  const [dayModal, setDayModal] = useState<{ open: boolean; key: string | null }>({ open: false, key: null });\r\n  const [taskModal, setTaskModal] = useState<{ open: boolean; task: TaskLite | null }>({ open: false, task: null });\r\n\r\n  // закрыть модалки + оптимистично убрать задачу\r\n  function handleDoneSubmit(taskId: string) {\r\n    setTaskModal({ open: false, task: null });\r\n    setDayModal({ open: false, key: null });\r\n    setTasks(prev => prev.filter(t => t.id !== taskId));\r\n  }\r\n\r\n  const weekDays = useMemo(() => {\r\n    const start = startOfWeek(cursor);\r\n    return Array.from({ length: 7 }, (_, i) => addDays(start, i));\r\n  }, [cursor]);\r\n  const monthDays = useMemo(() => {\r\n    const first = new Date(cursor.getFullYear(), cursor.getMonth(), 1);\r\n    const firstGrid = startOfWeek(first);\r\n    return Array.from({ length: 42 }, (_, i) => addDays(firstGrid, i));\r\n  }, [cursor]);\r\n\r\n  const grouped = useMemo(() => {\r\n    const g = new Map<string, TaskLite[]>();\r\n    for (const t of tasks) {\r\n      const key = ymd(new Date(t.dueDate));\r\n      if (!g.has(key)) g.set(key, []);\r\n      g.get(key)!.push(t);\r\n    }\r\n    for (const [k, arr] of g) {\r\n      arr.sort((a, b) => {\r\n        const ap = a.priority === 'high' ? 0 : 1;\r\n        const bp = b.priority === 'high' ? 0 : 1;\r\n        if (ap !== bp) return ap - bp;\r\n        return (a.title || '').localeCompare(b.title || '', 'ru');\r\n      });\r\n      g.set(k, arr);\r\n    }\r\n    return g;\r\n  }, [tasks]);\r\n\r\n  useEffect(() => {\r\n    setTasks(initialTasks);\r\n  }, [initialTasks]);\r\n\r\n  const next = () =>\r\n    setCursor((d) =>\r\n      view === 'week' ? addDays(d, 7) : new Date(d.getFullYear(), d.getMonth() + 1, d.getDate())\r\n    );\r\n  const prev = () =>\r\n    setCursor((d) =>\r\n      view === 'week' ? addDays(d, -7) : new Date(d.getFullYear(), d.getMonth() - 1, d.getDate())\r\n    );\r\n  const today = () => setCursor(startOfWeek(new Date()));\r\n\r\n  const TaskChip: React.FC<{ t: TaskLite }> = ({ t }) => {\r\n    const urgent = (t.priority ?? 'normal') === 'high';\r\n    return (\r\n      <button\r\n        onClick={() => setTaskModal({ open: true, task: t })}\r\n        title={t.description || ''}\r\n        styl",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/calendar/CalendarModals.tsx",
      "size": 8853,
      "hash": "3d94a3062e4b329f6a96f433b39b55b6417396d7",
      "textSample": "'use client';\r\n\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\ntype Assignee = {\r\n  id: string;\r\n  userId: string;\r\n  status: 'in_progress' | 'done';\r\n  completedAt: string | null;\r\n  user?: { id: string; name: string | null } | null;\r\n};\r\n\r\ntype Task = {\r\n  id: string;\r\n  title: string;\r\n  description: string | null;\r\n  dueDate: string; // ISO\r\n  hidden: boolean;\r\n  priority: 'normal' | 'high';\r\n  createdById: string | null;\r\n  createdByName: string | null;\r\n  assignees: Assignee[];\r\n};\r\n\r\nexport default function CalendarModals({ tasks, meId }: { tasks: Task[]; meId: string }) {\r\n  const [taskId, setTaskId] = useState<string | null>(null);\r\n  const [dayIso, setDayIso] = useState<string | null>(null); // YYYY-MM-DD\r\n\r\n  const mapById = useMemo(() => {\r\n    const m = new Map<string, Task>();\r\n    for (const t of tasks) m.set(t.id, t);\r\n    return m;\r\n  }, [tasks]);\r\n\r\n  const tasksByDay = useMemo(() => {\r\n    const m = new Map<string, Task[]>();\r\n    for (const t of tasks) {\r\n      const d = new Date(t.dueDate);\r\n      const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;\r\n      if (!m.has(key)) m.set(key, []);\r\n      m.get(key)!.push(t);\r\n    }\r\n    for (const [k, arr] of m) {\r\n      arr.sort((a, b) => {\r\n        const ap = a.priority === 'high' ? 0 : 1;\r\n        const bp = b.priority === 'high' ? 0 : 1;\r\n        if (ap !== bp) return ap - bp;\r\n        return (a.title || '').localeCompare(b.title || '', 'ru');\r\n      });\r\n      m.set(k, arr);\r\n    }\r\n    return m;\r\n  }, [tasks]);\r\n\r\n  useEffect(() => {\r\n    const onOpenTask = (e: Event) => {\r\n      const id = (e as CustomEvent).detail?.taskId as string | undefined;\r\n      if (id) setTaskId(id);\r\n    };\r\n    const onOpenDay = (e: Event) => {\r\n      const iso = (e as CustomEvent).detail?.ymd as string | undefined;\r\n      if (iso) setDayIso(iso);\r\n    };\r\n    const onEsc = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape') { setTaskId(null); setDayIso(null); }\r\n    };\r\n    window.addEventListener('calendar:open-task', onOpenTask as any);\r\n    window.addEventListener('calendar:open-day', onOpenDay as any);\r\n    window.addEventListener('keydown', onEsc);\r\n    return () => {\r\n      window.removeEventListener('calendar:open-task', onOpenTask as any);\r\n      window.removeEventListener('calendar:open-day', onOpenDay as any);\r\n      window.removeEventListener('keydown', onEsc);\r\n    };\r\n  }, []);\r\n\r\n  const task = taskId ? mapById.get(taskId) ?? null : null;\r\n  const dayList = dayIso ? (tasksByDay.get(dayIso) ?? []) : [];\r\n\r\n  // Портал для модалок\r\n  if (typeof document === 'undefined') return null;\r\n\r\n  return createPortal(\r\n    <>\r\n      {/* Модалка задачи */}\r\n      {task && (\r\n        <div role=\"dialog\" aria-modal className=\"cal-modal__backdrop\" onClick={() => setTaskId(null)}>\r\n          <div className=\"cal-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <header className=\"cal-modal__header\">\r\n              <div className=\"cal-modal__title\">\r\n                <strong>{task.title}</strong>\r\n                {task.priority === 'high' ? <span className=\"badge badge--urgent\">Срочно</span> : null}\r\n              </div>\r\n              <button className=\"cal-close\" onClick={() => setTaskId(null)} aria-label=\"Закрыть\">×</button>\r\n            </header>\r\n\r\n            <div className=\"cal-modal__meta\">\r\n              <span>Дедлайн: {fmtRu(task.dueDate)}</span>\r\n              {task.createdByName ? <span>Назначил: {task.createdByName}</span> : null}\r\n            </div>\r\n\r\n            {task.description ? (\r\n              <div className=\"cal-modal__desc\">{task.description}</div>\r\n            ) : (\r\n              <div className=\"cal-modal__desc cal-modal__desc--empty\">Без описания</div>\r\n            )}\r\n\r\n            <div className=\"cal-modal__assignees\">\r\n              <div className=\"muted\">Исполнители:</div>\r\n              <div className=\"chips\">\r\n                {",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/calendar/page.tsx",
      "size": 4006,
      "hash": "5f67540652e9c78804c34a6e6abba9ea0debe122",
      "textSample": "// app/(app)/calendar/page.tsx\r\nimport { auth } from '@/auth.config';\r\nimport { normalizeRole } from '@/lib/roles';\r\nimport { prisma } from '@/lib/prisma';\r\nimport type { Prisma } from '@prisma/client';\r\nimport CalendarBoard from './CalendarBoard';\r\nimport { unstable_noStore as noStore } from 'next/cache';\r\n\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\n\r\ntype SearchParams = Promise<Record<string, string | string[] | undefined>>;\r\n\r\n// Дата->строка YYYY-MM-DD (локально, без TZ сдвигов)\r\nfunction ymd(d: Date) {\r\n  const y = d.getFullYear();\r\n  const m = String(d.getMonth() + 1).padStart(2, '0');\r\n  const dd = String(d.getDate()).padStart(2, '0');\r\n  return `${y}-${m}-${dd}`;\r\n}\r\n\r\n// Что отдаём в клиент (строки и простые типы)\r\nexport type TaskLite = {\r\n  id: string;\r\n  title: string;\r\n  description: string | null;\r\n  dueDate: string; // ISO\r\n  priority: 'normal' | 'high' | null;\r\n  hidden: boolean | null;\r\n  createdById: string | null;\r\n  createdByName: string | null;\r\n  // для «мои задачи» нам достаточно знать, что среди assignees есть я и статус\r\n  myStatus: 'in_progress' | 'done' | null;\r\n};\r\n\r\nexport default async function Page({\r\n  searchParams,\r\n}: {\r\n  searchParams: SearchParams;\r\n}) {\r\n  noStore();\r\n  await searchParams; // нам параметры пока не нужны\r\n\r\n  const session = await auth();\r\n  const meId = session?.user?.id ?? '';\r\n  const roleSlug = normalizeRole(session?.user?.role) ?? null;\r\n\r\n  if (!meId) {\r\n    return (\r\n      <main style={{ padding: 16 }}>\r\n        <h1 style={{ margin: 0 }}>Календарь</h1>\r\n        <p>Не авторизовано.</p>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  // Берём ТОЛЬКО «назначенные мне» активные задачи (для календаря мы показываем\r\n  // исключительно их, согласно ТЗ), без скрытых (hidden = false/null).\r\n  const raw = await prisma.task.findMany({\r\n    where: {\r\n      hidden: false,\r\n      assignees: { some: { userId: meId, status: 'in_progress' } },\r\n    },\r\n    select: {\r\n      id: true,\r\n      title: true,\r\n      description: true,\r\n      dueDate: true,\r\n      priority: true,\r\n      hidden: true,\r\n      createdById: true,\r\n      createdByName: true,\r\n      assignees: {\r\n        where: { userId: meId },\r\n        select: { status: true },\r\n      },\r\n    },\r\n    orderBy: [{ dueDate: 'asc' }, { createdAt: 'desc' }],\r\n  });\r\n\r\n  const initialTasks: TaskLite[] = raw.map((t) => ({\r\n    id: t.id,\r\n    title: t.title,\r\n    description: t.description,\r\n    dueDate: (t.dueDate as Date).toISOString(),\r\n    priority: (t.priority as 'normal' | 'high' | null) ?? 'normal',\r\n    hidden: !!t.hidden,\r\n    createdById: t.createdById,\r\n    createdByName: t.createdByName,\r\n    myStatus: (t.assignees[0]?.status as 'in_progress' | 'done' | undefined) ?? null,\r\n  }));\r\n\r\n  // Грубо сгруппируем на сервере по дню — чтобы клиенту меньше считать при первом рендере\r\n  const grouped: Record<string, TaskLite[]> = {};\r\n  for (const t of initialTasks) {\r\n    const key = ymd(new Date(t.dueDate));\r\n    (grouped[key] ||= []).push(t);\r\n  }\r\n\r\n  return (\r\n    <main style={{ padding: 16, display: 'grid', gap: 12 }}>\r\n      <header style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n        <h1 style={{ margin: 0 }}>Календарь</h1>\r\n        {/* кнопки периода/фильтры при необходимости – оставляем место */}\r\n      </header>\r\n\r\n      {/* Клиентский календарь. Передаём только мои задачи. */}\r\n      <CalendarBoard\r\n        meId={meId}\r\n        roleSlug={roleSlug}\r\n        initialTasks={initialTasks}\r\n        initialGrouped={grouped}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/calendar",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/ChatBoxClient.tsx",
      "size": 4505,
      "hash": "9e19d243216bb81a3a2bd475b16d4ca61251e0fa",
      "textSample": "'use client';\r\n\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\n/**\r\n * Локальный тип сообщения, не тянем ничего из ./live\r\n * Должен совпадать с форматом, который шлёт твой SSE эндпоинт /chat/live (GET)\r\n */\r\ntype Msg = {\r\n  id: string;\r\n  threadId: string;\r\n  authorId: string;\r\n  text: string;\r\n  createdAt: string; // ISO\r\n};\r\n\r\nexport default function ChatBoxClient({\r\n  meId,\r\n  meName,\r\n  peerName,\r\n  threadId,\r\n  peerReadAtIso,\r\n  initial,\r\n}: {\r\n  meId: string;\r\n  meName: string;\r\n  peerName: string;\r\n  threadId: string;\r\n  peerReadAtIso: string | null;\r\n  initial: Msg[];\r\n}) {\r\n  const [messages, setMessages] = useState<Msg[]>(initial || []);\r\n  const [text, setText] = useState('');\r\n  const endRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  // Подписка на SSE напрямую (без ./broker)\r\n  useEffect(() => {\r\n    // Предполагается, что GET /chat/live?threadId=... открывает SSE-стрим\r\n    const url = `/chat/live?threadId=${encodeURIComponent(threadId)}`;\r\n    const es = new EventSource(url);\r\n    const onMsg = (ev: MessageEvent) => {\r\n      try {\r\n        const payload: Msg = JSON.parse(ev.data);\r\n        if (payload?.threadId === threadId) {\r\n          setMessages((prev) => [...prev, payload]);\r\n        }\r\n      } catch {\r\n        // игнорим не-JSON\r\n      }\r\n    };\r\n    es.addEventListener('message', onMsg);\r\n    es.addEventListener('error', () => {\r\n      // браузер сам переподключится; можно логировать при желании\r\n    });\r\n\r\n    return () => {\r\n      es.removeEventListener('message', onMsg as any);\r\n      es.close();\r\n    };\r\n  }, [threadId]);\r\n\r\n  // Автопрокрутка вниз\r\n  useEffect(() => {\r\n    endRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  async function send() {\r\n    const txt = text.trim();\r\n    if (!txt) return;\r\n    // POST в тот же эндпоинт, как у тебя и было\r\n    const res = await fetch(`/chat/live?threadId=${encodeURIComponent(threadId)}`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ text: txt }),\r\n    });\r\n    if (res.ok) setText('');\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\r\n      {/* Хедер чата */}\r\n      <div style={{ padding: '8px 12px', borderBottom: '1px solid #e5e7eb', fontWeight: 600 }}>\r\n        {peerName}\r\n      </div>\r\n\r\n      {/* Лента сообщений */}\r\n      <div style={{ flex: 1, overflowY: 'auto', padding: 12 }}>\r\n        {messages.map((m) => (\r\n          <div\r\n            key={m.id}\r\n            style={{\r\n              marginBottom: 6,\r\n              display: 'flex',\r\n              justifyContent: m.authorId === meId ? 'flex-end' : 'flex-start',\r\n            }}\r\n          >\r\n            <div\r\n              title={new Date(m.createdAt).toLocaleString('ru-RU')}\r\n              style={{\r\n                padding: '6px 10px',\r\n                borderRadius: 12,\r\n                background: m.authorId === meId ? '#8d2828' : '#f3f4f6',\r\n                color: m.authorId === meId ? '#fff' : '#111827',\r\n                maxWidth: '75%',\r\n                whiteSpace: 'pre-wrap',\r\n                wordBreak: 'break-word',\r\n              }}\r\n            >\r\n              {m.text}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <div ref={endRef} />\r\n      </div>\r\n\r\n      {/* Поле ввода */}\r\n      <div style={{ padding: 8, borderTop: '1px solid #e5e7eb', display: 'flex', gap: 8 }}>\r\n        <input\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n          onKeyDown={(e) => e.key === 'Enter' && send()}\r\n          placeholder=\"Напишите сообщение…\"\r\n          style={{\r\n            flex: 1,\r\n            border: '1px solid #e5e7eb',\r\n            borderRadius: 12,\r\n            padding: '6px 10px',\r\n            outline: 'none',\r\n          }}\r\n        />\r\n        <button\r\n          onClick={send}\r\n          style={{\r\n            border: 'none',\r\n            borderRadius: 12,\r\n            background: '#8d2828',\r\n          ",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/DeleteThreadButton.tsx",
      "size": 889,
      "hash": "6c99902b4ab15356d9e01f9a49b6eec83cc33d11",
      "textSample": "'use client';\r\n\r\nimport { useTransition } from 'react';\r\nimport { deleteThreadAction } from './actions';\r\n\r\nexport default function DeleteThreadButton({ threadId }: { threadId: string }) {\r\n  const [pending, start] = useTransition();\r\n\r\n  async function onDelete(e: React.MouseEvent) {\r\n    e.preventDefault();\r\n    if (!confirm('Удалить диалог безвозвратно?')) return;\r\n    start(async () => {\r\n      await deleteThreadAction(threadId);\r\n      window.location.href = '/chat';\r\n    });\r\n  }\r\n\r\n  return (\r\n    <button\r\n      onClick={onDelete}\r\n      disabled={pending}\r\n      style={{\r\n        position: 'absolute',\r\n        top: 6,\r\n        right: 6,\r\n        border: 'none',\r\n        background: 'transparent',\r\n        color: '#9ca3af',\r\n        cursor: 'pointer',\r\n      }}\r\n      title=\"Удалить диалог\"\r\n    >\r\n      ×\r\n    </button>\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/SearchBox.tsx",
      "size": 469,
      "hash": "b2e19e1c8fb01588d6851c8f1f5d0987dc6a2d97",
      "textSample": "'use client';\r\n\r\nimport { useState } from 'react';\r\n\r\nexport default function SearchBox() {\r\n  const [q, setQ] = useState('');\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={q}\r\n      onChange={(e) => setQ(e.target.value)}\r\n      placeholder=\"Поиск по ФИО…\"\r\n      style={{\r\n        width: '100%',\r\n        border: '1px solid #e5e7eb',\r\n        borderRadius: 999,\r\n        padding: '6px 12px',\r\n        fontSize: 13,\r\n      }}\r\n    />\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/actions.ts",
      "size": 609,
      "hash": "673ffefa7f2e8683f80e9d0aed5bfaf407c3470c",
      "textSample": "'use server';\r\n\r\nimport { prisma } from '@/lib/prisma';\r\nimport { auth } from '@/auth.config';\r\n\r\nexport async function deleteThreadAction(threadId: string) {\r\n  const session = await auth();\r\n  if (!session?.user?.id) throw new Error('Не авторизовано');\r\n\r\n  const meId = session.user.id;\r\n  const thread = await prisma.thread.findUnique({ where: { id: threadId } });\r\n  if (!thread) throw new Error('Диалог не найден');\r\n  if (thread.aId !== meId && thread.bId !== meId) throw new Error('Нет доступа');\r\n\r\n  await prisma.thread.delete({ where: { id: threadId } });\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/chat.module.css",
      "size": 1269,
      "hash": "2aa73c3bef25ee696db1420d36842a8e24d0bb5f",
      "textSample": ".chatRoot {\r\n  --brand: #8d2828;\r\n  --ink: #0f172a;\r\n  --muted: #6b7280;\r\n  --line: #e5e7eb;\r\n  display: grid;\r\n  grid-template-columns: 320px 1fr;\r\n  gap: 12px;\r\n  height: calc(100dvh - 24px);\r\n}\r\n\r\n.threads {\r\n  border: 1px solid var(--line);\r\n  border-radius: 16px;\r\n  background: #fff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-y: auto;\r\n  position: relative;\r\n}\r\n\r\n.thread {\r\n  position: relative;\r\n  display: block;\r\n  padding: 8px 12px;\r\n  border-bottom: 1px solid var(--line);\r\n  text-decoration: none;\r\n  color: var(--ink);\r\n  font-size: 14px;\r\n}\r\n.thread:hover { background: #f9fafb; }\r\n.threadActive { background: #f3f4f6; }\r\n\r\n.threadTop { display: flex; justify-content: space-between; align-items: center; }\r\n.threadName { font-weight: 600; }\r\n.unreadDot {\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50%;\r\n  background: var(--brand);\r\n}\r\n\r\n.threadBottom { display: flex; justify-content: space-between; font-size: 12px; color: var(--muted); }\r\n.threadPreview { flex: 1; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }\r\n.threadDate { margin-left: 6px; white-space: nowrap; }\r\n\r\n.chatBox {\r\n  border: 1px solid var(--line);\r\n  border-radius: 16px;\r\n  background: #fff;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/live.tsx",
      "size": 3536,
      "hash": "a096f20d4d8bd0913d78add083e5a0af1ecf12c6",
      "textSample": "'use client';\r\nimport { useEffect, useRef, startTransition } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\ntype P =\r\n  | { type: 'message'; threadId: string; at: number; messageId: string; authorId: string; text: string; ts: string; clientId?: string }\r\n  | { type: 'messageEdited'; threadId: string; at: number; messageId: string; byId: string; text: string }\r\n  | { type: 'messageDeleted'; threadId: string; at: number; messageId: string; byId: string; scope: 'self' | 'both' }\r\n  | { type: 'read'; threadId: string; at: number }\r\n  | { type: 'threadCreated'; threadId: string; at: number }\r\n  | { type: 'threadDeleted'; threadId: string; at: number; byId: string; byName: string }\r\n  | { type?: string; [k: string]: any };\r\n\r\nexport default function Live({ uid, activeThreadId }: { uid: string; activeThreadId?: string }) {\r\n  const router = useRouter();\r\n  const esRef = useRef<EventSource | null>(null);\r\n  const lastRefresh = useRef(0);\r\n\r\n  useEffect(() => {\r\n    if (!uid) return;\r\n    let stop = false;\r\n\r\n    const softRefresh = (gapMs: number) => {\r\n      const now = Date.now();\r\n      if (now - lastRefresh.current > gapMs) {\r\n        lastRefresh.current = now;\r\n        startTransition(() => router.refresh());\r\n      }\r\n    };\r\n\r\n    const connect = () => {\r\n      if (stop) return;\r\n      try { esRef.current?.close(); } catch {}\r\n      const es = new EventSource(`/chat/sse?uid=${encodeURIComponent(uid)}&t=${Date.now()}`);\r\n      esRef.current = es;\r\n\r\n      es.onmessage = (e) => {\r\n        let p: P;\r\n        try { p = JSON.parse(e.data || '{}'); } catch { softRefresh(400); return; }\r\n\r\n        // если открыт активный тред — без refresh, только точечные апдейты\r\n        if (activeThreadId && p.threadId === activeThreadId) {\r\n          const api = (window as any).__chatApi;\r\n          if (api && api.threadId === activeThreadId) {\r\n            if (p.type === 'message')        { api.push?.({ ...p, clientId: (p as any).clientId }); return; }\r\n            if (p.type === 'messageEdited')  { api.edit?.(p); return; }\r\n            if (p.type === 'messageDeleted') { api.del?.(p);  return; }\r\n            if (p.type === 'read')           { api.read?.(p); return; }\r\n            if (p.type === 'threadDeleted')  {\r\n              api.onThreadDeleted?.(p);\r\n              startTransition(() => router.replace('/chat'));\r\n              return;\r\n            }\r\n          }\r\n        }\r\n\r\n        // фоновая вкладка / другие страницы\r\n        if (p.type === 'message' && p.authorId !== uid) {\r\n          try { window.dispatchEvent(new CustomEvent('app:unread-bump', { detail: { threadId: p.threadId } })); } catch {}\r\n          softRefresh(250);\r\n          return;\r\n        }\r\n        if (p.type === 'threadDeleted' || p.type === 'threadCreated') { softRefresh(120); return; }\r\n        if (p.type === 'messageEdited' || p.type === 'messageDeleted' || p.type === 'read') { softRefresh(300); return; }\r\n        softRefresh(800);\r\n      };\r\n\r\n      es.onerror = () => {\r\n        try { es.close(); } catch {}\r\n        if (!stop) setTimeout(connect, 900);\r\n      };\r\n    };\r\n\r\n    connect();\r\n    const onVis = () => { if (document.visibilityState === 'visible') softRefresh(0); };\r\n    document.addEventListener('visibilitychange', onVis);\r\n    return () => { document.removeEventListener('visibilitychange', onVis); stop = true; try { esRef.current?.close(); } catch {} };\r\n  }, [router, uid, activeThreadId]);\r\n\r\n  return null;\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/page.tsx",
      "size": 3950,
      "hash": "8868e2ac69245394abfbf7a989008e8d93d2d799",
      "textSample": "// app/(app)/chat/page.tsx\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { normalizeRole } from '@/lib/roles';\r\nimport ChatBoxClient from './ChatBoxClient';\r\nimport DeleteThreadButton from './DeleteThreadButton';\r\nimport SearchBox from './SearchBox';\r\nimport styles from './chat.module.css';\r\n\r\ntype SearchParams = Promise<Record<string, string | string[] | undefined>>;\r\n\r\nexport default async function ChatPage({\r\n  searchParams,\r\n}: {\r\n  searchParams: SearchParams;\r\n}) {\r\n  const sp = await searchParams;\r\n\r\n  const session = await auth();\r\n  if (!session?.user?.id) {\r\n    return <main className={styles.chatRoot}>Не авторизовано</main>;\r\n  }\r\n\r\n  const meId = session.user.id;\r\n  const meName = session.user.name ?? '—';\r\n  const role = normalizeRole(session.user.role); // оставляем, если используешь дальше\r\n\r\n  const threads = await prisma.thread.findMany({\r\n    where: { OR: [{ aId: meId }, { bId: meId }] },\r\n    include: {\r\n      a: { select: { id: true, name: true } },\r\n      b: { select: { id: true, name: true } },\r\n      readMarks: { where: { userId: meId } },\r\n    },\r\n    orderBy: [{ lastMessageAt: 'desc' }, { id: 'asc' }],\r\n  });\r\n\r\n  const activeThreadId =\r\n    typeof sp.thread === 'string' ? sp.thread : Array.isArray(sp.thread) ? sp.thread[0] : undefined;\r\n\r\n  const active = activeThreadId ? threads.find((t) => t.id === activeThreadId) : undefined;\r\n  const peerName =\r\n    active ? (active.aId === meId ? active.b.name ?? '—' : active.a.name ?? '—') : '—';\r\n  const peerReadAtIso =\r\n    active?.readMarks?.[0]?.readAt ? active.readMarks[0].readAt.toISOString() : null;\r\n\r\n  return (\r\n    <main className={styles.chatRoot}>\r\n      {/* Левая колонка – список тредов */}\r\n      <section className={styles.threads}>\r\n        <div style={{ padding: '8px 8px 12px' }}>\r\n          <SearchBox />\r\n        </div>\r\n\r\n        {threads.length === 0 && (\r\n          <div style={{ fontSize: 13, color: '#6b7280' }}>Нет чатов</div>\r\n        )}\r\n\r\n        {threads.map((t) => {\r\n          const peer = t.aId === meId ? t.b : t.a;\r\n          const lastMsgAt = t.lastMessageAt\r\n            ? new Date(t.lastMessageAt).toLocaleString('ru-RU', {\r\n                dateStyle: 'short',\r\n                timeStyle: 'short',\r\n              })\r\n            : '';\r\n          const unread =\r\n            !t.readMarks[0] || (t.lastMessageAt && t.readMarks[0].readAt < t.lastMessageAt);\r\n\r\n          return (\r\n            <a\r\n              key={t.id}\r\n              href={`/chat?thread=${t.id}`}\r\n              className={`${styles.thread} ${t.id === activeThreadId ? styles.threadActive : ''}`}\r\n            >\r\n              <div className={styles.threadTop}>\r\n                <span className={styles.threadName}>{peer.name ?? '—'}</span>\r\n                {unread && <span className={styles.unreadDot} />}\r\n              </div>\r\n\r\n              <div className={styles.threadBottom}>\r\n                <span className={styles.threadPreview}>{t.lastMessageText ?? ''}</span>\r\n                <span className={styles.threadDate}>{lastMsgAt}</span>\r\n              </div>\r\n\r\n              {/* Кнопка удаления треда (с подтверждением) */}\r\n              <DeleteThreadButton threadId={t.id} />\r\n            </a>\r\n          );\r\n        })}\r\n      </section>\r\n\r\n      {/* Правая колонка – сам чат */}\r\n      <section className={styles.chatBox}>\r\n        {activeThreadId ? (\r\n          <ChatBoxClient\r\n            meId={meId}\r\n            meName={meName}\r\n            threadId={activeThreadId}\r\n            peerName={peerName}\r\n            peerReadAtIso={peerReadAtIso}\r\n            initial={[]}\r\n          />\r\n        ) : (\r\n          <div style={{ fontSize: 13, color: '#6b7280' }}>Выберите чат слева</div>\r\n        )}\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/chat",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/sse/broker.ts",
      "size": 1613,
      "hash": "72a80b2cc5080f26851de7bb85e2ce8dc0bfebc4",
      "textSample": "// app/(app)/chat/sse/broker.ts\r\nexport type EventPayload =\r\n  | {\r\n      type: 'message';\r\n      threadId: string;\r\n      at: number;\r\n      messageId: string;\r\n      authorId: string;\r\n      text: string;\r\n      ts: string;\r\n      clientId?: string; // ← добавили\r\n    }\r\n  | { type: 'messageEdited'; threadId: string; at: number; messageId: string; byId: string; text: string }\r\n  | { type: 'messageDeleted'; threadId: string; at: number; messageId: string; byId: string; scope: 'self' | 'both' }\r\n  | { type: 'read'; threadId: string; at: number }\r\n  | { type: 'threadCreated'; threadId: string; at: number }\r\n  | { type: 'threadDeleted'; threadId: string; at: number; byId: string; byName: string };\r\n\r\ntype Subscriber = (p: EventPayload) => void;\r\n\r\nclass Broker {\r\n  private subs = new Map<string, Map<number, Subscriber>>();\r\n  private seq = 0;\r\n\r\n  subscribe(uid: string, fn: Subscriber) {\r\n    if (!this.subs.has(uid)) this.subs.set(uid, new Map());\r\n    const id = ++this.seq;\r\n    this.subs.get(uid)!.set(id, fn);\r\n    return () => this.subs.get(uid)?.delete(id);\r\n  }\r\n\r\n  publish(uids: string[] | string, payload: EventPayload) {\r\n    const targets = Array.isArray(uids) ? uids : [uids];\r\n    for (const uid of targets) {\r\n      const hs = this.subs.get(uid);\r\n      if (!hs?.size) continue;\r\n      for (const [, h] of hs) {\r\n        try {\r\n          h(payload);\r\n        } catch {}\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ntype G = typeof globalThis & { __g108_broker?: Broker };\r\nconst g = globalThis as G;\r\nconst broker = g.__g108_broker ?? (g.__g108_broker = new Broker());\r\nexport default broker;\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/sse/route.ts",
      "size": 1800,
      "hash": "5c1434cf0085792f7b45c321860ff77e31f28ded",
      "textSample": "// app/(app)/chat/sse/route.ts\r\nimport broker, { type EventPayload } from './broker';\r\n\r\nexport const runtime = 'nodejs';\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\n\r\nfunction sseHeaders(): HeadersInit {\r\n  return {\r\n    'Content-Type': 'text/event-stream; charset=utf-8',\r\n    'Cache-Control': 'no-cache, no-transform',\r\n    'Connection': 'keep-alive',\r\n    'X-Accel-Buffering': 'no',\r\n    'Keep-Alive': 'timeout=120',\r\n  };\r\n}\r\n\r\nexport function GET(req: Request) {\r\n  const url = new URL(req.url);\r\n  const uid = url.searchParams.get('uid') || '';\r\n  if (!uid) return new Response('missing uid', { status: 400, headers: sseHeaders() });\r\n\r\n  const stream = new ReadableStream({\r\n    start(controller) {\r\n      const enc = new TextEncoder();\r\n\r\n      // анти-буферизация: первый чанк >2 КБ + мгновенный retry\r\n      controller.enqueue(enc.encode(`:${' '.repeat(2048)}\\n`));\r\n      controller.enqueue(enc.encode(`retry: 0\\n`));\r\n\r\n      const send = (payload: unknown) => {\r\n        controller.enqueue(enc.encode(`data: ${JSON.stringify(payload)}\\n\\n`));\r\n      };\r\n\r\n      // «пробой» канала\r\n      send({ type: 'hello', at: Date.now() });\r\n\r\n      // подписка на пользователя\r\n      const unsub = broker.subscribe(uid, (p: EventPayload) => send(p));\r\n\r\n      // heartbeat — не даём каналу уснуть\r\n      const hb = setInterval(() => send({ type: 'ping', at: Date.now() }), 5000);\r\n\r\n      const close = () => {\r\n        clearInterval(hb);\r\n        try { unsub(); } catch {}\r\n        try { controller.close(); } catch {}\r\n      };\r\n\r\n      (req as any).signal?.addEventListener?.('abort', close);\r\n    },\r\n  });\r\n\r\n  return new Response(stream, { headers: sseHeaders() });\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/chat/sse",
      "pageType": "route",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/dashboard/page.module.css",
      "size": 942,
      "hash": "5256c8bd82583ad17ff8898bfc808af35c7a0d20",
      "textSample": ".page { display:grid; gap:12px; }\r\n.head { padding:14px 16px; border-radius:16px; }\r\n.title { margin:0; font-weight:900; font-size:22px; letter-spacing:.2px; color:#0f172a; }\r\n.subtitle { margin:6px 0 0; font-size:14px; color:#374151; text-decoration:none; }\r\n\r\n.grid { display:grid; grid-template-columns:repeat(2, minmax(0,1fr)); gap:12px; }\r\n.card {\r\n  border-radius:16px; padding:14px; border:1px solid rgba(229,231,235,.8); background:#fff;\r\n  box-shadow:0 4px 12px rgba(0,0,0,.04);\r\n}\r\n.cardTitle { font-weight:800; color:#0f172a; margin:0 0 6px; text-transform:none; }\r\n.cardText { color:#374151; font-size:14px; }\r\n\r\n.glass{\r\n  background:linear-gradient(180deg,rgba(255,255,255,.68),rgba(255,255,255,.4));\r\n  backdrop-filter:saturate(180%) blur(10px);\r\n  -webkit-backdrop-filter:saturate(180%) blur(10px);\r\n  border:1px solid rgba(229,231,235,.8);\r\n  box-shadow:0 6px 16px rgba(0,0,0,.06), inset 0 1px 0 rgba(255,255,255,.35);\r\n}\r\n\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/dashboard/page.tsx",
      "size": 1112,
      "hash": "f005e32d6d8f3df6c3e02a0d875982b74ef303a9",
      "textSample": "import { redirect } from 'next/navigation';\r\nimport { auth } from '@/auth.config';\r\nimport styles from './page.module.css';\r\n\r\nexport default async function Dashboard() {\r\n  const session = await auth();\r\n  if (!session) redirect('/sign-in');\r\n\r\n  return (\r\n    <section className={styles.page}>\r\n      <header className={`${styles.glass} ${styles.head}`}>\r\n        <h1 className={styles.title}>Дашборд</h1>\r\n        <p className={styles.subtitle}>стартовая страница после входа</p>\r\n      </header>\r\n\r\n      <div className={styles.grid}>\r\n        <div className={styles.card}>\r\n          <div className={styles.cardTitle}>сводка</div>\r\n          <div className={styles.cardText}>здесь появятся ваши виджеты и показатели</div>\r\n        </div>\r\n        <div className={styles.card}>\r\n          <div className={styles.cardTitle}>обновления</div>\r\n          <div className={styles.cardText}>история действий и системные уведомления</div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/dashboard",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/groups/actions.ts",
      "size": 5199,
      "hash": "6b6deab14dc69d8948dc70f29102a1ceb393965d",
      "textSample": "'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { auth } from '@/auth.config';\r\nimport { normalizeRole, type Role } from '@/lib/roles';\r\n\r\nfunction ensureAccess(role: Role | null | undefined) {\r\n  const ok = role === 'director' || role === 'deputy_plus';\r\n  if (!ok) throw new Error('forbidden');\r\n}\r\n\r\nasync function guard() {\r\n  const session = await auth();\r\n  const role = normalizeRole((session?.user as any)?.role ?? null);\r\n  ensureAccess(role);\r\n}\r\n\r\n// ===== ГРУППЫ =====\r\n\r\nexport async function createGroup(name: string): Promise<void> {\r\n  await guard();\r\n  const title = (name ?? '').trim();\r\n  if (!title) return;\r\n  await prisma.group.create({ data: { name: title } });\r\n  revalidatePath('/groups');\r\n}\r\n\r\nexport async function renameGroup(groupId: string, name: string): Promise<void> {\r\n  await guard();\r\n  const id = String(groupId ?? '');\r\n  const title = (name ?? '').trim();\r\n  if (!id || !title) return;\r\n  await prisma.group.update({ where: { id }, data: { name: title } });\r\n  revalidatePath('/groups');\r\n}\r\n\r\nexport async function deleteGroup(groupId: string): Promise<void> {\r\n  await guard();\r\n  const id = String(groupId ?? '');\r\n  if (!id) return;\r\n  await prisma.groupMember.deleteMany({ where: { groupId: id } });\r\n  await prisma.group.delete({ where: { id } });\r\n  revalidatePath('/groups');\r\n}\r\n\r\nexport async function addUsersToGroup(groupId: string, userIds: string[]): Promise<void> {\r\n  await guard();\r\n  const gid = String(groupId ?? '');\r\n  const ids = Array.isArray(userIds) ? userIds.filter(Boolean).map(String) : [];\r\n  if (!gid || ids.length === 0) return;\r\n\r\n  await prisma.$transaction(\r\n    ids.map((uid) =>\r\n      prisma.groupMember.upsert({\r\n        where: { userId_groupId: { userId: uid, groupId: gid } }, // работает благодаря @@unique([userId, groupId])\r\n        create: { userId: uid, groupId: gid },\r\n        update: {},\r\n      }),\r\n    ),\r\n  );\r\n\r\n  revalidatePath('/groups');\r\n}\r\n\r\nexport async function removeUserFromGroup(groupId: string, userId: string): Promise<void> {\r\n  await guard();\r\n  const gid = String(groupId ?? '');\r\n  const uid = String(userId ?? '');\r\n  if (!gid || !uid) return;\r\n  await prisma.groupMember.deleteMany({ where: { groupId: gid, userId: uid } });\r\n  revalidatePath('/groups');\r\n}\r\n\r\nexport async function fetchGroupMembers(groupId: string): Promise<{ userId: string; name: string | null }[]> {\r\n  await guard();\r\n  const gid = String(groupId ?? '');\r\n  if (!gid) return [];\r\n  const rows = await prisma.groupMember.findMany({\r\n    where: { groupId: gid },\r\n    include: { user: { select: { id: true, name: true } } },\r\n    orderBy: [{ user: { name: 'asc' } }],\r\n  });\r\n  return rows.map((r) => ({ userId: r.userId, name: r.user?.name ?? r.userId }));\r\n}\r\n\r\n// ===== ПРЕДМЕТЫ =====\r\n\r\nexport async function createSubject(name: string): Promise<void> {\r\n  await guard();\r\n  const title = (name ?? '').trim();\r\n  if (!title) return;\r\n  await prisma.subject.create({ data: { name: title } });\r\n  revalidatePath('/groups');\r\n}\r\n\r\nexport async function renameSubject(subjectId: string, name: string): Promise<void> {\r\n  await guard();\r\n  const id = String(subjectId ?? '');\r\n  const title = (name ?? '').trim();\r\n  if (!id || !title) return;\r\n  await prisma.subject.update({ where: { id }, data: { name: title } });\r\n  revalidatePath('/groups');\r\n}\r\n\r\nexport async function deleteSubject(subjectId: string): Promise<void> {\r\n  await guard();\r\n  const id = String(subjectId ?? '');\r\n  if (!id) return;\r\n  await prisma.subjectMember.deleteMany({ where: { subjectId: id } });\r\n  await prisma.subject.delete({ where: { id } });\r\n  revalidatePath('/groups');\r\n}\r\n\r\nexport async function addUsersToSubject(subjectId: string, userIds: string[]): Promise<void> {\r\n  await guard();\r\n  const sid = String(subjectId ?? '');\r\n  const ids = Array.isArray(userIds) ? userIds.filter(Boolean).map(String) : [];\r\n  if (!sid || ids.length === 0) return;\r\n\r\n  await prisma.$tr",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/groups/groups-search-client.tsx",
      "size": 2339,
      "hash": "7428c8ead81251208e43a523c70b8c7d02a95b9a",
      "textSample": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation';\r\n\r\ntype UrlSearchBoxProps = {\r\n  paramKey: 'qu' | 'qg' | 'qs';\r\n  placeholder: string;\r\n};\r\n\r\nexport default function UrlSearchBox(props: UrlSearchBoxProps) {\r\n  const { paramKey, placeholder } = props;\r\n  const router = useRouter();\r\n  const pathname = usePathname();\r\n  const sp = useSearchParams();\r\n\r\n  const initial = sp.get(paramKey) ?? '';\r\n  const [value, setValue] = React.useState(initial);\r\n\r\n  // Синхронизация когда меняется URL извне\r\n  React.useEffect(() => {\r\n    const cur = sp.get(paramKey) ?? '';\r\n    setValue(cur);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [sp, paramKey]);\r\n\r\n  const buildUrl = React.useCallback(\r\n    (next: string) => {\r\n      const p = new URLSearchParams(sp.toString());\r\n      if (next && next.trim() !== '') p.set(paramKey, next);\r\n      else p.delete(paramKey);\r\n      return `${pathname}?${p.toString()}`;\r\n    },\r\n    [sp, pathname, paramKey],\r\n  );\r\n\r\n  // Дебаунс обновления URL во время ввода\r\n  const tRef = React.useRef<number | null>(null);\r\n  function scheduleDebounced(next: string) {\r\n    if (tRef.current) window.clearTimeout(tRef.current);\r\n    tRef.current = window.setTimeout(() => {\r\n      router.replace(buildUrl(next), { scroll: false });\r\n    }, 350);\r\n  }\r\n\r\n  function applyImmediate(next: string) {\r\n    if (tRef.current) {\r\n      window.clearTimeout(tRef.current);\r\n      tRef.current = null;\r\n    }\r\n    router.replace(buildUrl(next), { scroll: false });\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginTop: 8 }}>\r\n      <input\r\n        value={value}\r\n        onChange={(e) => {\r\n          const v = e.target.value;\r\n          setValue(v);\r\n          scheduleDebounced(v);\r\n        }}\r\n        onKeyDown={(e) => {\r\n          if (e.key === 'Enter') applyImmediate(value);\r\n          if (e.key === 'Escape') {\r\n            setValue('');\r\n            applyImmediate('');\r\n          }\r\n        }}\r\n        onBlur={() => applyImmediate(value)}\r\n        placeholder={placeholder}\r\n        style={{\r\n          width: '100%',\r\n          padding: '8px 10px',\r\n          border: '1px solid #e5e7eb',\r\n          borderRadius: 10,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/groups/page.tsx",
      "size": 2139,
      "hash": "f60b109f9111ef7a3eadcfedd71534a799755627",
      "textSample": "import { auth } from '@/auth.config';\r\nimport { redirect } from 'next/navigation';\r\nimport { normalizeRole, type Role } from '@/lib/roles';\r\nimport { prisma } from '@/lib/prisma';\r\nimport GroupsBoard from '@/components/GroupsBoard';\r\n\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\n\r\nfunction hasAccess(role: Role | null | undefined) {\r\n  return role === 'director' || role === 'deputy_plus';\r\n}\r\n\r\nfunction pickStr(v: string | string[] | undefined): string | undefined {\r\n  if (Array.isArray(v)) return v[0];\r\n  if (typeof v === 'string' && v.trim() !== '') return v;\r\n  return undefined;\r\n}\r\n\r\nexport default async function Page({\r\n  searchParams,\r\n}: {\r\n  searchParams: Promise<Record<string, string | string[] | undefined>>;\r\n}) {\r\n  const sp = await searchParams;\r\n  const qg = pickStr(sp.qg);\r\n  const qs = pickStr(sp.qs);\r\n  const qu = pickStr(sp.qu);\r\n\r\n  const session = await auth();\r\n  const role = normalizeRole((session?.user as any)?.role ?? null);\r\n  if (!hasAccess(role)) redirect('/');\r\n\r\n  const [users, groups, subjects] = await Promise.all([\r\n    prisma.user.findMany({\r\n      where: qu\r\n        ? { name: { contains: qu, mode: 'insensitive' } }\r\n        : undefined,\r\n      select: { id: true, name: true, role: true },\r\n      orderBy: [{ name: 'asc' }],\r\n    }),\r\n    prisma.group.findMany({\r\n      where: qg\r\n        ? { name: { contains: qg, mode: 'insensitive' } }\r\n        : undefined,\r\n      select: { id: true, name: true },\r\n      orderBy: [{ name: 'asc' }],\r\n    }),\r\n    prisma.subject.findMany({\r\n      where: qs\r\n        ? { name: { contains: qs, mode: 'insensitive' } }\r\n        : undefined,\r\n      select: { id: true, name: true, _count: { select: { members: true } } },\r\n      orderBy: [{ name: 'asc' }],\r\n    }),\r\n  ]);\r\n\r\n  const initialSubjects = subjects.map((s) => ({\r\n    id: s.id,\r\n    name: s.name,\r\n    count: s._count.members,\r\n  }));\r\n\r\n  return (\r\n    <main style={{ padding: 14 }}>\r\n      <GroupsBoard\r\n        initialUsers={users}\r\n        initialGroups={groups}\r\n        initialSubjects={initialSubjects}\r\n        subjectsEnabled\r\n      />\r\n    </main>\r\n  );\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/groups",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/heartbeat/Heartbeat.tsx",
      "size": 1542,
      "hash": "95edbe7694751e493f8ef6adae755927d05b5e8e",
      "textSample": "'use client';\r\n\r\nimport { useEffect, useRef } from 'react';\r\nimport { usePathname } from 'next/navigation';\r\n\r\nexport default function Heartbeat({\r\n  action,\r\n  intervalMs = 60_000,     // раз в минуту\r\n}: {\r\n  action: (fd: FormData) => Promise<void>;\r\n  intervalMs?: number;\r\n}) {\r\n  const formRef = useRef<HTMLFormElement>(null);\r\n  const path = usePathname();\r\n\r\n  useEffect(() => {\r\n    const submit = () => {\r\n      const f = formRef.current;\r\n      if (!f) return;\r\n      // submit без перезагрузки/перехода\r\n      (f as any).requestSubmit ? (f as any).requestSubmit() : f.submit();\r\n    };\r\n\r\n    // пульс сразу + при видимости\r\n    submit();\r\n    const onVis = () => { if (document.visibilityState === 'visible') submit(); };\r\n\r\n    const t = window.setInterval(() => {\r\n      if (document.visibilityState === 'visible') submit();\r\n    }, intervalMs);\r\n\r\n    document.addEventListener('visibilitychange', onVis);\r\n    window.addEventListener('focus', onVis);\r\n\r\n    return () => {\r\n      window.clearInterval(t);\r\n      document.removeEventListener('visibilitychange', onVis);\r\n      window.removeEventListener('focus', onVis);\r\n    };\r\n  }, [intervalMs, path]);\r\n\r\n  return (\r\n    <form ref={formRef} action={action} style={{ display: 'none' }}>\r\n      {/* запасной параметр — вдруг захочешь что-то варьировать по текущему пути */}\r\n      <input type=\"hidden\" name=\"path\" value={path || ''} />\r\n    </form>\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/heartbeat/actions.ts",
      "size": 584,
      "hash": "83868c3759f315f472a14deb3150ba30e4388da5",
      "textSample": "'use server';\r\n\r\nimport { prisma } from '@/lib/prisma';\r\nimport { auth } from '@/auth.config';\r\n\r\n// тихий пульс: обновляем lastSeen и выходим (без redirect/revalidate)\r\nexport async function heartbeat(): Promise<void> {\r\n  const session = await auth();\r\n  const id = (session?.user as any)?.id as string | undefined;\r\n  if (!id) return;\r\n  try {\r\n    await prisma.user.update({\r\n      where: { id },\r\n      data: { lastSeen: new Date() },\r\n    });\r\n  } catch {\r\n    // тишина: пульс не должен ломать навигацию\r\n  }\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/inboxtasks/TaskForm.tsx",
      "size": 18638,
      "hash": "77bd6ac67519e1039d564a8dfd79fb5ddbb2fb0e",
      "textSample": "'use client';\r\n\r\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\ntype SimpleUser  = { id: string; name: string | null; role?: string | null; methodicalGroups?: string | null; subjects?: any };\r\ntype SimpleGroup = { id: string; name: string };\r\ntype SimpleSubject = { name: string; count?: number };\r\ntype Candidate   = { type: 'user' | 'group' | 'role' | 'subject'; id: string; name: string };\r\n\r\ntype GroupMember = { groupId: string; userId: string };\r\ntype SubjectMember = { subjectName: string; userId: string };\r\n\r\nconst BRAND = '#8d2828';\r\n\r\n// Получаем «сегодня» в зоне Asia/Yekaterinburg (UTC+5) в формате YYYY-MM-DD\r\nconst todayYekbYMD = () => {\r\n  const fmt = new Intl.DateTimeFormat('ru-RU', { timeZone: 'Asia/Yekaterinburg', year: 'numeric', month: '2-digit', day: '2-digit' });\r\n  const [{ value: day }, , { value: month }, , { value: year }] = fmt.formatToParts(new Date());\r\n  return `${year}-${month}-${day}`;\r\n};\r\nconst norm = (s?: string | null) => (s ?? '').toLocaleLowerCase('ru-RU').replace(/\\s*\\+\\s*/g, '+').replace(/\\s+/g, ' ').trim();\r\nconst splitGroups = (s?: string | null) => !s ? [] : s.split(/[,;]+/).map(x => x.trim()).filter(Boolean);\r\nfunction parseSubjects(raw: any): string[] {\r\n  if (!raw) return [];\r\n  if (Array.isArray(raw)) return raw.map((x) => String(x ?? '').trim()).filter(Boolean);\r\n  const s = String(raw ?? '').trim();\r\n  if (!s) return [];\r\n  if (s.startsWith('[') || s.startsWith('{')) { try { return parseSubjects(JSON.parse(s)); } catch {} }\r\n  return s.split(/[,;\\/|]+/g).map((x) => x.trim()).filter(Boolean);\r\n}\r\nfunction canonicalRole(label?: string | null): string | null {\r\n  const s = norm(label);\r\n  if (s === 'директор' || s === 'director') return 'Директор';\r\n  if (s === 'заместитель+' || s === 'заместитель плюс' || s === 'deputy+' || s === 'deputy_plus') return 'Заместитель+';\r\n  if (s === 'заместитель' || s === 'deputy') return 'Заместитель';\r\n  if (s === 'педагог+' || s === 'teacher+' || s === 'teacher_plus' || s === 'учитель+' || s === 'педагог плюс') return 'Педагог +';\r\n  if (s === 'педагог' || s === 'teacher' || s === 'учитель') return 'Педагог';\r\n  return null;\r\n}\r\n\r\nexport default function TaskForm({\r\n  users,\r\n  groups,\r\n  subjects,\r\n  groupMembers,\r\n  subjectMembers,\r\n  createAction,\r\n}: {\r\n  users: SimpleUser[];\r\n  groups: SimpleGroup[];\r\n  subjects: SimpleSubject[];\r\n  groupMembers: GroupMember[];\r\n  subjectMembers: SubjectMember[];\r\n  createAction: (fd: FormData) => Promise<void>;\r\n}) {\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDesc] = useState('');\r\n  const [due, setDue] = useState('');\r\n  const [dueTime, setDueTime] = useState(''); // опциональное время\r\n  const [priority, setPriority] = useState<'normal'|'high'>('normal');\r\n  const [noCalendar, setNoCalendar] = useState(false);\r\n\r\n  const [files, setFiles] = useState<File[]>([]);\r\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const [roles, setRoles] = useState<Array<{ id: string; name: string }>>([]);\r\n  const todayStr = useMemo(() => todayYekbYMD(), []);\r\n\r\n  useEffect(() => {\r\n    const setR = new Set<string>();\r\n    (users || []).forEach(u => {\r\n      const canon = canonicalRole(u.role);\r\n      if (canon) setR.add(canon);\r\n    });\r\n    setRoles(Array.from(setR).sort((a,b)=>a.localeCompare(b,'ru')).map(n => ({ id: n, name: n })));\r\n  }, [users]);\r\n\r\n  // кандидаты\r\n  const allCandidates = useMemo<Candidate[]>(() => {\r\n    const us: Candidate[] = (users || []).map((u) => ({ type: 'user', id: u.id, name: u.name || u.id }));\r\n    const gs: Candidate[] = (groups || []).map((g) => ({ type: 'group', id: g.id, name: g.name || g.id }));\r\n    const rs: Candidate[] = (roles || []).map((r) => ({ type: 'role', id: r.id, name: r.name }));\r\n    const ss: Candidate[] = (subjects || []).map((s) => ({ type: 'subject', id: s.name, name: s.name }));\r\n    return [...us, ...gs, ...rs, ...ss];\r\n  }, [users, ",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/inboxtasks/actions.ts",
      "size": 8337,
      "hash": "b31fdffe151852b8eab40b5f12a2ea8d8f62389f",
      "textSample": "// app/(app)/inboxtasks/actions.ts\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { normalizeRole, canCreateTasks, hasFullAccess } from '@/lib/roles';\r\n\r\n// утилита: \"сегодня 00:00\" в зоне Asia/Yekaterinburg (UTC+5) в UTC\r\nfunction todayStartUtcFromYekb(): Date {\r\n  const now = new Date();\r\n  const y = now.getUTCFullYear();\r\n  const m = now.getUTCMonth();\r\n  const d = now.getUTCDate();\r\n  const utcToday = new Date(Date.UTC(y, m, d));\r\n  const isoY = utcToday.getUTCFullYear();\r\n  const isoM = String(utcToday.getUTCMonth() + 1).padStart(2, '0');\r\n  const isoD = String(utcToday.getUTCDate()).padStart(2, '0');\r\n  const yekbLocalMidnight = new Date(`${isoY}-${isoM}-${isoD}T00:00:00+05:00`);\r\n  return new Date(yekbLocalMidnight.toISOString()); // UTC\r\n}\r\n\r\nfunction uniqueStrings(input: unknown): string[] {\r\n  if (!input) return [];\r\n  let arr: string[] = [];\r\n  if (Array.isArray(input)) {\r\n    arr = input.map(String);\r\n  } else if (typeof input === 'string') {\r\n    try {\r\n      const parsed = JSON.parse(input) as unknown;\r\n      return uniqueStrings(parsed);\r\n    } catch {\r\n      arr = [input];\r\n    }\r\n  } else {\r\n    arr = [String(input)];\r\n  }\r\n  const set = new Set(arr.map(s => s.trim()).filter(Boolean));\r\n  return Array.from(set);\r\n}\r\n\r\nfunction revalidateAll() {\r\n  // список страниц, которым нужен пересчёт после любых CRUD по задачам\r\n  revalidatePath('/inboxtasks');\r\n  revalidatePath('/inboxtasks/archive');\r\n  revalidatePath('/calendar');\r\n  revalidatePath('/'); // Sidebar (unreadTasks)\r\n}\r\n\r\nexport async function createTaskAction(fd: FormData): Promise<void> {\r\n  const session = await auth();\r\n  const meId = session?.user?.id ?? null;\r\n  const meName = session?.user?.name ?? null;\r\n  const role = normalizeRole(session?.user?.role);\r\n\r\n  if (!meId || !canCreateTasks(role)) {\r\n    revalidateAll();\r\n    return;\r\n  }\r\n\r\n  const title = String(fd.get('title') ?? '').trim();\r\n  const description = String(fd.get('description') ?? '').trim();\r\n  const dueIso = String(fd.get('due') ?? '').trim(); // ISO от формы (Екб -> UTC)\r\n  const priority = (String(fd.get('priority') ?? 'normal') === 'high') ? 'high' : 'normal';\r\n  const noCalendar = String(fd.get('noCalendar') ?? '') === '1';\r\n  const assigneeUserIdsJson = fd.get('assigneeUserIdsJson');\r\n  const assigneeIds = uniqueStrings(assigneeUserIdsJson);\r\n\r\n  if (!title || !dueIso) { revalidateAll(); return; }\r\n  const dueDate = new Date(dueIso);\r\n  if (Number.isNaN(dueDate.getTime())) { revalidateAll(); return; }\r\n\r\n  const todayStartUtc = todayStartUtcFromYekb();\r\n  if (dueDate.getTime() < todayStartUtc.getTime()) { revalidateAll(); return; }\r\n\r\n  try {\r\n    const task = await prisma.task.create({\r\n      data: {\r\n        title,\r\n        description,\r\n        dueDate,\r\n        priority,\r\n        hidden: !!noCalendar,\r\n        createdById: meId,\r\n        createdByName: meName ?? null,\r\n      },\r\n      select: { id: true },\r\n    });\r\n\r\n    if (assigneeIds.length > 0) {\r\n      await prisma.taskAssignee.createMany({\r\n        data: assigneeIds.map((uid) => ({\r\n          taskId: task.id,\r\n          userId: uid,\r\n          status: 'in_progress',\r\n        })),\r\n        skipDuplicates: true,\r\n      });\r\n    }\r\n  } finally {\r\n    revalidateAll();\r\n  }\r\n}\r\n\r\nexport async function updateTaskAction(fd: FormData): Promise<void> {\r\n  const session = await auth();\r\n  const meId = session?.user?.id ?? null;\r\n  const role = normalizeRole(session?.user?.role);\r\n\r\n  const taskId = String(fd.get('taskId') ?? '').trim();\r\n  if (!meId || !taskId) { revalidateAll(); return; }\r\n\r\n  const task = await prisma.task.findUnique({ where: { id: taskId }, select: { id: true, createdById: true } });\r\n  if (!task) { revalidateAll(); return; }\r\n\r\n  const canEdit = task.createdById === meId || hasFullAccess(role);\r\n  if (!canEdit) { revalidateAll(); return; }\r\n\r\n  const archive = String(fd.get('archive') ?? '') === '1';\r\n\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/inboxtasks/archive/page.tsx",
      "size": 10064,
      "hash": "71f1886e82c91e9e38643814f6e78d74c9282fc3",
      "textSample": "// app/(app)/inboxtasks/archive/page.tsx\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { normalizeRole, canCreateTasks } from '@/lib/roles';\r\nimport type { Prisma, TaskAssignee, Task } from '@prisma/client';\r\nimport { unarchiveAssigneeAction } from '../actions';\r\n\r\n\r\ntype SearchParams = Promise<Record<string, string | string[] | undefined>>;\r\ntype TaskWithAssignees = Prisma.TaskGetPayload<{ include: { assignees: { include: { user: { select: { id: true; name: true } } } } } }>;\r\n\r\nfunction fmtRuDate(d: Date | string | null | undefined): string {\r\n  if (!d) return '';\r\n  const dt = typeof d === 'string' ? new Date(d) : d;\r\n  return new Intl.DateTimeFormat('ru-RU', { day: '2-digit', month: 'short', year: 'numeric' }).format(dt);\r\n}\r\n\r\nexport default async function Page({ searchParams }: { searchParams: SearchParams }) {\r\n  const sp = await searchParams;\r\n  const tabParam = typeof sp.tab === 'string' ? sp.tab : Array.isArray(sp.tab) ? sp.tab[0] : undefined;\r\n\r\n  const session = await auth();\r\n  const meId = session?.user?.id ?? null;\r\n  const role = normalizeRole(session?.user?.role);\r\n  const mayCreate = canCreateTasks(role);\r\n\r\n  if (!meId) {\r\n    return (\r\n      <main style={{ padding: 16 }}>\r\n        <h1>Архив задач</h1>\r\n        <p>Не авторизовано.</p>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  const activeTab = mayCreate ? (tabParam === 'byme' ? 'byme' : 'mine') : 'mine';\r\n\r\n  const [mineAssigneesDone, byMeAllDone]: [\r\n    (TaskAssignee & { task: Task | null })[],\r\n    TaskWithAssignees[]\r\n  ] = await Promise.all([\r\n    prisma.taskAssignee.findMany({\r\n      where: { userId: meId, status: 'done' },\r\n      include: { task: true },\r\n      orderBy: [{ completedAt: 'desc' }, { assignedAt: 'desc' }],\r\n    }),\r\n    mayCreate\r\n      ? prisma.task.findMany({\r\n          where: { createdById: meId, assignees: { every: { status: 'done' } } },\r\n          include: { assignees: { include: { user: { select: { id: true, name: true } } } } },\r\n          orderBy: [{ dueDate: 'desc' }, { updatedAt: 'desc' }],\r\n        })\r\n      : Promise.resolve([] as TaskWithAssignees[]),\r\n  ]);\r\n\r\n  return (\r\n    <main style={{ display: 'grid', gap: 12, padding: 16 }}>\r\n      <header style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', gap: 12 }}>\r\n        <h1 style={{ margin: 0 }}>Архив задач</h1>\r\n\r\n        {mayCreate ? (\r\n          <nav style={{ display: 'flex', gap: 8 }}>\r\n            <a\r\n              href=\"/inboxtasks/archive?tab=mine\"\r\n              style={{\r\n                padding: '6px 10px',\r\n                borderRadius: 999,\r\n                border: '1px solid #e5e7eb',\r\n                background: activeTab === 'mine' ? '#111827' : '#fff',\r\n                color: activeTab === 'mine' ? '#fff' : '#111827',\r\n                textDecoration: 'none',\r\n                fontSize: 13,\r\n              }}\r\n            >\r\n              Назначенные мне ({mineAssigneesDone.length})\r\n            </a>\r\n            <a\r\n              href=\"/inboxtasks/archive?tab=byme\"\r\n              style={{\r\n                padding: '6px 10px',\r\n                borderRadius: 999,\r\n                border: '1px solid #e5e7eb',\r\n                background: activeTab === 'byme' ? '#111827' : '#fff',\r\n                color: activeTab === 'byme' ? '#fff' : '#111827',\r\n                textDecoration: 'none',\r\n                fontSize: 13,\r\n              }}\r\n            >\r\n              Назначенные мной ({byMeAllDone.length})\r\n            </a>\r\n          </nav>\r\n        ) : (\r\n          <div style={{ fontSize: 13, color: '#6b7280' }}>Роль: преподаватель — доступен только раздел «Назначенные мне»</div>\r\n        )}\r\n      </header>\r\n\r\n      {/* Назначенные мне (выполненные мной) */}\r\n      {activeTab === 'mine' && (\r\n        <section aria-label=\"Назначенные мне — архив\" style={{ display: 'grid', gap: 8 }}>\r\n          {mineAssigneesDone.length === 0 && <div style={{ color: '#6b7280', fontSize: 14 }}>В архиве пока пусто.</div>}\r\n\r\n ",
      "kind": "app-route-file",
      "routePath": "/inboxtasks/archive",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/inboxtasks/page.tsx",
      "size": 22493,
      "hash": "aa57e67c0a510668d2a726732b97f12a495e9842",
      "textSample": "import { Suspense } from 'react';\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { normalizeRole, canCreateTasks } from '@/lib/roles';\r\nimport TaskForm from './TaskForm';\r\nimport {\r\n  createTaskAction,\r\n  updateTaskAction,\r\n  deleteTaskAction,\r\n  markAssigneeDoneAction,\r\n} from './actions';\r\nimport type { Prisma } from '@prisma/client';\r\n\r\ntype SearchParams = Promise<Record<string, string | string[] | undefined>>;\r\ntype TaskWithAssignees = Prisma.TaskGetPayload<{\r\n  include: { assignees: { include: { user: { select: { id: true; name: true } } } } }\r\n}>;\r\n\r\nfunction fmtRuDateWithOptionalTimeYekb(d: Date | string | null | undefined): string {\r\n  if (!d) return '';\r\n  const dt = typeof d === 'string' ? new Date(d) : d;\r\n  const parts = new Intl.DateTimeFormat('ru-RU', {\r\n    timeZone: 'Asia/Yekaterinburg',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    day: '2-digit',\r\n    month: 'short',\r\n    year: 'numeric',\r\n  }).formatToParts(dt);\r\n  const map = Object.fromEntries(parts.map(p => [p.type, p.value]));\r\n  const dd = `${map.day} ${map.month?.replace('.', '')}`;\r\n  const yyyy = map.year;\r\n  const hm = new Intl.DateTimeFormat('ru-RU', {\r\n    timeZone: 'Asia/Yekaterinburg',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n  }).formatToParts(dt);\r\n  const hh = hm.find(p => p.type === 'hour')?.value ?? '00';\r\n  const mm = hm.find(p => p.type === 'minute')?.value ?? '00';\r\n  const isDefaultEnd = hh === '23' && mm === '59';\r\n  return isDefaultEnd ? `${dd} ${yyyy}` : `${dd} ${yyyy}, ${hh}:${mm}`;\r\n}\r\n\r\nfunction TeacherGuide() {\r\n  return (\r\n    <div style={{ border: '1px solid #e5e7eb', borderRadius: 12, padding: 12, background: '#fff', fontSize: 14, lineHeight: 1.5 }}>\r\n      <h3 style={{ marginTop: 0, marginBottom: 8 }}>Как работать с задачами</h3>\r\n      <ul style={{ margin: 0, paddingLeft: 18 }}>\r\n        <li>Во вкладке «Назначенные мне» вы видите актуальные задачи, назначенные вам руководителями.</li>\r\n        <li>Откройте задачу и нажмите «Выполнить», когда закончите работу — она уйдёт в архив.</li>\r\n        <li>Кнопка «Уточнить задачу» открывает чат с назначившим задачу для вопросов и уточнений.</li>\r\n        <li>Дедлайн отображается с датой и, при необходимости, временем.</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default async function Page({\r\n  searchParams,\r\n}: {\r\n  searchParams: SearchParams;\r\n}) {\r\n  const sp = await searchParams;\r\n  const tabParam = typeof sp.tab === 'string' ? sp.tab : Array.isArray(sp.tab) ? sp.tab[0] : undefined;\r\n\r\n  const session = await auth();\r\n  const meId = session?.user?.id ?? null;\r\n  const role = normalizeRole(session?.user?.role);\r\n  const mayCreate = canCreateTasks(role);\r\n\r\n  if (!meId) {\r\n    return (\r\n      <main style={{ padding: 16 }}>\r\n        <h1>Задачи</h1>\r\n        <p>Не авторизовано.</p>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  const activeTab = mayCreate ? (tabParam === 'byme' ? 'byme' : 'mine') : 'mine';\r\n\r\n  // Данные для TaskForm\r\n  let users: Array<{ id: string; name: string | null; role?: string | null; methodicalGroups?: string | null; subjects?: any }> = [];\r\n  let groups: Array<{ id: string; name: string }> = [];\r\n  let subjects: Array<{ name: string; count?: number }> = [];\r\n  let groupMembers: Array<{ groupId: string; userId: string }> = [];\r\n  let subjectMembers: Array<{ subjectName: string; userId: string }> = [];\r\n\r\n  if (mayCreate) {\r\n    const [usersRaw, groupsRaw, subjectsRaw, groupMembersRaw, subjectMembersRaw] = await Promise.all([\r\n      prisma.user.findMany({\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          role: true,\r\n          methodicalGroups: true,\r\n          subjects: true,\r\n        },\r\n        orderBy: { name: 'asc' },\r\n      }),\r\n      prisma.group.findMany({ select: { id: true, name: true }, orderBy: { name: 'asc' } }),\r\n      prisma.subject.findMany({\r\n        select: { name: true, _count: { select: { members: true } } },\r\n        orderBy: { name: 'asc' },\r\n      }),\r\n      prisma.groupMem",
      "kind": "app-route-file",
      "routePath": "/inboxtasks",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/inboxtasks/tasks-search-client.tsx",
      "size": 1884,
      "hash": "31497c143c64dfe22ccb7974f18f7a32e56ccdbc",
      "textSample": "// app/(app)/inboxtasks/tasks-search-client.tsx\r\n'use client';\r\n\r\nimport * as React from 'react';\r\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation';\r\n\r\nexport default function InboxTasksSearch(props: { paramKey: 'qt' | 'qu'; placeholder: string }) {\r\n  const { paramKey, placeholder } = props;\r\n  const router = useRouter();\r\n  const pathname = usePathname();\r\n  const sp = useSearchParams();\r\n\r\n  const [value, setValue] = React.useState(sp.get(paramKey) ?? '');\r\n\r\n  React.useEffect(() => {\r\n    setValue(sp.get(paramKey) ?? '');\r\n  }, [sp, paramKey]);\r\n\r\n  const buildUrl = React.useCallback(\r\n    (next: string) => {\r\n      const p = new URLSearchParams(sp.toString());\r\n      if (next && next.trim() !== '') p.set(paramKey, next);\r\n      else p.delete(paramKey);\r\n      const qs = p.toString();\r\n      return qs ? `${pathname}?${qs}` : pathname;\r\n    },\r\n    [sp, pathname, paramKey],\r\n  );\r\n\r\n  const tRef = React.useRef<number | null>(null);\r\n  function scheduleDebounced(next: string) {\r\n    if (tRef.current) window.clearTimeout(tRef.current);\r\n    tRef.current = window.setTimeout(() => {\r\n      router.replace(buildUrl(next), { scroll: false });\r\n    }, 350);\r\n  }\r\n  function applyImmediate(next: string) {\r\n    if (tRef.current) { window.clearTimeout(tRef.current); tRef.current = null; }\r\n    router.replace(buildUrl(next), { scroll: false });\r\n  }\r\n\r\n  return (\r\n    <input\r\n      value={value}\r\n      onChange={(e) => { const v = e.target.value; setValue(v); scheduleDebounced(v); }}\r\n      onKeyDown={(e) => {\r\n        if (e.key === 'Enter') applyImmediate(value);\r\n        if (e.key === 'Escape') { setValue(''); applyImmediate(''); }\r\n      }}\r\n      onBlur={() => applyImmediate(value)}\r\n      placeholder={placeholder}\r\n      style={{ width: '100%', padding: '8px 10px', border: '1px solid #e5e7eb', borderRadius: 10 }}\r\n    />\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/layout.module.css",
      "size": 833,
      "hash": "b238ed2c55ba0ec19cd22452313b3b340a287371",
      "textSample": "/* app/(app)/layout.module.css */\r\n.appShell {\r\n  display: grid;\r\n  grid-template-columns: 280px minmax(0, 1fr); /* ширина = ширине Sidebar */\r\n  min-height: 100dvh;\r\n  background: #f7f7f8;\r\n}\r\n\r\n.appSidebar {\r\n  position: sticky;\r\n  top: 0;\r\n  height: 100dvh;\r\n  overflow: hidden;             /* сайдбар без скроллов */\r\n  background: #ffffff;\r\n  width: 280px;                 /* фиксируем ширину контейнера */\r\n  flex: 0 0 280px;              /* не даём колонке сжиматься/расти */\r\n  border-right: 1px solid #e5e7eb;\r\n}\r\n\r\n.appMain {\r\n  min-width: 0;\r\n  height: 100dvh;\r\n  overflow: auto;               /* прокрутка — только у контента */\r\n  -webkit-overflow-scrolling: touch;\r\n  padding: 16px;\r\n  background: #f7f7f8;\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/layout.tsx",
      "size": 1869,
      "hash": "6b550a333ff6c817e83ae8a267647463c3ce34a5",
      "textSample": "// app/(app)/layout.tsx\r\nimport type { ReactNode } from 'react';\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { Prisma } from '@prisma/client';\r\nimport Sidebar from '@/components/Sidebar';\r\nimport Heartbeat from './heartbeat/Heartbeat';\r\nimport { heartbeat } from './heartbeat/actions';\r\nimport { unstable_noStore as noStore } from 'next/cache';\r\nimport { getUnreadTasksCount } from '@/lib/tasks/getUnreadTasks';\r\n\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\n\r\nasync function unreadTotal(uid: string) {\r\n  noStore();\r\n  const threads = await prisma.thread.findMany({\r\n    where: { OR: [{ aId: uid }, { bId: uid }] },\r\n    select: { id: true },\r\n  });\r\n  const ids = threads.map(t => t.id);\r\n  if (ids.length === 0) return 0;\r\n\r\n  const rows = await prisma.$queryRaw<{ count: bigint }[]>`\r\n    SELECT COUNT(*)::bigint AS count\r\n    FROM \"Message\" m\r\n    LEFT JOIN \"ReadMark\" r\r\n      ON r.\"threadId\" = m.\"threadId\" AND r.\"userId\" = ${uid}\r\n    WHERE m.\"threadId\" IN (${Prisma.join(ids)})\r\n      AND (r.\"readAt\" IS NULL OR m.\"createdAt\" > r.\"readAt\")\r\n      AND m.\"authorId\" <> ${uid}\r\n  `;\r\n  return Number(rows[0]?.count ?? 0);\r\n}\r\n\r\nexport default async function AppLayout({ children }: { children: ReactNode }) {\r\n  const session = await auth();\r\n  const uid = (session?.user as any)?.id as string | undefined;\r\n\r\n  const [unreadChats, unreadTasks] = await Promise.all([\r\n    uid ? unreadTotal(uid) : Promise.resolve(0),\r\n    uid ? getUnreadTasksCount(uid) : Promise.resolve(0),\r\n  ]);\r\n\r\n  return (\r\n    <div style={{ display:'grid', gridTemplateColumns:'280px 1fr', minHeight:'100vh' }}>\r\n      <Sidebar unreadChats={unreadChats} unreadTasks={unreadTasks} />\r\n      <main style={{ padding:12 }}>\r\n        {children}\r\n        <Heartbeat action={heartbeat} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/",
      "pageType": "layout",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/settings/SettingsToast.tsx",
      "size": 1645,
      "hash": "dabd0bc8d4988973d808c8985151684e9c960705",
      "textSample": "'use client';\r\n\r\nimport { useSearchParams, useRouter } from 'next/navigation';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst INTERNAL_MARKERS = new Set(['NEXT_REDIRECT', 'NEXT_NOT_FOUND']);\r\n\r\nexport default function SettingsToast() {\r\n  const params = useSearchParams();\r\n  const router = useRouter();\r\n  const [msg, setMsg] = useState<string | null>(null);\r\n  const [ok, setOk] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const okParam = params.get('ok');\r\n    const errParamRaw = params.get('error');\r\n\r\n    if (okParam) {\r\n      setOk(true);\r\n      setMsg('Успешно сохранено');\r\n    } else if (errParamRaw && !INTERNAL_MARKERS.has(errParamRaw)) {\r\n      setOk(false);\r\n      let text = errParamRaw;\r\n      try {\r\n        text = decodeURIComponent(errParamRaw);\r\n      } catch {}\r\n      setMsg('Ошибка: ' + text);\r\n    } else {\r\n      setMsg(null);\r\n    }\r\n\r\n    if (okParam || errParamRaw) {\r\n      const t = setTimeout(() => {\r\n        router.replace('/settings');\r\n      }, 2000);\r\n      return () => clearTimeout(t);\r\n    }\r\n  }, [params, router]);\r\n\r\n  if (!msg) return null;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'fixed',\r\n        right: 20,\r\n        bottom: 20,\r\n        padding: '12px 16px',\r\n        borderRadius: 12,\r\n        background: ok ? '#bbf7d0' : '#fecaca',\r\n        border: `1px solid ${ok ? '#15803d' : '#b91c1c'}`,\r\n        color: ok ? '#064e3b' : '#7f1d1d',\r\n        fontWeight: 600,\r\n        boxShadow: '0 4px 12px rgba(0,0,0,.15)',\r\n        zIndex: 10000,\r\n      }}\r\n      role=\"status\"\r\n      aria-live=\"polite\"\r\n    >\r\n      {msg}\r\n    </div>\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/settings/actions.ts",
      "size": 2059,
      "hash": "03f1b0a39d4f5d13ce917d67d44876c5c1f2a467",
      "textSample": "// app/(app)/settings/actions.ts\r\n'use server';\r\n\r\nimport { redirect } from 'next/navigation';\r\nimport { revalidatePath } from 'next/cache';\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport bcrypt from 'bcryptjs';\r\nimport type { Prisma } from '@prisma/client';\r\n\r\nconst s = (v: FormDataEntryValue | null) => (typeof v === 'string' ? v.trim() : '');\r\nconst b = (v: FormDataEntryValue | null) =>\r\n  typeof v === 'string' ? (v === 'on' || v === 'true' || v === '1') : false;\r\n\r\n/** Смена собственного пароля и обновление мягких полей профиля. */\r\nexport async function updateSelfAction(fd: FormData): Promise<void> {\r\n  const session = await auth();\r\n  const meId = (session?.user as any)?.id as string | undefined;\r\n  if (!meId) redirect('/sign-in');\r\n\r\n  const email = s(fd.get('email')) || null;\r\n  const phone = s(fd.get('phone')) || null;\r\n  const telegram = s(fd.get('telegram')) || null;\r\n  const about = s(fd.get('about')) || null;\r\n  const notifyEmail = b(fd.get('notifyEmail'));\r\n  const notifyTelegram = b(fd.get('notifyTelegram'));\r\n  const newPassword = s(fd.get('newPassword'));\r\n\r\n  const data: Prisma.UserUpdateInput = {\r\n    email,\r\n    phone,\r\n    telegram,\r\n    about,\r\n    notifyEmail,\r\n    notifyTelegram,\r\n  };\r\n\r\n  if (newPassword) {\r\n    if (newPassword.length < 6) {\r\n      // это пользовательская ошибка, покажем её в тосте\r\n      revalidatePath('/settings');\r\n      redirect('/settings?error=' + encodeURIComponent('Пароль должен быть не короче 6 символов'));\r\n    }\r\n    (data as any).passwordHash = await bcrypt.hash(newPassword, 10);\r\n  }\r\n\r\n  try {\r\n    await prisma.user.update({ where: { id: meId }, data });\r\n  } catch (e) {\r\n    const msg = e instanceof Error ? e.message : String(e ?? 'error');\r\n    revalidatePath('/settings');\r\n    redirect('/settings?error=' + encodeURIComponent(msg));\r\n  }\r\n\r\n  revalidatePath('/settings');\r\n  redirect('/settings?ok=1');\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/settings/page.tsx",
      "size": 2626,
      "hash": "bb10789da5ee54aae97a96ccd6449d47285359c0",
      "textSample": "import { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { redirect } from 'next/navigation';\r\nimport UserForm from '@/components/UserForm';\r\nimport { updateSelfAction } from './actions';\r\nimport SettingsToast from './SettingsToast';\r\nimport { Suspense } from 'react';\r\n\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\n\r\nexport default async function SettingsPage() {\r\n  const session = await auth();\r\n  const meId = (session?.user as any)?.id as string | undefined;\r\n  if (!meId) redirect('/sign-in');\r\n\r\n  const me = await prisma.user.findUnique({\r\n    where: { id: meId },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n      username: true,\r\n      email: true,\r\n      phone: true,\r\n      classroom: true,\r\n      role: true,\r\n      birthday: true,\r\n      telegram: true,\r\n      about: true,\r\n      notifyEmail: true,\r\n      notifyTelegram: true,\r\n    },\r\n  });\r\n  if (!me) redirect('/sign-in');\r\n\r\n  const meSafe = me as NonNullable<typeof me>;\r\n  const role = meSafe.role || 'teacher';\r\n  const isRestricted = role === 'teacher' || role === 'teacher_plus' || role === 'deputy';\r\n\r\n  return (\r\n    <main style={{ padding: 16 }}>\r\n      <div style={{ maxWidth: 860, margin: '0 auto' }}>\r\n        <h1 style={{ margin: '0 0 12px', fontWeight: 900, fontSize: 20 }}>Настройки профиля</h1>\r\n        <div\r\n          style={{\r\n            border: '1px solid rgba(229,231,235,.9)',\r\n            borderRadius: 14,\r\n            background: '#fff',\r\n            padding: 16,\r\n          }}\r\n        >\r\n          <UserForm\r\n            action={updateSelfAction}\r\n            mode=\"edit\"\r\n            initialId={meSafe.id}\r\n            initialValues={{\r\n              name: meSafe.name ?? '',\r\n              username: meSafe.username ?? '',\r\n              email: meSafe.email ?? '',\r\n              phone: meSafe.phone ?? '',\r\n              classroom: meSafe.classroom ?? '',\r\n              role: meSafe.role ?? 'teacher',\r\n              birthday: meSafe.birthday ? new Date(meSafe.birthday).toISOString().slice(0, 10) : '',\r\n              telegram: meSafe.telegram ?? '',\r\n              about: meSafe.about ?? '',\r\n              notifyEmail: !!meSafe.notifyEmail,\r\n              notifyTelegram: !!meSafe.notifyTelegram,\r\n            }}\r\n            disabledFields={\r\n              isRestricted\r\n                ? { name: true, username: true, classroom: true, role: true, birthday: true }\r\n                : undefined\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n      <Suspense>\r\n        <SettingsToast />\r\n      </Suspense>\r\n    </main>\r\n  );\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/settings",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/teachers/SearchBox.tsx",
      "size": 2387,
      "hash": "a37902fcaa8ed012a2d451a8c440b923af0187b6",
      "textSample": "'use client';\r\n\r\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation';\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\n\r\nexport default function SearchBox({ initial }: { initial?: string }) {\r\n  const router = useRouter();\r\n  const pathname = usePathname();\r\n  const sp = useSearchParams();\r\n  const [q, setQ] = useState(initial ?? '');\r\n\r\n  const base = useMemo(() => {\r\n    const obj = Object.fromEntries(sp?.entries() ?? []);\r\n    delete obj.ok; delete obj.error;\r\n    return obj;\r\n  }, [sp]);\r\n\r\n  // debounce + IME-guard (не триггерим во время набора по раскладке/IME)\r\n  const timerRef = useRef<number | null>(null);\r\n  const composingRef = useRef(false);\r\n\r\n  useEffect(() => { setQ(initial ?? ''); }, [initial]);\r\n\r\n  function push(qNext: string) {\r\n    const params = new URLSearchParams(base);\r\n    if (qNext) params.set('q', qNext); else params.delete('q');\r\n    router.replace(params.size ? `${pathname}?${params.toString()}` : pathname);\r\n  }\r\n\r\n  function schedule(qNext: string) {\r\n    if (timerRef.current) window.clearTimeout(timerRef.current);\r\n    // только если пусто или 2+ символа — чтобы не дергать сервер каждую букву\r\n    const shouldUpdate = qNext.length === 0 || qNext.length >= 2;\r\n    timerRef.current = window.setTimeout(() => {\r\n      if (!composingRef.current && shouldUpdate) push(qNext);\r\n    }, 450);\r\n  }\r\n\r\n  return (\r\n    <input\r\n      value={q}\r\n      onChange={(e) => { const v = e.target.value; setQ(v); schedule(v); }}\r\n      onCompositionStart={() => { composingRef.current = true; }}\r\n      onCompositionEnd={(e) => { composingRef.current = false; schedule((e.target as HTMLInputElement).value); }}\r\n      onBlur={(e) => push(e.currentTarget.value)}         // мгновенно по blur\r\n      onKeyDown={(e) => { if (e.key === 'Enter') push(q); }} // мгновенно по Enter\r\n      placeholder=\"поиск: фио, email, телефон, классное руководство, логин, роль…\"\r\n      style={{\r\n        height: 36,\r\n        fontSize: 14,\r\n        width: 520,\r\n        maxWidth: '60ch',\r\n        padding: '6px 10px',\r\n        borderRadius: 10,\r\n        border: '1px solid rgba(229,231,235,.9)',\r\n        background: '#fff',\r\n        outline: 'none',\r\n      }}\r\n    />\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/teachers/TeachersToast.tsx",
      "size": 1843,
      "hash": "d3c6931dc58622807e03fe3639bc7680d479fd58",
      "textSample": "'use client';\r\n\r\nimport { useSearchParams, useRouter, usePathname } from 'next/navigation';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst INTERNAL = new Set(['NEXT_REDIRECT', 'NEXT_NOT_FOUND']);\r\n\r\nexport default function TeachersToast() {\r\n  const sp = useSearchParams();\r\n  const router = useRouter();\r\n  const pathname = usePathname();\r\n  const [msg, setMsg] = useState<string | null>(null);\r\n  const [ok, setOk] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const okRaw = sp.get('ok');\r\n    const errRaw = sp.get('error');\r\n\r\n    if (okRaw && !INTERNAL.has(okRaw)) {\r\n      setOk(true);\r\n      setMsg(decodeSafe(okRaw));\r\n    } else if (errRaw && !INTERNAL.has(errRaw)) {\r\n      setOk(false);\r\n      setMsg('Ошибка: ' + decodeSafe(errRaw));\r\n    } else {\r\n      setMsg(null);\r\n    }\r\n\r\n    if (okRaw || errRaw) {\r\n      const t = setTimeout(() => {\r\n        const clean = new URLSearchParams(Array.from(sp.entries()));\r\n        clean.delete('ok'); clean.delete('error');\r\n        router.replace(clean.size ? `${pathname}?${clean.toString()}` : pathname);\r\n      }, 2000);\r\n      return () => clearTimeout(t);\r\n    }\r\n  }, [sp, router, pathname]);\r\n\r\n  if (!msg) return null;\r\n\r\n  return (\r\n    <div\r\n      role=\"status\"\r\n      aria-live=\"polite\"\r\n      style={{\r\n        position: 'fixed',\r\n        right: 20,\r\n        bottom: 20,\r\n        padding: '12px 16px',\r\n        borderRadius: 12,\r\n        background: ok ? '#bbf7d0' : '#fecaca',\r\n        border: `1px solid ${ok ? '#15803d' : '#b91c1c'}`,\r\n        color: ok ? '#064e3b' : '#7f1d1d',\r\n        fontWeight: 600,\r\n        boxShadow: '0 4px 12px rgba(0,0,0,.15)',\r\n        zIndex: 10000,\r\n      }}\r\n    >\r\n      {ok ? `Готово: ${msg}` : msg}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction decodeSafe(v: string) {\r\n  try { return decodeURIComponent(v); } catch { return v; }\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/teachers/actions.ts",
      "size": 5923,
      "hash": "92d58a451fd0de3d86b530b3e2e4a9fd07830f5a",
      "textSample": "'use server';\r\n\r\nimport { redirect } from 'next/navigation';\r\nimport { revalidatePath } from 'next/cache';\r\nimport { headers } from 'next/headers';\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport bcrypt from 'bcryptjs';\r\nimport { normalizeRole } from '@/lib/roles';\r\n\r\nconst s = (v: FormDataEntryValue | null) => (typeof v === 'string' ? v.trim() : '');\r\nconst b = (v: FormDataEntryValue | null) =>\r\n  typeof v === 'string' ? (v === 'on' || v === 'true' || v === '1') : false;\r\n\r\nasync function returnToWithQuery(q: string): Promise<string> {\r\n  const h = await headers();\r\n  const ref = h.get('referer') || '/teachers';\r\n  try {\r\n    const u = new URL(ref);\r\n    u.searchParams.delete('ok');\r\n    u.searchParams.delete('error');\r\n    const sep = u.search ? '&' : '?';\r\n    return `${u.pathname}${u.search}${sep}${q}`;\r\n  } catch {\r\n    return `/teachers?${q}`;\r\n  }\r\n}\r\n\r\n/** Создание пользователя. */\r\nexport async function createUser(fd: FormData): Promise<void> {\r\n  const session = await auth();\r\n  const role = normalizeRole((session?.user as any)?.role ?? null);\r\n  const canManage = role === 'director' || role === 'deputy_plus';\r\n  if (!canManage) redirect('/');\r\n\r\n  const name = s(fd.get('name'));\r\n  const username = s(fd.get('username')) || null;\r\n  const email = s(fd.get('email')) || null;\r\n  const phone = s(fd.get('phone')) || null;\r\n  const classroom = s(fd.get('classroom')) || null;\r\n  const roleNew = s(fd.get('role')) || 'teacher';\r\n  const birthday = s(fd.get('birthday'));\r\n  const telegram = s(fd.get('telegram')) || null;\r\n  const about = s(fd.get('about')) || null;\r\n  const notifyEmail = b(fd.get('notifyEmail'));\r\n  const notifyTelegram = b(fd.get('notifyTelegram'));\r\n  const password = s(fd.get('password'));\r\n\r\n  if (!name) {\r\n    revalidatePath('/teachers');\r\n    redirect(await returnToWithQuery('error=' + encodeURIComponent('Укажите ФИО')));\r\n  }\r\n\r\n  const data: any = {\r\n    name,\r\n    username,\r\n    email,\r\n    phone,\r\n    classroom,\r\n    role: roleNew,\r\n    telegram,\r\n    about,\r\n    notifyEmail,\r\n    notifyTelegram,\r\n  };\r\n  if (birthday) data.birthday = new Date(birthday);\r\n  if (password) {\r\n    if (password.length < 6) {\r\n      revalidatePath('/teachers');\r\n      redirect(await returnToWithQuery('error=' + encodeURIComponent('Пароль должен быть не короче 6 символов')));\r\n    }\r\n    data.passwordHash = await bcrypt.hash(password, 10);\r\n  }\r\n\r\n  try {\r\n    await prisma.user.create({ data });\r\n  } catch (e) {\r\n    const msg = e instanceof Error ? e.message : String(e ?? 'error');\r\n    revalidatePath('/teachers');\r\n    redirect(await returnToWithQuery('error=' + encodeURIComponent(msg)));\r\n  }\r\n\r\n  revalidatePath('/teachers');\r\n  redirect(await returnToWithQuery('ok=' + encodeURIComponent('пользователь создан')));\r\n}\r\n\r\n/** Обновление пользователя. */\r\nexport async function updateUser(fd: FormData): Promise<void> {\r\n  const session = await auth();\r\n  const role = normalizeRole((session?.user as any)?.role ?? null);\r\n  const canManage = role === 'director' || role === 'deputy_plus';\r\n  if (!canManage) redirect('/');\r\n\r\n  const id = s(fd.get('id'));\r\n  if (!id) {\r\n    revalidatePath('/teachers');\r\n    redirect(await returnToWithQuery('error=' + encodeURIComponent('Не передан id пользователя')));\r\n  }\r\n\r\n  const name = s(fd.get('name')) || null;\r\n  const username = s(fd.get('username')) || null;\r\n  const email = s(fd.get('email')) || null;\r\n  const phone = s(fd.get('phone')) || null;\r\n  const classroom = s(fd.get('classroom')) || null;\r\n  const roleNew = s(fd.get('role')) || null;\r\n  const birthday = s(fd.get('birthday'));\r\n  const telegram = s(fd.get('telegram')) || null;\r\n  const about = s(fd.get('about')) || null;\r\n  const notifyEmail = b(fd.get('notifyEmail'));\r\n  const notifyTelegram = b(fd.get('notifyTelegram'));\r\n  const newPassword = s(fd.get('newPassword'));\r\n\r\n  const data: any = {\r\n    name,\r\n    username,\r\n    email,\r\n    phone,\r\n    classroom,\r\n    role: roleNew,\r\n    tel",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/teachers/page.tsx",
      "size": 9969,
      "hash": "15a8971630d1c73aa476b68c5ee3ade87c2aee36",
      "textSample": "import { prisma } from '@/lib/prisma';\r\nimport { createUser, updateUser, deleteUser } from './actions';\r\nimport AddUserModal from '@/components/AddUserModal';\r\nimport EditUserModal from '@/components/EditUserModal';\r\nimport SearchBox from './SearchBox';\r\nimport { auth } from '@/auth.config';\r\nimport { Prisma } from '@prisma/client';\r\nimport ConfirmDeleteUser from '@/components/ConfirmDeleteUser';\r\nimport { Suspense } from 'react';\r\nimport TeachersToast from './TeachersToast';\r\n\r\ntype Search = Promise<Record<string, string | string[] | undefined>>;\r\n\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\n\r\nconst ONLINE_WINDOW_MS = 5 * 60 * 1000; // 5 минут\r\n\r\n// Форматирование даты рождения для отображения без времени и без смещения\r\nfunction formatRuDate(date: Date): string {\r\n  // «Обнуляем» смещение, чтобы не съезжало на -1 день\r\n  const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\r\n  return d.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });\r\n}\r\n\r\n// Значение для <input type=\"date\"> в формате YYYY-MM-DD без смещения по таймзоне\r\nfunction dateToInputYMD(date: Date): string {\r\n  const y = date.getFullYear();\r\n  const m = String(date.getMonth() + 1).padStart(2, '0');\r\n  const d = String(date.getDate()).padStart(2, '0');\r\n  return `${y}-${m}-${d}`;\r\n}\r\n\r\nconst clean = (x?: string | null) => x ?? '—';\r\nconst ruRole = (r?: string | null) =>\r\n  r === 'director' ? 'Директор'\r\n  : r === 'deputy_plus' ? 'Заместитель +'\r\n  : r === 'deputy' ? 'Заместитель'\r\n  : r === 'teacher_plus' ? 'Педагог +'\r\n  : r === 'teacher' ? 'Педагог'\r\n  : r === 'archived' ? 'В архиве'\r\n  : (r || '—');\r\n\r\nexport default async function TeachersPage(props: { searchParams?: Search }) {\r\n  const sp = (props.searchParams ? await props.searchParams : undefined) ?? {};\r\n  const q = (Array.isArray(sp.q) ? sp.q[0] : sp.q) || '';\r\n  const okRaw = Array.isArray(sp.ok) ? sp.ok[0] : sp.ok;\r\n  const errorRaw = Array.isArray(sp.error) ? sp.error[0] : sp.error;\r\n  const ok = okRaw && !/^NEXT_REDIRECT/.test(okRaw) ? okRaw : undefined;\r\n  const error = errorRaw && !/^NEXT_REDIRECT/.test(errorRaw) ? errorRaw : undefined;\r\n\r\n  const session = await auth();\r\n  const role = (session?.user as any)?.role as string | undefined;\r\n  const canManage = role === 'director' || role === 'deputy_plus';\r\n\r\n  const s = q.trim();\r\n  const or: Prisma.UserWhereInput[] = s\r\n    ? [\r\n        { name:      { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n        { email:     { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n        { phone:     { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n        { classroom: { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n        { username:  { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n        { telegram:  { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n        { about:     { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n        { role:      { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n      ]\r\n    : [];\r\n  const where: Prisma.UserWhereInput | undefined = or.length ? { OR: or } : undefined;\r\n\r\n  const users = await prisma.user.findMany({\r\n    where,\r\n    orderBy: { name: 'asc' },\r\n    select: {\r\n      id: true, name: true, role: true, username: true, email: true, phone: true,\r\n      classroom: true, telegram: true, about: true, birthday: true,\r\n      notifyEmail: true, notifyTelegram: true, lastSeen: true,\r\n    },\r\n  });\r\n\r\n  const now = new Date();\r\n\r\n  // Общий «стеклянный» стиль для плиток в раскрывашках\r\n  const glassTile: React.CSSProperties = {\r\n    borderRadius: 16,\r\n    background: 'rgba(255,255,255,0.6)',\r\n    border: '1px solid rgba(229,231,235,.9)',\r\n    boxShadow: '0 8px 24px rgba(0,0,0,.06), inset 0 1px 0 rgba(255,255,255,.6)',\r\n    backdropFilter: 'blur(8px)',\r\n  };\r\n\r\n  return (\r\n    <section style={{ display: 'grid', gap: 12 }}>\r\n      <header className=\"u-glass\" style={{ padding: '14px 16px', borde",
      "kind": "app-route-file",
      "routePath": "/teachers",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(auth)/sign-in/SignInForm.tsx",
      "size": 2618,
      "hash": "b481c7e4b8055d8bdcae908a5c4053a86a0009ec",
      "textSample": "// app/(auth)/sign-in/SignInForm.tsx\r\n'use client';\r\nimport { useState, FormEvent } from 'react';\r\nimport { signIn } from 'next-auth/react';\r\n\r\nexport default function SignInForm({ callbackUrl }: { callbackUrl: string }) {\r\n  const [username, setUsername] = useState(''); \r\n  const [password, setPassword] = useState('');\r\n  const [pending, setPending] = useState(false);\r\n  const [localError, setLocalError] = useState<string | null>(null);\r\n\r\n  async function onSubmit(e: FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    setLocalError(null);\r\n    setPending(true);\r\n    try {\r\n      await signIn('credentials', { username, password, callbackUrl, redirect: true });\r\n    } catch {\r\n      setLocalError('Не удалось выполнить вход');\r\n    } finally {\r\n      setPending(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"auth-form\">\r\n      <label className=\"lbl\">Логин или Email</label>\r\n      <input className=\"inp\" type=\"text\" autoComplete=\"username\" value={username} onChange={e=>setUsername(e.target.value)} required />\r\n\r\n      <label className=\"lbl\">Пароль</label>\r\n      <input className=\"inp\" type=\"password\" autoComplete=\"current-password\" value={password} onChange={e=>setPassword(e.target.value)} required />\r\n\r\n      {localError && <div className=\"err\">{localError}</div>}\r\n\r\n      <button type=\"submit\" disabled={pending} className=\"btn\">\r\n        {pending ? 'Входим…' : 'Войти'}\r\n      </button>\r\n\r\n      <input type=\"hidden\" name=\"callbackUrl\" value={callbackUrl} />\r\n\r\n      <style jsx>{`\r\n        .auth-form {\r\n          width: 100%;\r\n          max-width: 360px;\r\n          display: grid;\r\n          gap: 10px;\r\n        }\r\n        .lbl { font-size: 13px; color: #374151; }\r\n        .inp {\r\n          width: 100%;\r\n          height: 38px;\r\n          border: 1px solid #e5e7eb;\r\n          border-radius: 10px;\r\n          padding: 0 12px;\r\n          background: #fff;\r\n        }\r\n        .err { color: #ef4444; font-size: 13px; }\r\n        .btn {\r\n          display: inline-flex;           /* ключ: НЕ растягиваемся на всю ширину */\r\n          align-items: center;\r\n          justify-content: center;\r\n          height: 38px;\r\n          padding: 0 14px;\r\n          border-radius: 10px;\r\n          border: 1px solid #e5e7eb;\r\n          background: #8d2828;            /* фирменный цвет */\r\n          color: #fff;\r\n          font-weight: 600;\r\n          cursor: pointer;\r\n        }\r\n        .btn:disabled { opacity: 0.6; cursor: default; }\r\n      `}</style>\r\n    </form>\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(auth)/sign-in/page.tsx",
      "size": 2648,
      "hash": "3099bb6c73fef6bd0cd752faf73c84ad963f53fe",
      "textSample": "import { redirect } from 'next/navigation';\nimport { auth } from '@/auth.config';\nimport SignInForm from './SignInForm';\n\nexport const dynamic = 'force-dynamic';  // Обязательно динамическая страница (не статическая), т.к. зависит от сессии и query-параметров\n\nexport default async function SignInPage(props: { \n  searchParams?: Promise<Record<string, string | string[] | undefined>> \n}) {\n  // Проверяем наличие активной сессии через auth() (getServerSession). Если пользователь уже залогинен – перенаправляем на главную.\n  const session = await auth();\n  if (session) {\n    redirect('/');  // Если есть сессия, сразу уходим с страницы входа (редирект на главную/дешборд)\n  }\n\n  // Извлекаем query-параметры (?error=… & callbackUrl=…) из URL, учитывая что searchParams передаются как Promise\n  const sp = props.searchParams ? await props.searchParams : undefined;\n  const errorParam = sp?.error;\n  const callbackParam = sp?.callbackUrl;\n  const error = Array.isArray(errorParam) ? errorParam[0] : errorParam;\n  const callbackUrl = Array.isArray(callbackParam) ? callbackParam[0] : (callbackParam ?? '/dashboard');\n  // ↑ Если callbackUrl не задан, по умолчанию отправим пользователя на \"/dashboard\" после входа (основная страница после логина)\n\n  return (\n    <main className=\"mx-auto max-w-xl px-4 py-10\">\n      {/* Верхний блок с приветствием (визуал как в разработочной версии) */}\n      <div className=\"mb-8\">\n        <div className=\"text-lg text-neutral-600\">Гимназия № 108 имени В. Н. Татищева</div>\n        <h1 className=\"text-3xl font-semibold mt-1\">Добро пожаловать в CRM-систему</h1>\n        <div className=\"text-neutral-600 mt-2\">Необходим вход в систему</div>\n      </div>\n\n      {/* Сообщение об ошибке, если передан параметр error */}\n      {error && (\n        <p className=\"text-red-600 mb-4\">\n          Ошибка авторизации. {error === 'CredentialsSignin' ? 'Проверьте логин и пароль.' : error}\n        </p>\n      )}\n\n      {/* Форма входа (вынесена в отдельный компонент) */}\n      <SignInForm callbackUrl={callbackUrl} />\n    </main>\n  );\n}\n",
      "kind": "app-route-file",
      "routePath": "/sign-in",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/db-status/actions.ts",
      "size": 2460,
      "hash": "b7e1b502822b72af653aa4dd1fe3d1b787531b92",
      "textSample": "// app/admin/db-status/actions.ts\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { redirect } from 'next/navigation';\r\nimport bcrypt from 'bcryptjs';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { normalizeRole, Role } from '@/lib/roles';\r\n\r\n// остальной код без изменений\r\n\r\n\r\nfunction requireString(v: FormDataEntryValue | null, field: string): string {\r\n  if (typeof v !== 'string' || v.trim() === '') {\r\n    throw new Error(`Поле ${field} обязательно`);\r\n  }\r\n  return v.trim();\r\n}\r\n\r\nfunction optionalString(v: FormDataEntryValue | null): string | null {\r\n  return typeof v === 'string' && v.trim() !== '' ? v.trim() : null;\r\n}\r\n\r\nfunction pickRole(v: FormDataEntryValue | null): Role | null {\r\n  return normalizeRole(typeof v === 'string' ? v : null);\r\n}\r\n\r\nexport async function upsertUser(formData: FormData): Promise<void> {\r\n  const id = optionalString(formData.get('id'));\r\n  const name = requireString(formData.get('name'), 'name');\r\n  const username = optionalString(formData.get('username'));\r\n  const email = optionalString(formData.get('email'));\r\n  const phone = optionalString(formData.get('phone'));\r\n  const role = pickRole(formData.get('role')); // Role | null — тип совпадает с нашими предикатами\r\n\r\n  await prisma.user.upsert({\r\n    where: { id: id ?? '00000000-0000-0000-0000-000000000000' }, // заведомо несуществующий, чтобы сработал create\r\n    update: { name, username, email, phone, role },\r\n    create: {\r\n      name,\r\n      username,\r\n      email,\r\n      phone,\r\n      role,\r\n    },\r\n  });\r\n\r\n  revalidatePath('/admin/db-status');\r\n  redirect('/admin/db-status?ok=upsert');\r\n}\r\n\r\nexport async function forceResetPassword(formData: FormData): Promise<void> {\r\n  const id = requireString(formData.get('id'), 'id');\r\n  const newPassword = requireString(formData.get('newPassword'), 'newPassword');\r\n\r\n  const passwordHash = await bcrypt.hash(newPassword, 10);\r\n\r\n  await prisma.user.update({\r\n    where: { id },\r\n    data: { passwordHash },\r\n  });\r\n\r\n  revalidatePath('/admin/db-status');\r\n  redirect('/admin/db-status?ok=reset');\r\n}\r\n\r\nexport async function deleteUser(formData: FormData): Promise<void> {\r\n  const id = requireString(formData.get('id'), 'id');\r\n  await prisma.user.delete({ where: { id } });\r\n\r\n  revalidatePath('/admin/db-status');\r\n  redirect('/admin/db-status?ok=deleted');\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/db-status/page.module.css",
      "size": 2471,
      "hash": "40e6993ecd77e49aaff49149ea9e362f778345f8",
      "textSample": ".page { display:grid; gap:12px; }\r\n\r\n.head { padding:14px 16px; border-radius:16px; }\r\n.title { margin:0; font-weight:900; font-size:22px; color:#0f172a; }\r\n.subtitle { margin:6px 0 0; font-size:14px; color:#374151; }\r\n\r\n.note { padding:10px 12px; border-radius:12px; font-size:14px; }\r\n.ok { border:1px solid #c8e6c9; background:#f0fbf1; color:#166534; }\r\n.err { border:1px solid #fecaca; background:#fff1f2; color:#991b1b; }\r\n\r\n.panel { padding:12px 14px; border-radius:16px; }\r\n\r\n.h2 { margin:0 0 10px; font-size:16px; font-weight:800; color:#0f172a; }\r\n\r\n.tableWrap { padding:8px; border-radius:14px; }\r\n.table {\r\n  width:100%; border-collapse:separate; border-spacing:0; font-size:14px;\r\n}\r\n.table thead th {\r\n  text-align:left; font-weight:800; color:#0f172a; padding:8px;\r\n  border-bottom:1px solid rgba(229,231,235,.9); text-transform:none;\r\n}\r\n.table tbody td {\r\n  padding:8px; border-bottom:1px solid rgba(229,231,235,.6); color:#111827;\r\n}\r\n.table tbody tr:last-child td { border-bottom:0; }\r\n\r\n.actions { display:flex; align-items:center; gap:10px; flex-wrap:wrap; }\r\n\r\n.form { display:grid; grid-template-columns:repeat(6, minmax(0,1fr)); gap:8px; align-items:center; }\r\n\r\n.input{\r\n  border:1px solid rgba(229,231,235,.9);\r\n  background:#fff; border-radius:10px; padding:8px 10px; font-size:14px; color:#0f172a; outline:none;\r\n}\r\n.input:focus { border-color:#cfe3ff; box-shadow:0 0 0 3px rgba(207,227,255,.4); }\r\n\r\n.btn{\r\n  height:34px; border-radius:10px; padding:0 12px;\r\n  border:1px solid rgba(229,231,235,.9); background:#fff; color:#0f172a;\r\n  cursor:pointer; transition:filter 120ms ease, box-shadow 120ms ease, transform 120ms ease;\r\n  text-decoration:none;\r\n}\r\n.btn:hover { filter:brightness(.98); }\r\n.primary{ background:var(--brand); color:#fff; border-color:var(--brand); }\r\n.primary:hover{ filter:brightness(.96); }\r\n.ghost{ background:rgba(255,255,255,.6); }\r\n\r\n.glass{\r\n  background:linear-gradient(180deg,rgba(255,255,255,.68),rgba(255,255,255,.4));\r\n  backdrop-filter:saturate(180%) blur(10px);\r\n  -webkit-backdrop-filter:saturate(180%) blur(10px);\r\n  border:1px solid rgba(229,231,235,.8);\r\n  box-shadow:0 6px 16px rgba(0,0,0,.06), inset 0 1px 0 rgba(255,255,255,.35);\r\n}\r\n.glassLite{\r\n  background:rgba(255,255,255,.55);\r\n  backdrop-filter:saturate(160%) blur(6px);\r\n  -webkit-backdrop-filter:saturate(160%) blur(6px);\r\n  border:1px solid rgba(229,231,235,.7);\r\n  border-radius:14px;\r\n  box-shadow:inset 0 1px 0 rgba(255,255,255,.35);\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/db-status/page.tsx",
      "size": 4837,
      "hash": "c85238af177c625852a8a95a111ec3d09de57d03",
      "textSample": "import { prisma } from '@/lib/prisma';\r\nimport { canViewAdmin } from '@/lib/roles';\r\nimport { auth } from '@/auth.config';\r\nimport { redirect } from 'next/navigation';\r\nimport { deleteUser, forceResetPassword, upsertUser } from './actions';\r\nimport styles from './page.module.css';\r\n\r\nexport const dynamic = 'force-dynamic';\r\n\r\ntype UserRow = {\r\n  id: string;\r\n  name: string;\r\n  username: string | null;\r\n  email: string | null;\r\n  phone: string | null;\r\n  role: string | null;\r\n};\r\n\r\nexport default async function DbStatusPage(props: {\r\n  searchParams?: Promise<Record<string, string | string[] | undefined>>;\r\n}) {\r\n  const session = await auth();\r\n  const role = (session?.user as any)?.role ?? null;\r\n  if (!canViewAdmin(role)) redirect('/');\r\n\r\n  const sp = (props.searchParams ? await props.searchParams : undefined) ?? undefined;\r\n  const okParam = sp?.ok;\r\n  const errorParam = sp?.error;\r\n  const ok = Array.isArray(okParam) ? okParam[0] : okParam;\r\n  const error = Array.isArray(errorParam) ? errorParam[0] : errorParam;\r\n\r\n  const users = await prisma.user.findMany({\r\n    orderBy: { name: 'asc' },\r\n    select: { id: true, name: true, username: true, email: true, phone: true, role: true },\r\n  });\r\n\r\n  return (\r\n    <main className={styles.page}>\r\n      <header className={`${styles.glass} ${styles.head}`}>\r\n        <h1 className={styles.title}>Статус БД</h1>\r\n        <p className={styles.subtitle}>пользователей: {users.length}. подключение активно.</p>\r\n      </header>\r\n\r\n      {(ok || error) && (\r\n        <div className={`${styles.note} ${ok ? styles.ok : styles.err}`}>\r\n          {ok ? <>Готово: {ok}</> : <>Ошибка: {error}</>}\r\n        </div>\r\n      )}\r\n\r\n      <section className={styles.panel + ' ' + styles.glass}>\r\n        <h2 className={styles.h2}>пользователи</h2>\r\n        <div className={styles.tableWrap + ' ' + styles.glassLite}>\r\n          <table className={styles.table}>\r\n            <thead>\r\n              <tr>\r\n                <th>имя</th>\r\n                <th>логин</th>\r\n                <th>email</th>\r\n                <th>телефон</th>\r\n                <th>роль</th>\r\n                <th>действия</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {users.map((u: UserRow) => (\r\n                <tr key={u.id}>\r\n                  <td>{u.name}</td>\r\n                  <td>{u.username ?? '—'}</td>\r\n                  <td>{u.email ?? '—'}</td>\r\n                  <td>{u.phone ?? '—'}</td>\r\n                  <td>{u.role ?? '—'}</td>\r\n                  <td className={styles.actions}>\r\n                    <form action={deleteUser}>\r\n                      <input type=\"hidden\" name=\"id\" value={u.id} />\r\n                      <button className={`${styles.btn} ${styles.ghost}`} type=\"submit\">удалить</button>\r\n                    </form>\r\n                    <form action={forceResetPassword} className={styles.resetForm}>\r\n                      <input type=\"hidden\" name=\"id\" value={u.id} />\r\n                      <input name=\"newPassword\" placeholder=\"Новый пароль\" className={styles.input} required />\r\n                      <button className={`${styles.btn} ${styles.ghost}`} type=\"submit\">сбросить</button>\r\n                    </form>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </section>\r\n\r\n      <section className={styles.panel + ' ' + styles.glass}>\r\n        <h2 className={styles.h2}>создать/обновить пользователя</h2>\r\n        <form action={upsertUser} className={styles.form}>\r\n          <input name=\"id\" placeholder=\"id (опц.)\" className={styles.input} />\r\n          <input name=\"name\" placeholder=\"Имя\" className={styles.input} required />\r\n          <input name=\"username\" placeholder=\"Логин\" className={styles.input} />\r\n          <input name=\"email\" placeholder=\"Email\" className={styles.input} />\r\n          <input name=\"phone\" placeholder=\"Телефон\" className={styles.input} />\r\n          <select name=\"role\" className={st",
      "kind": "app-route-file",
      "routePath": "/admin/db-status",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/layout.module.css",
      "size": 788,
      "hash": "a805426b3b4c6976577cc360e42211a9453dd84c",
      "textSample": "/* app/admin/layout.module.css */\r\n.appShell {\r\n  display: grid;\r\n  grid-template-columns: 280px minmax(0, 1fr); /* синхронизировано с Sidebar */\r\n  min-height: 100dvh;\r\n  background: #f7f7f8;\r\n}\r\n\r\n.appSidebar {\r\n  position: sticky;\r\n  top: 0;\r\n  height: 100dvh;\r\n  width: 280px;          /* фиксируем контейнер */\r\n  flex: 0 0 280px;       /* запрещаем сжатие/растяжение */\r\n  overflow: hidden;      /* сайдбар без скроллов */\r\n  background: #ffffff;\r\n  border-right: 1px solid #e5e7eb;\r\n}\r\n\r\n.appMain {\r\n  min-width: 0;\r\n  height: 100dvh;\r\n  overflow: auto;        /* прокрутка только у контента */\r\n  -webkit-overflow-scrolling: touch;\r\n  padding: 16px;\r\n  background: #f7f7f8;\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/layout.tsx",
      "size": 845,
      "hash": "a8b690f7f22ed88b7ab79e8b54c8ba679391a964",
      "textSample": "// app/admin/layout.tsx\r\nimport { redirect } from 'next/navigation';\r\nimport type { ReactNode } from 'react';\r\nimport { auth } from '@/auth.config';\r\nimport { canViewAdmin, normalizeRole } from '@/lib/roles';\r\nimport Sidebar from '@/components/Sidebar';\r\nimport styles from './layout.module.css';\r\n\r\nexport const dynamic = 'force-dynamic';\r\n\r\nexport default async function AdminLayout({ children }: { children: ReactNode }) {\r\n  const session = await auth();\r\n  const role = normalizeRole((session?.user as any)?.role ?? null);\r\n\r\n  if (!session) redirect('/sign-in');\r\n  if (!canViewAdmin(role)) redirect('/');\r\n\r\n  return (\r\n    <div className={styles.appShell}>\r\n      <aside className={styles.appSidebar}>\r\n        <Sidebar />\r\n      </aside>\r\n      <main className={styles.appMain}>\r\n        {children}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/admin",
      "pageType": "layout",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/page.module.css",
      "size": 753,
      "hash": "32e89a81dbe6dcb671a42dcf96b67d831cbf3819",
      "textSample": ".page { display:grid; gap:12px; }\r\n.head { padding:14px 16px; border-radius:16px; }\r\n.title { margin:0; font-weight:900; font-size:22px; color:#0f172a; }\r\n.subtitle { margin:6px 0 0; font-size:14px; color:#374151; }\r\n\r\n.info { padding:12px 14px; border-radius:16px; }\r\n.infoRow { display:grid; grid-template-columns:140px 1fr; gap:8px; align-items:center; }\r\n.infoKey { font-weight:800; color:#0f172a; }\r\n.infoVal { color:#374151; }\r\n\r\n.glass{\r\n  background:linear-gradient(180deg,rgba(255,255,255,.68),rgba(255,255,255,.4));\r\n  backdrop-filter:saturate(180%) blur(10px);\r\n  -webkit-backdrop-filter:saturate(180%) blur(10px);\r\n  border:1px solid rgba(229,231,235,.8);\r\n  box-shadow:0 6px 16px rgba(0,0,0,.06), inset 0 1px 0 rgba(255,255,255,.35);\r\n}\r\n\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/page.tsx",
      "size": 1028,
      "hash": "bd4a7285ac2433cb92b9424539267034a7194c81",
      "textSample": "import { redirect } from 'next/navigation';\nimport { auth } from '@/auth.config';\nimport { canViewAdmin, normalizeRole } from '@/lib/roles';\nimport styles from './page.module.css';\n\nexport const dynamic = 'force-dynamic';\n\nexport default async function AdminStub() {\n  const session = await auth();\n  const role = normalizeRole((session?.user as any)?.role ?? null);\n  if (!canViewAdmin(role)) redirect('/');\n\n  return (\n    <main className={styles.page}>\n      <header className={`${styles.glass} ${styles.head}`}>\n        <h1 className={styles.title}>Администрирование</h1>\n        <p className={styles.subtitle}>доступ: {role || '—'}</p>\n      </header>\n\n      <section className={styles.info + ' ' + styles.glass}>\n        <div className={styles.infoRow}>\n          <span className={styles.infoKey}>панель</span>\n          <span className={styles.infoVal}>доступ к инструментам управления системой</span>\n        </div>\n      </section>\n    </main>\n  );\n}\n",
      "kind": "app-route-file",
      "routePath": "/admin",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/api/auth/[...nextauth]/route.ts",
      "size": 236,
      "hash": "eab432039eba77e26e308ffd0432fe36aa92dc1d",
      "textSample": "import NextAuth from \"next-auth\";\nimport { authOptions } from \"@/auth.config\";\n\nexport const runtime = \"nodejs\";\nexport const dynamic = \"force-dynamic\";\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };",
      "kind": "app-route-file",
      "routePath": "/api/auth/[...nextauth]",
      "pageType": "route",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/api/tasks/mark-done/route.ts",
      "size": 2163,
      "hash": "8b6879da07a70cd5f4ad9f3c2008d1df08c136e8",
      "textSample": "// app/api/tasks/mark-done/route.ts\r\nimport { NextResponse } from 'next/server';\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { revalidatePath } from 'next/cache';\r\n\r\nfunction revalidateAll() {\r\n  revalidatePath('/inboxtasks');\r\n  revalidatePath('/inboxtasks/archive');\r\n  revalidatePath('/calendar');\r\n  revalidatePath('/'); // на случай счётчиков\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const session = await auth();\r\n    const meId = session?.user?.id ?? null;\r\n    if (!meId) {\r\n      return NextResponse.json({ ok: false, error: 'UNAUTHORIZED' }, { status: 401 });\r\n    }\r\n\r\n    // поддержка form POST (из <form method=\"post\">)\r\n    const contentType = req.headers.get('content-type') || '';\r\n    let taskId = '';\r\n\r\n    if (contentType.includes('application/x-www-form-urlencoded') || contentType.includes('multipart/form-data')) {\r\n      const fd = await req.formData();\r\n      taskId = String(fd.get('taskId') ?? '').trim();\r\n    } else if (contentType.includes('application/json')) {\r\n      const body = await req.json().catch(() => ({}));\r\n      taskId = String(body.taskId ?? '').trim();\r\n    } else {\r\n      // fallback, попробуем formData\r\n      const fd = await req.formData().catch(() => null);\r\n      if (fd) taskId = String(fd.get('taskId') ?? '').trim();\r\n    }\r\n\r\n    if (!taskId) {\r\n      return NextResponse.json({ ok: false, error: 'NO_TASK_ID' }, { status: 400 });\r\n    }\r\n\r\n    // обновляем только своё назначение и только если оно активно\r\n    await prisma.taskAssignee.updateMany({\r\n      where: { taskId, userId: meId, status: 'in_progress' },\r\n      data: { status: 'done', completedAt: new Date() },\r\n    });\r\n\r\n    revalidateAll();\r\n\r\n    // 303 на календарь, чтобы сразу увидеть эффект\r\n    const url = new URL('/calendar', req.url);\r\n    return NextResponse.redirect(url, { status: 303 });\r\n  } catch (e) {\r\n    console.error('mark-done POST error', e);\r\n    return NextResponse.json({ ok: false, error: 'INTERNAL' }, { status: 500 });\r\n  }\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/api/tasks/mark-done",
      "pageType": "route",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/layout.tsx",
      "size": 708,
      "hash": "740eb3443028e26ea167522a7fe0b48f3b43bdd1",
      "textSample": "// app/layout.tsx\nimport type { ReactNode } from 'react';\nimport Providers from './providers';\nimport '@/styles/globals.css';\n\nexport const metadata = { title: 'G108 CRM' };\n\n// Глобальный SSE-клиент\nimport Live from '@/app/(app)/chat/live';\nimport { auth } from '@/auth.config';\n\nexport const dynamic = 'force-dynamic';\nexport const revalidate = 0;\n\nexport default async function RootLayout({ children }: { children: ReactNode }) {\n  const session = await auth();\n  const uid = (session?.user as any)?.id as string | undefined;\n\n  return (\n    <html lang=\"ru\">\n      <body>\n        <Providers>{children}</Providers>\n        {uid ? <Live uid={uid} /> : null}\n      </body>\n    </html>\n  );\n}\n",
      "kind": "app-route-file",
      "routePath": "/",
      "pageType": "layout",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": true
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/page.tsx",
      "size": 205,
      "hash": "5eb1ac80e3d2ca8ed05e3850f2170dd04ad12c88",
      "textSample": "import { redirect } from 'next/navigation';\nimport { auth } from '@/auth.config';\n\nexport default async function Home() {\n  const session = await auth();\n  redirect(session ? '/dashboard' : '/sign-in');\n}\n",
      "kind": "app-route-file",
      "routePath": "/",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/providers.tsx",
      "size": 270,
      "hash": "6f24d8c14c264c01749f0c6317fff154f522ed39",
      "textSample": "// app/providers.tsx\r\n'use client';\r\n\r\nimport { SessionProvider } from 'next-auth/react';\r\nimport type { ReactNode } from 'react';\r\n\r\nexport default function Providers({ children }: { children: ReactNode }) {\r\n  return <SessionProvider>{children}</SessionProvider>;\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "auth.config.ts",
      "size": 2068,
      "hash": "0b09431572823c351d9aaa7c964cfeb810699a20",
      "textSample": "// auth.config.ts\nimport type { NextAuthOptions, DefaultSession } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { getServerSession } from 'next-auth';\nimport { compare } from 'bcryptjs';\nimport { prisma } from '@/lib/prisma';\n\ndeclare module 'next-auth' {\n  interface Session extends DefaultSession {\n    user: DefaultSession['user'] & { id: string; role: string | null };\n  }\n  // при необходимости можно расширить тип User тут\n}\n\nexport const authOptions: NextAuthOptions = {\n  session: { strategy: 'jwt' },\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        username: { label: 'Логин или Email', type: 'text' },\n        password: { label: 'Пароль', type: 'password' },\n      },\n      async authorize(credentials) {\n        if (!credentials?.username || !credentials?.password) return null;\n\n        const user =\n          (await prisma.user.findFirst({\n            where: {\n              OR: [\n                { username: credentials.username },\n                { email: credentials.username },\n              ],\n            },\n          })) || null;\n\n        if (!user?.passwordHash) return null;\n\n        const ok = await compare(credentials.password, user.passwordHash);\n        if (!ok) return null;\n\n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email ?? undefined,\n          role: user.role ?? null,\n        } as any;\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.uid = (user as any).id;\n        token.role = (user as any).role ?? null;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        (session.user as any).id = token.uid as string;\n        (session.user as any).role = (token as any).role ?? null;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: '/sign-in',\n  },\n};\n\nexport async function auth() {\n  return getServerSession(authOptions);\n}\n",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "cascade_user_delete.sql",
      "size": 0,
      "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
      "textSample": "",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/AddUserModal.tsx",
      "size": 782,
      "hash": "61ad018a62ab4894627acdc1d669eeb6646f76bf",
      "textSample": "'use client';\r\n\r\nimport React from 'react';\r\nimport Modal from './Modal';\r\nimport UserForm from './UserForm';\r\n\r\nexport default function AddUserModal({ action }: { action: (fd: FormData) => Promise<void> }) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={() => setOpen(true)}\r\n        style={{\r\n          height: 36, padding: '6px 12px', borderRadius: 10,\r\n          border: '1px solid #8d2828', background: '#8d2828', color: '#fff', cursor: 'pointer'\r\n        }}\r\n      >\r\n        добавить\r\n      </button>\r\n\r\n      <Modal open={open} onClose={() => setOpen(false)} title=\"Создать пользователя\" width={780}>\r\n        <UserForm action={action} mode=\"create\" />\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/ConfirmDeleteUser.tsx",
      "size": 2079,
      "hash": "6e98009edc6d92234768561bcc40b50f839a0de7",
      "textSample": "'use client';\r\n\r\nimport React from 'react';\r\nimport Modal from './Modal';\r\n\r\nexport default function ConfirmDeleteUser({\r\n  userId,\r\n  userName,\r\n  action,\r\n}: {\r\n  userId: string;\r\n  userName: string;\r\n  action: (fd: FormData) => Promise<void>;\r\n}) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => setOpen(true)}\r\n        style={{ height: 32, padding: '4px 10px', borderRadius: 10, border: '1px solid #ef4444', background: '#fff', color: '#b91c1c', cursor: 'pointer' }}\r\n      >\r\n        удалить\r\n      </button>\r\n\r\n      <Modal open={open} onClose={() => setOpen(false)} title=\"Удаление пользователя\" width={560}>\r\n        <div style={{ display: 'grid', gap: 12 }}>\r\n          <p style={{ margin: 0 }}>\r\n            Вы точно хотите удалить «{userName}»? Это безвозвратно сотрёт связанные объекты: сообщения, треды, отметки о прочтении, назначения в задачах и членство в группах.\r\n          </p>\r\n          <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 8 }}>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => setOpen(false)}\r\n              style={{ height: 32, padding: '4px 10px', borderRadius: 10, border: '1px solid rgba(229,231,235,.9)', background: '#fff', cursor: 'pointer' }}\r\n            >\r\n              отмена\r\n            </button>\r\n\r\n            <form action={action} onSubmit={() => setOpen(false)}>\r\n              <input type=\"hidden\" name=\"id\" value={userId} />\r\n              <button\r\n                type=\"submit\"\r\n                style={{ height: 32, padding: '4px 10px', borderRadius: 10, border: '1px solid #ef4444', background: '#b91c1c', color: '#fff', cursor: 'pointer' }}\r\n              >\r\n                удалить безвозвратно\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/EditUserModal.tsx",
      "size": 952,
      "hash": "be1a0e236c06356a2d79f6d87535a905361b27dc",
      "textSample": "'use client';\r\n\r\nimport React from 'react';\r\nimport Modal from './Modal';\r\nimport UserForm, { UserFormInitials } from './UserForm';\r\n\r\nexport default function EditUserModal({\r\n  action, userId, initial,\r\n}: {\r\n  action: (fd: FormData) => Promise<void>;\r\n  userId: string;\r\n  initial: UserFormInitials & { name: string };\r\n}) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={() => setOpen(true)}\r\n        style={{\r\n          height: 32, padding: '4px 10px', borderRadius: 10,\r\n          border: '1px solid rgba(229,231,235,.9)', background: '#fff', cursor: 'pointer'\r\n        }}\r\n      >\r\n        редактировать\r\n      </button>\r\n\r\n      <Modal open={open} onClose={() => setOpen(false)} title={`Редактировать: ${initial.name}`} width={780}>\r\n        <UserForm action={action} mode=\"edit\" initialId={userId} initialValues={initial} />\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/GroupsBoard.tsx",
      "size": 27779,
      "hash": "ebe7f138dcc1f90f33b216f6056b437403c6a1c8",
      "textSample": "'use client';\r\n\r\nimport React from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport {\r\n  createGroup, renameGroup, deleteGroup,\r\n  addUsersToGroup, removeUserFromGroup, fetchGroupMembers,\r\n  createSubject, renameSubject, deleteSubject,\r\n  addUsersToSubject, removeUserFromSubject, fetchSubjectMembers,\r\n} from '@/app/(app)/groups/actions';\r\nimport UrlSearchBox from '@/app/(app)/groups/groups-search-client';\r\n\r\ntype SimpleUser = { id: string; name: string | null; role?: string | null };\r\ntype Group = { id: string; name: string };\r\ntype Subject = { id: string; name: string; count: number };\r\n\r\nexport default function GroupsBoard(props: {\r\n  initialUsers: SimpleUser[];\r\n  initialGroups: Group[];\r\n  initialSubjects: Subject[];\r\n  subjectsEnabled?: boolean;\r\n}) {\r\n  const router = useRouter();\r\n  const subjectsEnabled = props.subjectsEnabled ?? true;\r\n\r\n  const [tab, setTab] = React.useState<'groups' | 'subjects'>('groups');\r\n\r\n  // пользователи/группы/предметы (как пришли с сервера)\r\n  const [users] = React.useState<SimpleUser[]>(props.initialUsers);\r\n  const [groups, setGroups] = React.useState<Group[]>(props.initialGroups);\r\n  const [subjects, setSubjects] = React.useState<Subject[]>(props.initialSubjects);\r\n\r\n  // выборы\r\n  const [selUserIds, setSelUserIds] = React.useState<string[]>([]);\r\n  const [selGroupId, setSelGroupId] = React.useState<string | null>(null);\r\n  const [selSubjectId, setSelSubjectId] = React.useState<string | null>(null);\r\n\r\n  const [groupMembers, setGroupMembers] = React.useState<{ userId: string; name: string | null }[]>([]);\r\n  const [subjectMembers, setSubjectMembers] = React.useState<{ userId: string; name: string | null }[]>([]);\r\n\r\n  // поля модалок\r\n  const [groupNameInput, setGroupNameInput] = React.useState<string>('');\r\n  const [mCreateGroup, setMCreateGroup] = React.useState<boolean>(false);\r\n  const [mRenameGroup, setMRenameGroup] = React.useState<boolean>(false);\r\n  const [mDeleteGroup, setMDeleteGroup] = React.useState<boolean>(false);\r\n\r\n  const [subjectNameInput, setSubjectNameInput] = React.useState<string>('');\r\n  const [mCreateSubject, setMCreateSubject] = React.useState<boolean>(false);\r\n  const [mRenameSubject, setMRenameSubject] = React.useState<boolean>(false);\r\n  const [mDeleteSubject, setMDeleteSubject] = React.useState<boolean>(false);\r\n\r\n  // локальные поисковые состояния для групп и предметов (как в TaskForm)\r\n  const [groupQuery, setGroupQuery] = React.useState('');\r\n  const [groupFound, setGroupFound] = React.useState<Group[]>([]);\r\n  const [groupDdOpen, setGroupDdOpen] = React.useState(false);\r\n\r\n  const [subjectQuery, setSubjectQuery] = React.useState('');\r\n  const [subjectFound, setSubjectFound] = React.useState<Subject[]>([]);\r\n  const [subjectDdOpen, setSubjectDdOpen] = React.useState(false);\r\n\r\n  function norm(s: string) {\r\n    return s.toLocaleLowerCase('ru-RU').replace(/\\s+/g, ' ').trim();\r\n  }\r\n\r\n  function runGroupSearch(q: string) {\r\n    setGroupQuery(q);\r\n    const s = norm(q);\r\n    if (!s) { setGroupFound([]); return; }\r\n    const res = groups.filter(g => g.name.toLocaleLowerCase('ru-RU').includes(s)).slice(0, 60);\r\n    setGroupFound(res);\r\n  }\r\n\r\n  function runSubjectSearch(q: string) {\r\n    setSubjectQuery(q);\r\n    const s = norm(q);\r\n    if (!s) { setSubjectFound([]); return; }\r\n    const res = subjects.filter(x => x.name.toLocaleLowerCase('ru-RU').includes(s)).slice(0, 60);\r\n    setSubjectFound(res);\r\n  }\r\n\r\n  function toggleUser(id: string) {\r\n    setSelUserIds((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]));\r\n  }\r\n\r\n  // UI helpers\r\n  const BRAND = '#8d2828';\r\n  function Primary(props: React.PropsWithChildren<{ onClick?: () => void; disabled?: boolean; danger?: boolean }>) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        onClick={props.onClick}\r\n        disabled={props.disabled}\r\n        style={{\r\n          height: 32, padding: '0 12px', borderRadius: 10,\r\n          border: `1px solid ${props.danger ? BR",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/Modal.tsx",
      "size": 2002,
      "hash": "5bb5b6434c7af53e8683a2b750b69fc0385677b3",
      "textSample": "'use client';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nexport default function Modal({\r\n  open, onClose, title, width = 780, children,\r\n}: { open: boolean; onClose: () => void; title?: string; width?: number; children: React.ReactNode }) {\r\n  const [mounted, setMounted] = useState(false);\r\n  useEffect(() => setMounted(true), []);\r\n  if (!open || !mounted) return null;\r\n\r\n  return createPortal(\r\n    <div\r\n      onClick={onClose}\r\n      style={{\r\n        position: 'fixed', inset: 0, zIndex: 50,\r\n        background: 'rgba(0,0,0,.44)',\r\n        display: 'flex', alignItems: 'center', justifyContent: 'center',\r\n        padding: 12,\r\n      }}\r\n    >\r\n      <div\r\n        onClick={(e) => e.stopPropagation()}\r\n        style={{\r\n          width, maxWidth: '96vw',\r\n          borderRadius: 18,\r\n          border: '1px solid rgba(229,231,235,.85)',\r\n          background: 'linear-gradient(180deg, rgba(255,255,255,0.68), rgba(255,255,255,0.42))',\r\n          backdropFilter: 'saturate(180%) blur(14px)',\r\n          WebkitBackdropFilter: 'saturate(180%) blur(14px)',\r\n          boxShadow: '0 18px 48px rgba(0,0,0,.18), inset 0 1px 0 rgba(255,255,255,.35)',\r\n          overflow: 'hidden',\r\n        }}\r\n      >\r\n        <div style={{ padding: '14px 16px', borderBottom: '1px solid rgba(229,231,235,.9)' }}>\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <h3 style={{ margin: 0, fontSize: 18, fontWeight: 900, color: '#0f172a', flex: 1 }}>{title}</h3>\r\n            <button\r\n              onClick={onClose}\r\n              aria-label=\"Закрыть\"\r\n              style={{\r\n                height: 36, width: 36, borderRadius: 12,\r\n                border: '1px solid rgba(229,231,235,.9)', background: '#fff', cursor: 'pointer'\r\n              }}\r\n            >×</button>\r\n          </div>\r\n        </div>\r\n        <div style={{ padding: 16 }}>{children}</div>\r\n      </div>\r\n    </div>,\r\n    document.body\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/Providers.tsx",
      "size": 182,
      "hash": "a6652d3615325982b87739ae4065cba049832f33",
      "textSample": "// components/Providers.tsx\n'use client';\n\nimport { ReactNode } from 'react';\n\nexport default function Providers({ children }: { children: ReactNode }) {\n  return <>{children}</>;\n}\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/Sidebar.tsx",
      "size": 11423,
      "hash": "fb5a7ec9f57af5248b8fc1b4bf8b1d71448f644c",
      "textSample": "// components/Sidebar.tsx\n'use client';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { useSession, signOut } from 'next-auth/react';\nimport { useEffect, useState } from 'react';\n\nconst BRAND = '#8d2828';\n\nconst ROLE_RU: Record<string, string> = {\n  admin: 'Администратор',\n  director: 'Директор',\n  deputy_plus: 'Заместитель +',\n  deputy: 'Заместитель',\n  teacher_plus: 'Педагог +',\n  teacher: 'Педагог',\n};\n\nfunction splitFio(full?: string | null) {\n  const s = (full || '').trim();\n  if (!s) return { last: 'ГОСТЬ', rest: '' };\n  const p = s.split(/\\s+/);\n  if (p.length >= 2) return { last: (p[0] || '').toUpperCase(), rest: p.slice(1).join(' ') };\n  return { last: s.toUpperCase(), rest: '' };\n}\n\nfunction Tile({\n  href, label, active, unread,\n}: { href: string; label: string; active?: boolean; unread?: number }) {\n  const showBadge = typeof unread === 'number' && unread > 0 && !active;\n  const isSingleLongWord = !/\\s/.test(label) && label.length >= 9;\n  return (\n    <Link href={href} className=\"navlink\" aria-current={active ? 'true' : undefined}>\n      <div className={`tile glass ${active ? 'active' : ''} ${showBadge ? 'unread' : ''}`}>\n        <span className={`label ${isSingleLongWord ? 'label--single' : 'label--multi'}`}>{label.toLowerCase()}</span>\n        {showBadge ? <span className=\"badge\">{unread! > 99 ? '99+' : unread}</span> : null}\n      </div>\n      <style jsx>{`\n        .navlink { display:block; text-decoration:none !important; }\n        .tile { position: relative; display: grid; place-items: center; text-align: center; width: 78%; margin: 0 auto;\n                aspect-ratio: 1 / 1; border-radius: 14px; border: 1px solid rgba(229,231,235,.8); overflow: hidden;\n                cursor: pointer; transition: transform .12s, border-color .12s, box-shadow .12s; }\n        .glass { background: linear-gradient(180deg, rgba(255,255,255,.68), rgba(255,255,255,.4));\n                 backdrop-filter: saturate(180%) blur(10px); -webkit-backdrop-filter: saturate(180%) blur(10px);\n                 box-shadow: 0 4px 12px rgba(0,0,0,.06), inset 0 1px 0 rgba(255,255,255,.35); }\n        .tile::before { content: \"\"; position: absolute; inset: -35% -35% auto -35%; height: 55%;\n                        background: radial-gradient(120px 40px at 10% 0%, rgba(255,255,255,.55), rgba(255,255,255,0) 60%),\n                                    linear-gradient(90deg, rgba(255,255,255,.35), rgba(255,255,255,0.06));\n                        opacity: 0; transform: translateY(-10%); transition: opacity .16s, transform .2s; z-index:1; }\n        .tile:hover { transform: translateY(-1px); border-color:#cfe3ff; box-shadow:0 8px 18px rgba(0,0,0,.08); }\n        .tile:hover::before { opacity: 1; transform: translateY(0); }\n        .tile.active { outline: 2px solid rgba(207,227,255,.9); }\n        .tile.unread::after { content:\"\"; position:absolute; left:0; top:0; height:3px; width:100%; background:#ef9b28; z-index:2; }\n        .label { position:relative; z-index:3; color:#0f172a; font-weight:700; line-height:1.08;\n                 display:-webkit-box; -webkit-box-orient:vertical; overflow:hidden; line-clamp: 2; -webkit-line-clamp: 2; }\n        .label--multi { font-size:12px; letter-spacing:.01em; }\n        .label--single { font-size:11px; letter-spacing:.01em; font-stretch:95%; }\n        .badge { position:absolute; right:6px; top:6px; font-size:10.5px; line-height:18px; min-width:22px; text-align:center;\n                 padding:0 6px; border-radius:9999px; background:${BRAND}; color:#fff; font-weight:800; box-shadow:0 1px 4px rgba(0,0,0,.12); }\n      `}</style>\n    </Link>\n  );\n}\n\nexport default function Sidebar({\n  unreadChats = 0,\n  // НОВОЕ: счётчик задач по образцу сообщений\n  unreadTasks = 0,\n}: {\n  unreadChats?: number;\n  unreadTasks?: number;\n}) {\n  const pathname = usePathname();\n  const { data } = useSession();\n  const authed = Boolean(data?.user);\n  const roleSlug = (data?.user as any)?.role as string | null;\n  co",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/TaskPopover.tsx",
      "size": 7487,
      "hash": "c8e82ec203f4b6a4638412f1a674f3bc5fcb2a8e",
      "textSample": "'use client';\r\n\r\nimport React from 'react';\r\nimport Link from 'next/link';\r\n\r\ntype TaskAssignee = { userId?: string; status?: string | null; user?: { id: string } | null };\r\ntype Task = {\r\n  id: string;\r\n  title: string;\r\n  description?: string | null;\r\n  dueDate?: string | null;\r\n  priority?: 'high' | 'normal' | string | null;\r\n  hidden?: boolean | null;\r\n  createdById?: string | null;\r\n  seq?: number | null;\r\n  assignees?: TaskAssignee[];\r\n};\r\n\r\ntype SimpleUser = { id: string; name: string | null; role?: string | null; roleSlug?: string | null };\r\n\r\nexport default function TaskPopover(props: {\r\n  anchor: DOMRect | null;\r\n  onClose: () => void;\r\n  task: Task;\r\n  users: SimpleUser[];\r\n  meId: string;\r\n  brand: string;\r\n  okColor: string;\r\n  borderColor: string;\r\n  text1: string;\r\n  text2: string;\r\n  bgSoft: string;\r\n  onMarked?: () => void;\r\n}) {\r\n  const { anchor, onClose, task: t, users, meId, brand, okColor, borderColor, text1, text2, bgSoft, onMarked } = props;\r\n\r\n  const ref = React.useRef<HTMLDivElement | null>(null);\r\n  const [pos, setPos] = React.useState<{ left: number; top: number }>({ left: 0, top: 0 });\r\n\r\n  React.useLayoutEffect(() => {\r\n    const pad = 12;\r\n    const el = ref.current;\r\n    if (!anchor || !el) return;\r\n    let left = anchor.left;\r\n    let top = anchor.bottom + 6;\r\n    const { innerWidth: vw, innerHeight: vh } = window;\r\n    const rect = el.getBoundingClientRect();\r\n    if (left + rect.width + pad > vw) left = Math.max(pad, vw - rect.width - pad);\r\n    if (top + rect.height + pad > vh) {\r\n      const above = anchor.top - 6 - rect.height;\r\n      top = Math.max(pad, above);\r\n    }\r\n    if (top < pad) top = pad;\r\n    if (left < pad) left = pad;\r\n    setPos({ left, top });\r\n  }, [anchor, t?.id]);\r\n\r\n  React.useEffect(() => {\r\n    const onDown = () => onClose();\r\n    window.addEventListener('mousedown', onDown);\r\n    return () => window.removeEventListener('mousedown', onDown);\r\n  }, [onClose]);\r\n\r\n  const usersById = React.useMemo(() => {\r\n    const m = new Map<string, string>();\r\n    (users || []).forEach(u => { if (u.id) m.set(u.id, u.name || u.id); });\r\n    return m;\r\n  }, [users]);\r\n\r\n  const assignedBy = t.createdById ? (usersById.get(t.createdById) ?? t.createdById) : 'неизвестно';\r\n  const assigneesResolved = React.useMemo(() => {\r\n    if (!Array.isArray(t.assignees)) return [];\r\n    return t.assignees.map(a => {\r\n      const id = a.userId ?? a.user?.id ?? '';\r\n      const name = usersById.get(id) || id;\r\n      return { id, name, done: a.status === 'done' };\r\n    });\r\n  }, [t, usersById]);\r\n\r\n  const myRecord = React.useMemo(() => {\r\n    if (!Array.isArray(t.assignees)) return null;\r\n    return t.assignees.find(a => (a.userId ?? a.user?.id) === meId) ?? null;\r\n  }, [t, meId]);\r\n\r\n  const canMarkDone = !!myRecord && myRecord.status !== 'done';\r\n\r\n  async function markDone() {\r\n    try {\r\n      const res = await fetch(`/api/tasks/${t.id}/assignees/${meId}`, {\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ status: 'done' }),\r\n      });\r\n      if (!res.ok) {\r\n        const msg = await res.text().catch(() => '');\r\n        alert(`Не удалось отметить выполненной${msg ? `: ${msg}` : ''}`);\r\n        return;\r\n      }\r\n      onMarked?.();\r\n      onClose();\r\n    } catch {\r\n      // ignore\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      style={{\r\n        position: 'fixed',\r\n        left: pos.left,\r\n        top: pos.top,\r\n        zIndex: 10000,\r\n        background: '#fff',\r\n        border: `1px solid ${borderColor}`,\r\n        borderRadius: 12,\r\n        boxShadow: '0 16px 40px rgba(0,0,0,0.2)',\r\n        padding: 12,\r\n        maxWidth: 520,\r\n      }}\r\n    >\r\n      <div style={{ fontWeight: 800, fontSize: 16, marginBottom: 8 }}>{t.title}</div>\r\n\r\n      <Row label=\"Назначил\" text1={text1} text2={text2}>\r\n        <span style={{ fontWeight: 700, color: text1 }}>{assignedBy}</span>\r\n      </Row>\r\n\r\n      <Row label=\"Срок\" text1={text1} ",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/UnreadBadgeClient.tsx",
      "size": 662,
      "hash": "3ab92f9f783e4c0363fbc0164004745e08f5cc51",
      "textSample": "//'use client'\r\n'use client';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function UnreadBadgeClient({ initial }: { initial: number }) {\r\n  const [n, setN] = useState(initial);\r\n\r\n  useEffect(() => {\r\n    const onBump = () => setN(x => x + 1);\r\n    window.addEventListener('app:unread-bump', onBump as any);\r\n    return () => window.removeEventListener('app:unread-bump', onBump as any);\r\n  }, []);\r\n\r\n  return (\r\n    <span style={{\r\n      display:'inline-block', fontSize:12, padding:'3px 8px', borderRadius:9999,\r\n      background:'#f3f4f6', border:'1px solid rgba(229,231,235,.85)', marginLeft:8\r\n    }}>\r\n      {n}\r\n    </span>\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/UserForm.tsx",
      "size": 4607,
      "hash": "66d6a3a4738cda98616794b45689d5c495df43bd",
      "textSample": "'use client';\r\n\r\nimport React from 'react';\r\n\r\nconst BORDER = 'rgba(229,231,235,.9)';\r\nconst BRAND = '#8d2828';\r\n\r\nconst inp: React.CSSProperties = {\r\n  height: 36, fontSize: 14, padding: '6px 10px',\r\n  borderRadius: 10, border: `1px solid ${BORDER}`, background: '#fff', outline: 'none',\r\n};\r\nconst btnPrimary: React.CSSProperties = {\r\n  height: 36, padding: '6px 12px', borderRadius: 10,\r\n  border: `1px solid ${BRAND}`, background: BRAND, color: '#fff', cursor: 'pointer',\r\n};\r\n\r\nexport type UserFormInitials = {\r\n  name?: string; username?: string; email?: string; phone?: string; classroom?: string;\r\n  role?: string; birthday?: string; telegram?: string; about?: string;\r\n  notifyEmail?: boolean; notifyTelegram?: boolean;\r\n};\r\n\r\ntype Lockable =\r\n  | 'name' | 'username' | 'classroom' | 'role' | 'birthday';\r\n\r\nexport default function UserForm({\r\n  action, mode, initialId, initialValues, disabledFields,\r\n}: {\r\n  action: (fd: FormData) => Promise<void>;\r\n  mode: 'create' | 'edit';\r\n  initialId?: string;\r\n  initialValues?: UserFormInitials;\r\n  disabledFields?: Partial<Record<Lockable, boolean>>;\r\n}) {\r\n  const lock = (k: Lockable) => !!disabledFields?.[k];\r\n\r\n  return (\r\n    <form action={action}>\r\n      {mode === 'edit' && <input type=\"hidden\" name=\"id\" defaultValue={initialId} />}\r\n\r\n      <div style={{ display: 'grid', gap: 12, gridTemplateColumns: 'repeat(2, minmax(0, 1fr))' }}>\r\n        <Field label=\"ФИО\"><input name=\"name\" defaultValue={initialValues?.name} style={inp} required disabled={lock('name')} /></Field>\r\n        <Field label=\"Логин\"><input name=\"username\" defaultValue={initialValues?.username} style={inp} disabled={lock('username')} /></Field>\r\n\r\n        <Field label=\"E-mail\"><input name=\"email\" type=\"email\" defaultValue={initialValues?.email} style={inp} /></Field>\r\n        <Field label=\"Телефон\"><input name=\"phone\" defaultValue={initialValues?.phone} style={inp} /></Field>\r\n\r\n        <Field label=\"Классное руководство\"><input name=\"classroom\" defaultValue={initialValues?.classroom} style={inp} disabled={lock('classroom')} /></Field>\r\n        <Field label=\"Роль\">\r\n          <select name=\"role\" defaultValue={initialValues?.role ?? 'teacher'} style={inp} disabled={lock('role')}>\r\n            <option value=\"director\">Директор</option>\r\n            <option value=\"deputy_plus\">Заместитель +</option>\r\n            <option value=\"deputy\">Заместитель</option>\r\n            <option value=\"teacher_plus\">Педагог +</option>\r\n            <option value=\"teacher\">Педагог</option>\r\n          </select>\r\n        </Field>\r\n\r\n        <Field label=\"Дата рождения\"><input name=\"birthday\" type=\"date\" defaultValue={initialValues?.birthday} style={inp} disabled={lock('birthday')} /></Field>\r\n        <Field label=\"Telegram\"><input name=\"telegram\" defaultValue={initialValues?.telegram} style={inp} /></Field>\r\n\r\n        <div style={{ gridColumn: '1 / -1' }}>\r\n          <Field label=\"О себе\">\r\n            <textarea name=\"about\" defaultValue={initialValues?.about} style={{ ...inp, minHeight: 96 }} />\r\n          </Field>\r\n        </div>\r\n\r\n        {mode === 'create'\r\n          ? <Field label=\"Пароль (при создании)\"><input name=\"password\" type=\"password\" style={inp} /></Field>\r\n          : <Field label=\"Новый пароль (опционально)\"><input name=\"newPassword\" type=\"password\" style={inp} /></Field>\r\n        }\r\n\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>\r\n          <label style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\r\n            <input type=\"checkbox\" name=\"notifyEmail\" defaultChecked={!!initialValues?.notifyEmail} />\r\n            уведомлять по e-mail\r\n          </label>\r\n          <label style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\r\n            <input type=\"checkbox\" name=\"notifyTelegram\" defaultChecked={!!initialValues?.notifyTelegram} />\r\n            уведомлять в telegram\r\n          </label>\r\n        </div>\r\n\r\n        <div style={{ gridColumn: '1 / -1', display: 'flex', justifyContent: 'flex-end',",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/UserMenu.tsx",
      "size": 300,
      "hash": "a64e68b57220dfa2f053c90826f55e51b3e04706",
      "textSample": "// components/UserMenu.tsx\r\n'use client';\r\n\r\nimport { signOut } from 'next-auth/react';\r\n\r\nexport default function UserMenu() {\r\n  return (\r\n    <button\r\n      onClick={() => signOut({ callbackUrl: '/sign-in' })}\r\n      className=\"underline text-sm\"\r\n    >\r\n      Выход\r\n    </button>\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/search/SearchProvider.tsx",
      "size": 2664,
      "hash": "6e5858f473dd79537daf2321d582811bd6e077c2",
      "textSample": "/* components/search/SearchProvider.tsx */\r\n'use client';\r\n\r\nimport { createContext, use, useContext, useMemo, useState, useDeferredValue, startTransition } from 'react';\r\nimport type { SearchItem, SearchKind } from '@/lib/search/types';\r\n\r\ntype Ctx = {\r\n  items: SearchItem[];\r\n  query: string;\r\n  setQuery: (q: string) => void;\r\n  kinds?: ReadonlyArray<SearchKind>;\r\n  results: SearchItem[];\r\n  filterKinds: (kinds: ReadonlyArray<SearchKind>) => void;\r\n};\r\n\r\nconst SearchCtx = createContext<Ctx | null>(null);\r\n\r\nexport function SearchProvider(props: { items: SearchItem[]; kinds?: ReadonlyArray<SearchKind>; children: React.ReactNode }) {\r\n  const [query, setQueryState] = useState('');\r\n  const [kinds, setKinds] = useState<ReadonlyArray<SearchKind> | undefined>(props.kinds);\r\n\r\n  function setQuery(q: string) {\r\n    // не дергаем синхронно рендер дерева — позволяем браузеру не терять каретку\r\n    startTransition(() => setQueryState(q));\r\n  }\r\n\r\n  const norm = (s: string) => s.toLowerCase();\r\n\r\n  const deferred = useDeferredValue(query);\r\n  const results = useMemo(() => {\r\n    const q = norm(deferred).trim();\r\n    if (!q) {\r\n      // пустой запрос — показываем первые N каждого типа\r\n      const cap = 8;\r\n      const byKind = new Map<SearchKind, number>();\r\n      const out: SearchItem[] = [];\r\n      for (const it of props.items) {\r\n        if (kinds && !kinds.includes(it.kind)) continue;\r\n        const used = byKind.get(it.kind) ?? 0;\r\n        if (used < cap) {\r\n          out.push(it);\r\n          byKind.set(it.kind, used + 1);\r\n        }\r\n      }\r\n      return out;\r\n    }\r\n    // простой и быстрый contains + starts-with буст\r\n    const arr = kinds ? props.items.filter(it => kinds.includes(it.kind)) : props.items;\r\n    const starts: SearchItem[] = [];\r\n    const contains: SearchItem[] = [];\r\n    for (const it of arr) {\r\n      const s = it.q;\r\n      if (s.startsWith(q)) starts.push(it);\r\n      else if (s.includes(q)) contains.push(it);\r\n      if (starts.length + contains.length > 200) break; // отсечка безопасности\r\n    }\r\n    return [...starts, ...contains];\r\n  }, [deferred, props.items, kinds]);\r\n\r\n  const value: Ctx = {\r\n    items: props.items,\r\n    query,\r\n    setQuery,\r\n    kinds,\r\n    results,\r\n    filterKinds: setKinds,\r\n  };\r\n\r\n  return <SearchCtx.Provider value={value}>{props.children}</SearchCtx.Provider>;\r\n}\r\n\r\nexport function useSearch() {\r\n  const ctx = useContext(SearchCtx);\r\n  if (!ctx) throw new Error('useSearch must be used within <SearchProvider>');\r\n  return ctx;\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/search/UniversalSearchInput.tsx",
      "size": 2297,
      "hash": "76f5e53865a9ce1a0f2a88dfb0f4eca009f87dae",
      "textSample": "/* components/search/UniversalSearchInput.tsx */\r\n'use client';\r\n\r\nimport { useRef, useState } from 'react';\r\nimport { useSearch } from './SearchProvider';\r\nimport type { SearchKind, SearchItem } from '@/lib/search/types';\r\n\r\nexport function UniversalSearchInput(props: {\r\n  placeholder?: string;\r\n  onSelect: (item: SearchItem) => void;\r\n  allowKinds?: ReadonlyArray<SearchKind>; // если надо сузить типы «на лету»\r\n  autoFocus?: boolean;\r\n}) {\r\n  const { query, setQuery, results } = useSearch();\r\n  const [open, setOpen] = useState(false);\r\n  const composingRef = useRef(false);\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setOpen(true);\r\n    setQuery(e.target.value);\r\n  }\r\n\r\n  function onKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\r\n    if (e.key === 'Escape') {\r\n      setOpen(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <input\r\n        className=\"w-full rounded-xl border px-3 py-2 text-sm\"\r\n        placeholder={props.placeholder ?? 'Поиск…'}\r\n        value={query}\r\n        autoFocus={props.autoFocus}\r\n        onChange={onChange}\r\n        onKeyDown={onKeyDown}\r\n        onCompositionStart={() => (composingRef.current = true)}\r\n        onCompositionEnd={() => (composingRef.current = false)}\r\n      />\r\n      {open && results.length > 0 && (\r\n        <div className=\"absolute z-50 mt-1 w-full rounded-xl border bg-white shadow-lg max-h-80 overflow-auto\">\r\n          {results.map((it) => (\r\n            <button\r\n              key={`${it.kind}:${it.id}`}\r\n              type=\"button\"\r\n              className=\"w-full text-left px-3 py-2 hover:bg-gray-50\"\r\n              onClick={() => {\r\n                setOpen(false);\r\n                props.onSelect(it);\r\n              }}\r\n            >\r\n              <div className=\"text-sm\">{it.label}</div>\r\n              <div className=\"text-xs text-gray-500\">{badge(it.kind)}{it.hint ? ` • ${it.hint}` : ''}</div>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction badge(kind: SearchKind): string {\r\n  if (kind === 'user') return 'ФИО';\r\n  if (kind === 'group') return 'Группа';\r\n  if (kind === 'subject') return 'Предмет';\r\n  if (kind === 'role') return 'Роль';\r\n  return kind;\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/auth.ts",
      "size": 2981,
      "hash": "29080f73a72fcca883e0d75af988abf8089dcf7f",
      "textSample": "// lib/auth.ts\r\nimport NextAuth, { NextAuthOptions, getServerSession } from \"next-auth\";\r\nimport Credentials from \"next-auth/providers/credentials\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport * as RBAC from \"@/lib/rbac\";\r\n\r\nfunction isRootUserSafe(user: any): boolean {\r\n  try {\r\n    if (typeof (RBAC as any)?.isRootUser === \"function\") {\r\n      return !!(RBAC as any).isRootUser(user);\r\n    }\r\n  } catch {}\r\n  return user?.name === \"Евжик Иван Сергеевич\";\r\n}\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  debug: process.env.NODE_ENV === \"development\",\r\n  session: { strategy: \"jwt\" },\r\n  pages: { signIn: \"/sign-in\" },\r\n  providers: [\r\n    Credentials({\r\n      credentials: {\r\n        username: { label: \"username/email/ФИО\", type: \"text\" },\r\n        password: { label: \"password\", type: \"password\" },\r\n      },\r\n      authorize: async (creds) => {\r\n        try {\r\n          const username = String(creds?.username || \"\").trim();\r\n          const password = String(creds?.password || \"\");\r\n          if (!username || !password) return null;\r\n\r\n          const user =\r\n            (await prisma.user.findFirst({ where: { username } })) ||\r\n            (await prisma.user.findFirst({ where: { email: username } })) ||\r\n            (await prisma.user.findFirst({ where: { name: username } }));\r\n\r\n          if (!user || !user.passwordHash) return null;\r\n\r\n          const ok = await bcrypt.compare(password, user.passwordHash);\r\n          if (!ok) return null;\r\n\r\n          return {\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email,\r\n            username: user.username,\r\n            role: user.role,\r\n          } as any;\r\n        } catch (e) {\r\n          console.error(\"[auth][authorize] error:\", e);\r\n          return null;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        (token as any).uid = (user as any).id;\r\n        token.name = user.name || token.name;\r\n        (token as any).role = (user as any).role || null;\r\n        (token as any).username = (user as any).username || null;\r\n        (token as any).isRoot = isRootUserSafe(user);\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      (session.user as any) = {\r\n        id: (token as any).uid || token.sub,\r\n        name: session.user?.name || (token as any).name || \"\",\r\n        email: session.user?.email || null,\r\n        username: (token as any).username || null,\r\n        role: (token as any).role || null,\r\n        isRoot: !!(token as any).isRoot,\r\n      };\r\n      return session;\r\n    },\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n\r\n// для совместимости с существующим кодом (`auth()` в API-роутах)\r\nexport const auth = () => getServerSession(authOptions);\r\n\r\n// next-auth handler для маршрута\r\nconst handler = NextAuth(authOptions);\r\nexport { handler };\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/chatSSE.ts",
      "size": 1135,
      "hash": "26460c523fa4b587e98d05ce37e7f118c32769ac",
      "textSample": "// lib/chatSSE.ts\r\ntype Client = { controller: ReadableStreamDefaultController };\r\nconst channels = new Map<string, Set<Client>>();\r\nconst enc = new TextEncoder();\r\n\r\nexport function subscribe(threadId: string, controller: ReadableStreamDefaultController) {\r\n  let set = channels.get(threadId);\r\n  if (!set) { set = new Set(); channels.set(threadId, set); }\r\n  const client: Client = { controller };\r\n  set.add(client);\r\n  return () => {\r\n    const s = channels.get(threadId);\r\n    if (!s) return;\r\n    s.delete(client);\r\n    if (s.size === 0) channels.delete(threadId);\r\n  };\r\n}\r\n\r\nexport function publishMessage(threadId: string, messagePayload: unknown) {\r\n  broadcast(threadId, { type: \"message\", data: messagePayload });\r\n}\r\nexport function publishRead(threadId: string, readPayload: unknown) {\r\n  broadcast(threadId, { type: \"read\", data: readPayload });\r\n}\r\n\r\nfunction broadcast(threadId: string, payload: any) {\r\n  const s = channels.get(threadId);\r\n  if (!s || s.size === 0) return;\r\n  const data = enc.encode(`data: ${JSON.stringify(payload)}\\n\\n`);\r\n  for (const c of s) { try { c.controller.enqueue(data); } catch {} }\r\n}\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/db.ts",
      "size": 367,
      "hash": "290c7f4e3cf8ec339e932c04e3f4451a61d6175f",
      "textSample": "﻿import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma?: PrismaClient };\r\n\r\nexport const db =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    // log: ['query'], // при необходимости включай лог\r\n  });\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = db;\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/dbInfo.ts",
      "size": 715,
      "hash": "c231edc4c5364856851c6c3b973f68560d2a8e43",
      "textSample": "// lib/dbInfo.ts\r\nexport function getDbInfo() {\r\n  const url = process.env.DATABASE_URL || \"\";\r\n  try {\r\n    const u = new URL(url);\r\n    const host = u.hostname;       // ep-summer-frog-...neon.tech\r\n    const database = u.pathname.replace(/^\\//, \"\") || \"\";\r\n    const isPgBouncer = /pgbouncer=true/i.test(u.search);\r\n    return { host, database, isPgBouncer, raw: url };\r\n  } catch {\r\n    return { host: \"\", database: \"\", isPgBouncer: false, raw: url };\r\n  }\r\n}\r\n\r\nexport function maskUrl(url: string) {\r\n  if (!url) return \"\";\r\n  try {\r\n    const u = new URL(url);\r\n    if (u.password) u.password = \"***\";\r\n    if (u.username) u.username = \"***\";\r\n    return u.toString();\r\n  } catch {\r\n    return url;\r\n  }\r\n}\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/edu.ts",
      "size": 2622,
      "hash": "282f9a719918958fed02b75806d363005fbaf301",
      "textSample": "// lib/edu.ts\r\n// Справочники для форм. При желании — вытянем из БД, но пока так удобнее поддерживать.\r\n\r\nexport const SUBJECTS_2025_RU: string[] = [\r\n  // Языки и словесность\r\n  \"Русский язык\",\r\n  \"Литература\",\r\n  \"Иностранный язык (английский)\",\r\n  // Математика и информатика\r\n  \"Математика\",\r\n  \"Алгебра\",\r\n  \"Геометрия\",\r\n  \"Информатика\",\r\n  // Естественные науки\r\n  \"Физика\",\r\n  \"Химия\",\r\n  \"Биология\",\r\n  \"География\",\r\n  // Общественно-научные дисциплины\r\n  \"История России\",\r\n  \"Всеобщая история\",\r\n  \"Обществознание\",\r\n  \"Право (вариативный)\",\r\n  \"Экономика (вариативный)\",\r\n  // Искусство, технологии, безопасность, спорт\r\n  \"Изобразительное искусство\",\r\n  \"Музыка\",\r\n  \"Технология\",\r\n  \"Физическая культура\",\r\n  \"ОБиЗР\",\r\n  // Культурологические модули\r\n  \"ОДНКНР\",\r\n  // Старшая школа\r\n  \"Индивидуальный проект\"\r\n];\r\n\r\n// Методические объединения — по структуре раздела «Педагогический состав» гимназии №108.\r\nexport const METHODICAL_GROUPS_108: string[] = [\r\n  \"МО начальной школы\",\r\n  \"МО русского языка и литературы\",\r\n  \"МО иностранных языков\",\r\n  \"МО математики и информатики\",\r\n  \"МО естествознания\",\r\n  \"МО истории и обществознания\",\r\n  \"МО физической культуры и спорта\",\r\n  \"МО дополнительного образования\",\r\n  \"МО классных руководителей\",\r\n  \"Администрация\",\r\n  \"Техперсонал\",\r\n  \"Психологи\"\r\n];\r\n\r\n// Роли — читаем из БД через /api/roles, но на случай деградации можно подстраховаться:\r\nexport const FALLBACK_ROLES = [\r\n  { slug: \"director\",        name: \"Директор\" },\r\n  { slug: \"deputy_plus\",     name: \"Заместитель +\" },\r\n  { slug: \"deputy\",          name: \"Заместитель\" },\r\n  { slug: \"teacher_plus\",    name: \"Педагог +\" },\r\n  { slug: \"teacher\",         name: \"Педагог\" }\r\n];\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/http.ts",
      "size": 345,
      "hash": "d092c1396e662c339fc9e9e279bb341c5509661c",
      "textSample": "// app/lib/http.ts\r\nexport async function safeJson<T = any>(res: Response): Promise<T> {\r\n  const text = await res.text();\r\n  if (!text) throw new Error(`Пустой ответ ${res.status}`);\r\n  try {\r\n    return JSON.parse(text) as T;\r\n  } catch {\r\n    throw new Error(`Неверный JSON ${res.status}: ${text.slice(0, 400)}`);\r\n  }\r\n}\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/prisma.ts",
      "size": 366,
      "hash": "203dde552e7a73ceb45b2fc8be5c74cbf9be7a15",
      "textSample": "// lib/prisma.ts\nimport { PrismaClient } from '@prisma/client';\n\nconst g = globalThis as unknown as { prisma?: PrismaClient };\n\nexport const prisma =\n  g.prisma ??\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === 'development'\n        ? ['query', 'error', 'warn']\n        : ['error'],\n  });\n\nif (process.env.NODE_ENV !== 'production') g.prisma = prisma;\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/rbac.ts",
      "size": 3842,
      "hash": "50a3778e119d9023bf0c1b60489511a92be0ccdf",
      "textSample": "﻿// lib/rbac.ts\r\nimport { prisma } from \"@/lib/prisma\";\r\n\r\nexport const ROLE = {\r\n  DIRECTOR: \"Р”РёСЂРµРєС‚РѕСЂ\",\r\n  DEPUTY_PLUS: \"Р—Р°РјРµСЃС‚РёС‚РµР»СЊ +\",\r\n  DEPUTY: \"Р—Р°РјРµСЃС‚РёС‚РµР»СЊ\",\r\n  TEACHER_PLUS: \"РџРµРґР°РіРѕРі +\",\r\n  TEACHER: \"РџРµРґР°РіРѕРі\",\r\n} as const;\r\n\r\nexport type Action =\r\n  | \"task.create\"\r\n  | \"task.assign\"\r\n  | \"task.hide\"\r\n  | \"task.viewHidden\"\r\n  | \"user.manage\"\r\n  | \"user.updatePhone:self\"\r\n  | \"user.updatePhone:any\"\r\n  | \"settings.changeUi\";\r\n\r\nfunction rootIds(): Set<string> {\r\n  const raw = process.env.ROOT_USER_IDS || \"\";\r\n  return new Set(raw.split(\",\").map((s) => s.trim()).filter(Boolean));\r\n}\r\n\r\ntype RoleRow = { name: string; power: number };\r\n\r\nexport async function getUserRoles(userId: string): Promise<RoleRow[]> {\r\n  const rows = await prisma.$queryRaw<RoleRow[]>`\r\n    SELECT r.name, r.power\r\n    FROM Role r\r\n    JOIN UserRole ur ON ur.roleId = r.id\r\n    WHERE ur.userId = ${userId}\r\n  `;\r\n  return rows;\r\n}\r\n\r\nexport async function maxPower(userId: string): Promise<number> {\r\n  if (rootIds().has(userId)) return Number.MAX_SAFE_INTEGER;\r\n  const roles = await getUserRoles(userId);\r\n  return roles.length ? Math.max(...roles.map((r) => r.power)) : 0;\r\n}\r\n\r\nexport async function hasAnyRole(userId: string, names: string[]) {\r\n  if (rootIds().has(userId)) return true;\r\n  const roles = await getUserRoles(userId);\r\n  return roles.some((r) => names.includes(r.name));\r\n}\r\n\r\nexport async function can(userId: string, action: Action): Promise<boolean> {\r\n  if (rootIds().has(userId)) return true;\r\n\r\n  switch (action) {\r\n    case \"settings.changeUi\":\r\n    case \"user.updatePhone:self\":\r\n      return true;\r\n    case \"user.manage\":\r\n    case \"task.create\":\r\n    case \"task.assign\":\r\n      return hasAnyRole(userId, [ROLE.DIRECTOR, ROLE.DEPUTY_PLUS]);\r\n    case \"task.hide\":\r\n      return hasAnyRole(userId, [ROLE.DIRECTOR, ROLE.DEPUTY_PLUS, ROLE.DEPUTY]);\r\n    case \"task.viewHidden\":\r\n      return hasAnyRole(userId, [ROLE.DIRECTOR, ROLE.DEPUTY_PLUS, ROLE.DEPUTY]);\r\n    case \"user.updatePhone:any\":\r\n      return hasAnyRole(userId, [ROLE.DIRECTOR, ROLE.DEPUTY_PLUS, ROLE.DEPUTY]);\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n// -------------------- Р’РёРґРёРјРѕСЃС‚СЊ Р·Р°РґР°С‡Рё --------------------\r\n\r\ntype FlagRow = { hidden: number; minRolePowerToSeeHidden: number };\r\ntype CntRow = { cnt: number };\r\n\r\nexport async function canSeeTask(userId: string, taskId: string): Promise<boolean> {\r\n  if (rootIds().has(userId)) return true;\r\n\r\n  // 1) Р¤Р»Р°РіРё Р·Р°РґР°С‡Рё\r\n  const flags = await prisma.$queryRaw<FlagRow[]>`\r\n    SELECT hidden, minRolePowerToSeeHidden\r\n    FROM Task\r\n    WHERE id = ${taskId}\r\n    LIMIT 1\r\n  `;\r\n  if (!flags.length) return false;\r\n  const hidden = !!flags[0].hidden;\r\n  const threshold = flags[0].minRolePowerToSeeHidden;\r\n\r\n  if (!hidden) return true;\r\n\r\n  // 2) РќР°Р·РЅР°С‡РµРЅ РЅР°РїСЂСЏРјСѓСЋ?\r\n  const direct = await prisma.$queryRaw<CntRow[]>`\r\n    SELECT COUNT(*) as cnt FROM TaskAssigneeUser\r\n    WHERE taskId = ${taskId} AND userId = ${userId}\r\n  `;\r\n  if ((direct[0]?.cnt ?? 0) > 0) return true;\r\n\r\n  // 3) РќР°Р·РЅР°С‡РµРЅ С‡РµСЂРµР· РіСЂСѓРїРїСѓ?\r\n  const viaGroup = await prisma.$queryRaw<CntRow[]>`\r\n    SELECT COUNT(*) as cnt\r\n    FROM TaskAssigneeGroup tg\r\n    JOIN GroupMember gm ON gm.groupId = tg.groupId\r\n    WHERE tg.taskId = ${taskId} AND gm.userId = ${userId}\r\n  `;\r\n  if ((viaGroup[0]?.cnt ?? 0) > 0) return true;\r\n\r\n  // 4) Р”РѕСЃС‚Р°С‚РѕС‡РµРЅ Р»Рё СѓСЂРѕРІРµРЅСЊ СЂРѕР»Рё\r\n  const power = await maxPower(userId);\r\n  return power >= threshold;\r\n}\r\n\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/roles.ts",
      "size": 1196,
      "hash": "fb01c361f9c03bbf7e29075544bb283ad6c05fda",
      "textSample": "// lib/roles.ts\nexport type Role =\n  | 'guest'\n  | 'user'\n  | 'student'\n  | 'staff'\n  | 'teacher'\n  | 'deputy'\n  | 'deputy_plus'\n  | 'director';\n\nexport const roleOrder: Role[] = [\n  'guest',\n  'user',\n  'student',\n  'staff',\n  'teacher',\n  'deputy',\n  'deputy_plus',\n  'director',\n];\n\nexport function isRole(value: unknown): value is Role {\n  return typeof value === 'string' && (roleOrder as string[]).includes(value);\n}\n\nexport function normalizeRole(value: unknown): Role | null {\n  if (typeof value !== 'string') return null;\n  const v = value.trim();\n  return isRole(v) ? (v as Role) : null;\n}\n\nexport function canViewAdmin(role: Role | null | undefined): boolean {\n  return role === 'director' || role === 'deputy_plus';\n}\n\nexport function canCreateTasks(role: Role | null | undefined): boolean {\n  if (!role) return false;\n  return roleOrder.indexOf(role) >= roleOrder.indexOf('deputy');\n}\n\nexport function canViewTasks(role: Role | null | undefined): boolean {\n  if (!role) return false;\n  return roleOrder.indexOf(role) >= roleOrder.indexOf('teacher');\n}\n\nexport function hasFullAccess(role: Role | null | undefined): boolean {\n  return role === 'deputy_plus' || role === 'director';\n}\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/search/index.ts",
      "size": 3237,
      "hash": "7742dada016d8c5f6366cba209655e7cb7c10ae7",
      "textSample": "/* lib/search/index.ts */\r\nimport 'server-only';\r\nimport { unstable_cache as cache } from 'next/cache';\r\nimport { prisma } from '@/lib/prisma';\r\nimport type { IndexOptions, SearchItem } from './types';\r\n\r\nfunction norm(s: string | null | undefined): string {\r\n  return (s ?? '').toLowerCase();\r\n}\r\n\r\nasync function buildIndex(opts: IndexOptions): Promise<SearchItem[]> {\r\n  const limit = opts.limitPerKind ?? 5000;\r\n\r\n  const tasks: Promise<SearchItem[]>[] = [];\r\n\r\n  if (opts.kinds.includes('user')) {\r\n    tasks.push(\r\n      prisma.user.findMany({\r\n        select: { id: true, name: true, role: true, classroom: true },\r\n        take: limit,\r\n        orderBy: { name: 'asc' },\r\n      }).then(rows =>\r\n        rows.map(r => ({\r\n          id: r.id,\r\n          kind: 'user' as const,\r\n          label: r.name,\r\n          hint: [r.role, r.classroom].filter(Boolean).join(' • ') || undefined,\r\n          q: [r.name, r.role, r.classroom].filter(Boolean).join(' '),\r\n        })),\r\n      )\r\n    );\r\n  }\r\n\r\n  if (opts.kinds.includes('group')) {\r\n    tasks.push(\r\n      prisma.group.findMany({\r\n        select: { id: true, name: true, _count: { select: { members: true } } },\r\n        take: limit,\r\n        orderBy: { name: 'asc' },\r\n      }).then(rows =>\r\n        rows.map(g => ({\r\n          id: g.id,\r\n          kind: 'group' as const,\r\n          label: g.name,\r\n          hint: g._count.members ? `участников: ${g._count.members}` : undefined,\r\n          q: g.name,\r\n        })),\r\n      )\r\n    );\r\n  }\r\n\r\n  if (opts.kinds.includes('subject')) {\r\n    tasks.push(\r\n      prisma.subject.findMany({\r\n        select: { id: true, name: true, _count: { select: { members: true } } },\r\n        take: limit,\r\n        orderBy: { name: 'asc' },\r\n      }).then(rows =>\r\n        rows.map(s => ({\r\n          id: s.id,\r\n          kind: 'subject' as const,\r\n          label: s.name,\r\n          hint: s._count.members ? `преподавателей: ${s._count.members}` : undefined,\r\n          q: s.name,\r\n        })),\r\n      )\r\n    );\r\n  }\r\n\r\n  if (opts.kinds.includes('role')) {\r\n    tasks.push(\r\n      prisma.user.findMany({\r\n        select: { role: true },\r\n        where: { role: { not: null } },\r\n        distinct: ['role'],\r\n        orderBy: { role: 'asc' },\r\n        take: limit,\r\n      }).then(rows =>\r\n        rows\r\n          .map(r => r.role!)\r\n          .filter(Boolean)\r\n          .map(role => ({\r\n            id: role,\r\n            kind: 'role' as const,\r\n            label: role,\r\n            q: role,\r\n          } satisfies SearchItem)),\r\n      )\r\n    );\r\n  }\r\n\r\n  const parts = await Promise.all(tasks);\r\n  const all = parts.flat();\r\n  return all.map(it => ({ ...it, q: norm(it.q) }));\r\n}\r\n\r\n// ВАЖНО: keyParts — массив строк; аргументы функции тоже попадают в ключ кэша.\r\n// Для устойчивости к порядку kinds канонизируем их перед сборкой.\r\nexport const getSearchIndex = cache(\r\n  async (opts: IndexOptions) => {\r\n    const kindsSorted = [...opts.kinds].sort() as IndexOptions['kinds'];\r\n    return buildIndex({ ...opts, kinds: kindsSorted });\r\n  },\r\n  ['search-index'],\r\n  { revalidate: 120, tags: ['search-index'] },\r\n);\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/search/types.ts",
      "size": 494,
      "hash": "41f291872bbb005a7fd66a9256a773a0f9f03fdf",
      "textSample": "/* lib/search/types.ts */\r\nexport type SearchKind = 'user' | 'group' | 'subject' | 'role';\r\n\r\nexport type SearchItem = {\r\n  id: string;\r\n  kind: SearchKind;\r\n  label: string;     // основная строка показа\r\n  hint?: string;     // вторичная строка\r\n  q: string;         // нормализованная строка для быстрых фильтров\r\n};\r\n\r\nexport type IndexOptions = {\r\n  kinds: ReadonlyArray<SearchKind>;\r\n  limitPerKind?: number;\r\n};\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/serialize.ts",
      "size": 604,
      "hash": "8bcef753eb10a19f364f9857979b2e6c0865ddd8",
      "textSample": "// app/lib/serialize.ts\r\nexport function parseStrArray(input: unknown): string[] {\r\n  if (Array.isArray(input)) return input.map(x => String(x ?? \"\")).filter(Boolean);\r\n  if (typeof input !== \"string\" || !input.trim()) return [];\r\n  try {\r\n    const v = JSON.parse(input);\r\n    return Array.isArray(v) ? v.map(x => String(x ?? \"\")).filter(Boolean) : [];\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\nexport function toDbStrArray(v: unknown): string | null {\r\n  if (!Array.isArray(v)) return null;\r\n  const arr = v.map(x => String(x ?? \"\")).filter(Boolean);\r\n  return arr.length ? JSON.stringify(arr) : null;\r\n}\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/tasks/getUnreadTasks.ts",
      "size": 407,
      "hash": "6b84248e899dd1e0f99f011d87e4fb4cb18500ff",
      "textSample": "// lib/tasks/getUnreadTasks.ts\r\nimport { prisma } from '@/lib/prisma';\r\n\r\n/**\r\n * Кол-во активных назначений текущего пользователя:\r\n * status = 'in_progress'\r\n */\r\nexport async function getUnreadTasksCount(userId: string): Promise<number> {\r\n  if (!userId) return 0;\r\n  return prisma.taskAssignee.count({\r\n    where: { userId, status: 'in_progress' },\r\n  });\r\n}\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "middleware.ts",
      "size": 309,
      "hash": "b3010a7f6488efa9114151dbb6d9de6904712cb5",
      "textSample": "import { withAuth } from \"next-auth/middleware\";\n\nexport default withAuth({\n  pages: { signIn: \"/sign-in\" },\n  callbacks: { authorized: ({ token }) => !!token },\n  secret: process.env.NEXTAUTH_SECRET\n});\n\nexport const config = {\n  matcher: [\"/((?!api/auth|_next/static|_next/image|favicon.ico|sign-in).*)\"]\n};",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "migration_sync_20250817_010051.sql",
      "size": 1309,
      "hash": "33e771de8c8a39c971ab461c51ad6d265200f343",
      "textSample": "﻿-- DropIndex\r\nDROP INDEX \"public\".\"Subject_name_idx\";\r\n\r\n-- DropIndex\r\nDROP INDEX \"public\".\"SubjectMember_subjectId_idx\";\r\n\r\n-- DropIndex\r\nDROP INDEX \"public\".\"SubjectMember_userId_idx\";\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"Message\" ALTER COLUMN \"editedAt\" SET DATA TYPE TIMESTAMP(3),\r\nALTER COLUMN \"deletedAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"ReadMark\" ALTER COLUMN \"readAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"Task\" ALTER COLUMN \"createdAt\" SET DATA TYPE TIMESTAMP(3),\r\nALTER COLUMN \"updatedAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"TaskAssignee\" ALTER COLUMN \"assignedAt\" SET DATA TYPE TIMESTAMP(3),\r\nALTER COLUMN \"completedAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"Thread\" ALTER COLUMN \"aId\" SET NOT NULL,\r\nALTER COLUMN \"bId\" SET NOT NULL;\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"GroupMember_userId_groupId_key\" ON \"public\".\"GroupMember\"(\"userId\", \"groupId\");\r\n\r\n-- RenameIndex\r\nALTER INDEX \"public\".\"Attachment_message_idx\" RENAME TO \"Attachment_messageId_idx\";\r\n\r\n-- RenameIndex\r\nALTER INDEX \"public\".\"Message_thread_created_idx\" RENAME TO \"Message_threadId_createdAt_idx\";\r\n\r\n-- RenameIndex\r\nALTER INDEX \"public\".\"ReadMark_user_idx\" RENAME TO \"ReadMark_userId_idx\";\r\n\r\n",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "next-env.d.ts",
      "size": 216,
      "hash": "4eeda91c7bb116ef5d18c84ce15e5588ec2133c3",
      "textSample": "/// <reference types=\"next\" />\r\n/// <reference types=\"next/image-types/global\" />\r\n\r\n// NOTE: This file should not be edited\r\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\r\n",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "next.config.ts",
      "size": 121,
      "hash": "5bba21f2b8cad71a1c79903f8a28518f9f2647d1",
      "textSample": "﻿import type { NextConfig } from \"next\";\r\nconst config: NextConfig = { reactStrictMode: true };\r\nexport default config;",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "package-lock.json",
      "size": 56952,
      "hash": "8b73c2fb78db0559733fc15cdf0b5463c93af06a",
      "textSample": "{\r\n  \"name\": \"g108crm-core\",\r\n  \"version\": \"0.1.0\",\r\n  \"lockfileVersion\": 3,\r\n  \"requires\": true,\r\n  \"packages\": {\r\n    \"\": {\r\n      \"name\": \"g108crm-core\",\r\n      \"version\": \"0.1.0\",\r\n      \"dependencies\": {\r\n        \"@prisma/client\": \"^6.14.0\",\r\n        \"@types/bcryptjs\": \"2.4.6\",\r\n        \"bcryptjs\": \"3.0.2\",\r\n        \"next\": \"^15.4.6\",\r\n        \"next-auth\": \"4.24.11\",\r\n        \"react\": \"^18.3.1\",\r\n        \"react-dom\": \"^18.3.1\"\r\n      },\r\n      \"devDependencies\": {\r\n        \"@types/node\": \"^24.2.1\",\r\n        \"@types/react\": \"^19.1.10\",\r\n        \"@types/react-dom\": \"^19.1.7\",\r\n        \"prisma\": \"^6.14.0\",\r\n        \"typescript\": \"^5.9.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=18\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/runtime\": {\r\n      \"version\": \"7.28.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.2.tgz\",\r\n      \"integrity\": \"sha512-KHp2IflsnGywDjBWDkR9iEqiWSpc8GIi0lgTT3mOElT0PP1tG26P4tmFI2YvAdzgq9RGyoHZQEIEdZy6Ec5xCA==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@emnapi/runtime\": {\r\n      \"version\": \"1.4.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.5.tgz\",\r\n      \"integrity\": \"sha512-++LApOtY0pEEz1zrd9vy1/zXVaVJJ/EbAF3u0fXIzPJEDtnITsBGbbK0EkM72amhl/R5b+5xx0Y/QhcVOpuulg==\",\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"dependencies\": {\r\n        \"tslib\": \"^2.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-darwin-arm64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-ryFMfvxxpQRsgZJqBd4wsttYQbCxsJksrv9Lw/v798JcQ8+w84mBWuXwl+TT0WJ/WrYOLaYpwQXi3sA9nTIaIg==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-darwin-arm64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-darwin-x64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-yHpJYynROAj12TA6qil58hmPmAwxKKC7reUqtGLzsOHfP7/rniNGTL8tjWX6L3CTV4+5P4ypcS7Pp+7OB+8ihA==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-darwin-x64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-darwin-arm64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-sBZmpwmxqwlqG9ueWFXtockhsxefaV6O84BMOrhtg/YqbTaRdqDE7hxraVE3y6gVM4eExmfzW4a8el9ArLeEiQ==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-darwin-x64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-M64XVuL94OgiNHa5/m2YvEQI5q2cl9d/wk0qFTDVXcYzi43lxuiFTftMR1tOnFQovVXNZJ5TURSDK2pNe9Yzqg==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_mo",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "package.json",
      "size": 1262,
      "hash": "7cdc5a8f7692b221c874c82c56107dc7a1e9fe84",
      "textSample": "{\r\n  \"name\": \"g108crm-core\",\r\n  \"private\": true,\r\n  \"version\": \"0.1.0\",\r\n  \"engines\": {\r\n    \"node\": \">=18\"\r\n  },\r\n  \"scripts\": {\r\n    \"snapshot\": \"node tools/snapshot.js\",\r\n    \"snapshot:env\": \"node tools/snapshot.js --include-env-names\",\r\n    \"typecheck\": \"tsc -p tsconfig.json --noEmit\",\r\n    \"list:endpoints\": \"node scripts/list-endpoints.mjs\",\r\n    \"dev\": \"next dev -p 3000\",\r\n    \"start\": \"next start -p 3000\",\r\n    \"prisma:generate\": \"prisma generate\",\r\n    \"prisma:migrate:deploy\": \"prisma migrate deploy\",\r\n    \"lint\": \"eslint . --ext .ts,.tsx --max-warnings=0\",\r\n    \"build\": \"next build\",\r\n    \"build:fast\": \"next build --no-lint\",\r\n    \"prisma:deploy\": \"prisma migrate deploy\",\r\n    \"db:seed\": \"prisma db seed\",\r\n    \"vercel-build\": \"prisma generate && prisma migrate deploy && next build\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@prisma/client\": \"^6.14.0\",\r\n    \"@types/bcryptjs\": \"2.4.6\",\r\n    \"bcryptjs\": \"3.0.2\",\r\n    \"next\": \"^15.4.6\",\r\n    \"next-auth\": \"4.24.11\",\r\n    \"react\": \"^18.3.1\",\r\n    \"react-dom\": \"^18.3.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^24.2.1\",\r\n    \"@types/react\": \"^19.1.10\",\r\n    \"@types/react-dom\": \"^19.1.7\",\r\n    \"prisma\": \"^6.14.0\",\r\n    \"typescript\": \"^5.9.2\"\r\n  },\r\n  \"postinstall\": \"prisma generate\"\r\n  \r\n}\r\n",
      "kind": "package",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/dev.db",
      "size": 0,
      "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
      "textSample": null,
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/000_init/migration.sql",
      "size": 14,
      "hash": "3b17ac717a2294785f1f977628b9cba0de0e2c03",
      "textSample": "/* baseline */",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/2025-08-16_taskassignee_unique/migration.sql",
      "size": 1936,
      "hash": "526a488d3d291dd260495bc3f035d036e779d3a2",
      "textSample": "-- Добавляем уникальный ключ на пару (taskId, userId)\r\nALTER TABLE \"TaskAssignee\"\r\n  ADD CONSTRAINT \"TaskAssignee_taskId_userId_key\"\r\n  UNIQUE (\"taskId\", \"userId\");\r\n-- 1) Task: аудит + связь с создателем\r\nALTER TABLE \"Task\"\r\n  ADD COLUMN \"createdAt\"     TIMESTAMPTZ NOT NULL DEFAULT now(),\r\n  ADD COLUMN \"updatedAt\"     TIMESTAMPTZ NOT NULL DEFAULT now(),\r\n  ADD COLUMN \"createdById\"   TEXT NULL,\r\n  ADD COLUMN \"createdByName\" TEXT NULL;\r\n\r\n-- FK на User(id), удаление создателя -> SET NULL, апдейт -> CASCADE\r\nALTER TABLE \"Task\"\r\n  ADD CONSTRAINT \"Task_createdById_fkey\"\r\n  FOREIGN KEY (\"createdById\")\r\n  REFERENCES \"User\"(\"id\")\r\n  ON DELETE SET NULL\r\n  ON UPDATE CASCADE;\r\n\r\n-- Индексы (полезно для выборок «назначенные мной» и сортировок)\r\nCREATE INDEX IF NOT EXISTS \"Task_createdById_idx\" ON \"Task\" (\"createdById\");\r\nCREATE INDEX IF NOT EXISTS \"Task_dueDate_idx\"     ON \"Task\" (\"dueDate\");\r\n\r\n-- 2) TaskAssignee: статусы исполнителя\r\nALTER TABLE \"TaskAssignee\"\r\n  ADD COLUMN \"status\"       TEXT NOT NULL DEFAULT 'in_progress',\r\n  ADD COLUMN \"assignedAt\"   TIMESTAMPTZ NOT NULL DEFAULT now(),\r\n  ADD COLUMN \"completedAt\"  TIMESTAMPTZ NULL;\r\n\r\n-- Индексы (для «назначенные мне» и прогресса)\r\nCREATE INDEX IF NOT EXISTS \"TaskAssignee_userId_idx\"  ON \"TaskAssignee\" (\"userId\");\r\nCREATE INDEX IF NOT EXISTS \"TaskAssignee_taskId_idx\"  ON \"TaskAssignee\" (\"taskId\");\r\nCREATE INDEX IF NOT EXISTS \"TaskAssignee_status_idx\"  ON \"TaskAssignee\" (\"status\");\r\n\r\n-- ВАЖНО: уникальный ключ по (taskId, userId) отложен по вашей просьбе.\r\n-- Когда будете готовы, отдельной миграцией:\r\n-- ALTER TABLE \"TaskAssignee\" ADD CONSTRAINT \"TaskAssignee_taskId_userId_key\" UNIQUE (\"taskId\",\"userId\");\r\n",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250814151727_init/migration.sql",
      "size": 4653,
      "hash": "19c7a0e6571a9abecdb97baafe4fe0b8d933840b",
      "textSample": "-- CreateTable\r\nCREATE TABLE \"public\".\"User\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"name\" TEXT NOT NULL,\r\n    \"username\" TEXT,\r\n    \"email\" TEXT,\r\n    \"phone\" TEXT,\r\n    \"birthday\" TIMESTAMP(3),\r\n    \"classroom\" TEXT,\r\n    \"role\" TEXT,\r\n    \"avatarUrl\" TEXT,\r\n    \"telegram\" TEXT,\r\n    \"about\" TEXT,\r\n    \"notifyEmail\" BOOLEAN NOT NULL DEFAULT true,\r\n    \"notifyTelegram\" BOOLEAN NOT NULL DEFAULT false,\r\n    \"subjects\" TEXT,\r\n    \"methodicalGroups\" TEXT,\r\n    \"passwordHash\" TEXT,\r\n    \"lastSeen\" TIMESTAMP(3),\r\n\r\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"Group\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"name\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"Group_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"GroupMember\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"userId\" TEXT NOT NULL,\r\n    \"groupId\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"GroupMember_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"Thread\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"aId\" TEXT,\r\n    \"bId\" TEXT,\r\n    \"lastMessageAt\" TIMESTAMP(3),\r\n    \"lastMessageText\" TEXT,\r\n    \"title\" TEXT NOT NULL DEFAULT '',\r\n\r\n    CONSTRAINT \"Thread_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"Message\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n    \"text\" TEXT NOT NULL,\r\n    \"authorId\" TEXT NOT NULL,\r\n    \"threadId\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"Message_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"Task\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"title\" TEXT NOT NULL,\r\n    \"description\" TEXT NOT NULL,\r\n    \"dueDate\" TIMESTAMP(3) NOT NULL,\r\n    \"hidden\" BOOLEAN NOT NULL DEFAULT false,\r\n    \"priority\" TEXT NOT NULL DEFAULT 'normal',\r\n\r\n    CONSTRAINT \"Task_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"TaskAssignee\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"taskId\" TEXT NOT NULL,\r\n    \"userId\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"TaskAssignee_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"Tag\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"name\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"Tag_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"TaskTag\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"taskId\" TEXT NOT NULL,\r\n    \"tagId\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"TaskTag_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"User_username_key\" ON \"public\".\"User\"(\"username\");\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"User_email_key\" ON \"public\".\"User\"(\"email\");\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"User_phone_key\" ON \"public\".\"User\"(\"phone\");\r\n\r\n-- CreateIndex\r\nCREATE INDEX \"Thread_lastMessageAt_id_idx\" ON \"public\".\"Thread\"(\"lastMessageAt\", \"id\");\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"Tag_name_key\" ON \"public\".\"Tag\"(\"name\");\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"GroupMember\" ADD CONSTRAINT \"GroupMember_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"public\".\"User\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"GroupMember\" ADD CONSTRAINT \"GroupMember_groupId_fkey\" FOREIGN KEY (\"groupId\") REFERENCES \"public\".\"Group\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"Thread\" ADD CONSTRAINT \"Thread_aId_fkey\" FOREIGN KEY (\"aId\") REFERENCES \"public\".\"User\"(\"id\") ON DELETE SET NULL ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"Thread\" ADD CONSTRAINT \"Thread_bId_fkey\" FOREIGN KEY (\"bId\") REFERENCES \"public\".\"User\"(\"id\") ON DELETE SET NULL ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"Message\" ADD CONSTRAINT \"Message_authorId_fkey\" FOREIGN KEY (\"authorId\") REFERENCES \"public\".\"User\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"Message\" ADD CONSTRAINT \"Message_threadId_fkey\" FOREIGN KEY (\"threadId\") REFERENCES \"public\".\"Thread\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"TaskAssignee\" ADD CONSTRAINT \"TaskAssignee_taskId_fkey",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250816_002949_add_readmark_and_attachment/migration.sql",
      "size": 2762,
      "hash": "adb8b1bb6aabd5f19b3865a47d55aba8d4da6ddd",
      "textSample": "��-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000r\u0000e\u0000a\u0000d\u0000A\u0000t\u0000\"\u0000 \u0000T\u0000I\u0000M\u0000E\u0000S\u0000T\u0000A\u0000M\u0000P\u0000(\u00003\u0000)\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000,\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000i\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000n\u0000a\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000i\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000s\u0000i\u0000z\u0000e\u0000\"\u0000 \u0000I\u0000N\u0000T\u0000E\u0000G\u0000E\u0000R\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000d\u0000a\u0000t\u0000a\u0000\"\u0000 \u0000B\u0000Y\u0000T\u0000E\u0000A\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000(\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000(\u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000_\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000_\u0000c\u0000r\u0000e\u0000a\u0000t\u0000e\u0000d\u0000A\u0000t\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000\"\u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000,\u0000 \u0000\"\u0000c\u0000r\u0000e\u0000a\u0000t\u0000e\u0000d\u0000A\u0000t\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000U\u0000s\u0000e\u0000r\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250816_003914_add_readmark_and_attachment_take2/migration.sql",
      "size": 2762,
      "hash": "adb8b1bb6aabd5f19b3865a47d55aba8d4da6ddd",
      "textSample": "��-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000r\u0000e\u0000a\u0000d\u0000A\u0000t\u0000\"\u0000 \u0000T\u0000I\u0000M\u0000E\u0000S\u0000T\u0000A\u0000M\u0000P\u0000(\u00003\u0000)\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000,\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000i\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000n\u0000a\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000i\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000s\u0000i\u0000z\u0000e\u0000\"\u0000 \u0000I\u0000N\u0000T\u0000E\u0000G\u0000E\u0000R\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000d\u0000a\u0000t\u0000a\u0000\"\u0000 \u0000B\u0000Y\u0000T\u0000E\u0000A\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000(\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000(\u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000_\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000_\u0000c\u0000r\u0000e\u0000a\u0000t\u0000e\u0000d\u0000A\u0000t\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000\"\u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000,\u0000 \u0000\"\u0000c\u0000r\u0000e\u0000a\u0000t\u0000e\u0000d\u0000A\u0000t\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000U\u0000s\u0000e\u0000r\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250816_004527_require_thread_participants/migration.sql",
      "size": 6096,
      "hash": "c7b4ec85432d37a792df6fab0bc012c3ab4ccef3",
      "textSample": "��-\u0000-\u0000 \u0000C\u00044\u00040\u0004;\u00048\u0004B\u0004L\u0004 \u0000A\u0004>\u0004>\u00041\u0004I\u00045\u0004=\u00048\u0004O\u0004 \u00008\u00047\u0004 \u0000B\u0004@\u00045\u00044\u0004>\u00042\u0004 \u0000A\u0004 \u0000N\u0000U\u0000L\u0000L\u0000-\u0000C\u0004G\u00040\u0004A\u0004B\u0004=\u00048\u0004:\u00040\u0004<\u00048\u0004\r\u0000\n\u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000F\u0000R\u0000O\u0000M\u0000 \u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000\"\u0000\r\u0000\n\u0000W\u0000H\u0000E\u0000R\u0000E\u0000 \u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000 \u0000I\u0000N\u0000 \u0000(\u0000S\u0000E\u0000L\u0000E\u0000C\u0000T\u0000 \u0000\"\u0000i\u0000d\u0000\"\u0000 \u0000F\u0000R\u0000O\u0000M\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000W\u0000H\u0000E\u0000R\u0000E\u0000 \u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000 \u0000I\u0000S\u0000 \u0000N\u0000U\u0000L\u0000L\u0000 \u0000O\u0000R\u0000 \u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000 \u0000I\u0000S\u0000 \u0000N\u0000U\u0000L\u0000L\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u00044\u00040\u0004;\u00048\u0004B\u0004L\u0004 \u0000A\u00040\u0004<\u00048\u0004 \u0000B\u0004@\u00045\u00044\u0004K\u0004 \u0000A\u0004 \u0000N\u0000U\u0000L\u0000L\u0000-\u0000C\u0004G\u00040\u0004A\u0004B\u0004=\u00048\u0004:\u00040\u0004<\u00048\u0004\r\u0000\n\u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000F\u0000R\u0000O\u0000M\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000W\u0000H\u0000E\u0000R\u0000E\u0000 \u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000 \u0000I\u0000S\u0000 \u0000N\u0000U\u0000L\u0000L\u0000 \u0000O\u0000R\u0000 \u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000 \u0000I\u0000S\u0000 \u0000N\u0000U\u0000L\u0000L\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0004=\u0004O\u0004B\u0004L\u0004 \u0000A\u0004B\u00040\u0004@\u0004K\u00045\u0004 \u0000F\u0000K\u0000 \u0000A\u0004>\u0004 \u0000A\u0004B\u0004@\u00040\u0004B\u00045\u00043\u00048\u00045\u00049\u0004 \u0000S\u0000E\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000D\u0000R\u0000O\u0000P\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000I\u0000F\u0000 \u0000E\u0000X\u0000I\u0000S\u0000T\u0000S\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000a\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000;\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000D\u0000R\u0000O\u0000P\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000I\u0000F\u0000 \u0000E\u0000X\u0000I\u0000S\u0000T\u0000S\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000b\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u00046\u00045\u0004A\u0004B\u0004>\u0004G\u00048\u0004B\u0004L\u0004 \u0000A\u0004B\u0004>\u0004;\u00041\u0004F\u0004K\u0004\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000C\u0000O\u0000L\u0000U\u0000M\u0000N\u0000 \u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000 \u0000S\u0000E\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000;\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000C\u0000O\u0000L\u0000U\u0000M\u0000N\u0000 \u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000 \u0000S\u0000E\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u00007\u00040\u0004=\u0004>\u00042\u0004>\u0004 \u0000?\u0004>\u00042\u00045\u0004A\u00048\u0004B\u0004L\u0004 \u0000F\u0000K\u0000 \u0000A\u0004 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000/\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000a\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000U\u0000s\u0000e\u0000r\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000b\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000U\u0000s\u0000e\u0000r\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000>\u0004?\u0004F\u00048\u0004>\u0004=\u00040\u0004;\u0004L\u0004=\u0004>\u0004:\u0000 \u0000C\u0004A\u0004:\u0004>\u0004@\u00045\u0004=\u00048\u00045\u0004 \u0000?\u0004>\u00048\u0004A\u0004:\u00040\u0004 \u0000?\u00040\u0004@\u0004K\u0004\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000I\u0000F\u0000 \u0000N\u0000O\u0000T\u0000 \u0000E\u0000X\u0000I\u0000S\u0000T\u0000S\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000p\u0000a\u0000i\u0000r\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000(\u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000,\u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000D\u0000r\u0000o\u0000p\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000D\u0000R\u0000O\u0000P\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000a\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000D\u0000r\u0000o\u0000p\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000D\u0000R\u0000O\u0000P\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000b\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000l\u0000t\u0000e\u0000r\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000C\u0000O\u0000L\u0000U\u0000M\u0000N\u0000 \u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000 \u0000S\u0000E\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000C\u0000O\u0000L\u0000U\u0000M\u0000N\u0000 \u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000 \u0000S\u0000E\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000r\u0000e\u0000a\u0000d\u0000A\u0000t\u0000\"\u0000 \u0000T\u0000I\u0000M\u0000E\u0000S\u0000T\u0000A\u0000M\u0000P\u0000(\u00003\u0000)\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000,\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000i\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000n\u0000a\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000i\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000s\u0000i\u0000z\u0000e\u0000\"\u0000 \u0000I\u0000N\u0000T\u0000E\u0000G\u0000E\u0000R\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000d\u0000a\u0000t\u0000a\u0000\"\u0000 \u0000B\u0000Y\u0000T\u0000E\u0000A\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000(\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000(\u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250816_182139_cascade_user_delete_fix/migration.sql",
      "size": 3398,
      "hash": "76887c8f8656a16e9c97b7444d3949b1aa20ac9e",
      "textSample": "-- === Каскадное удаление пользователя и связанных данных ===\n\n-- Thread.aId / Thread.bId\nALTER TABLE \"Thread\" DROP CONSTRAINT IF EXISTS \"Thread_aId_fkey\";\nALTER TABLE \"Thread\" DROP CONSTRAINT IF EXISTS \"Thread_bId_fkey\";\n\nALTER TABLE \"Thread\"\n  ADD CONSTRAINT \"Thread_aId_fkey\"\n  FOREIGN KEY (\"aId\") REFERENCES \"User\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\nALTER TABLE \"Thread\"\n  ADD CONSTRAINT \"Thread_bId_fkey\"\n  FOREIGN KEY (\"bId\") REFERENCES \"User\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\n-- Message.authorId / Message.threadId\nALTER TABLE \"Message\" DROP CONSTRAINT IF EXISTS \"Message_authorId_fkey\";\nALTER TABLE \"Message\" DROP CONSTRAINT IF EXISTS \"Message_threadId_fkey\";\n\nALTER TABLE \"Message\"\n  ADD CONSTRAINT \"Message_authorId_fkey\"\n  FOREIGN KEY (\"authorId\") REFERENCES \"User\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\nALTER TABLE \"Message\"\n  ADD CONSTRAINT \"Message_threadId_fkey\"\n  FOREIGN KEY (\"threadId\") REFERENCES \"Thread\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\n-- Attachment.messageId\nALTER TABLE \"Attachment\" DROP CONSTRAINT IF EXISTS \"Attachment_messageId_fkey\";\n\nALTER TABLE \"Attachment\"\n  ADD CONSTRAINT \"Attachment_messageId_fkey\"\n  FOREIGN KEY (\"messageId\") REFERENCES \"Message\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\n-- ReadMark.threadId / ReadMark.userId\nALTER TABLE \"ReadMark\" DROP CONSTRAINT IF EXISTS \"ReadMark_threadId_fkey\";\nALTER TABLE \"ReadMark\" DROP CONSTRAINT IF EXISTS \"ReadMark_userId_fkey\";\n\nALTER TABLE \"ReadMark\"\n  ADD CONSTRAINT \"ReadMark_threadId_fkey\"\n  FOREIGN KEY (\"threadId\") REFERENCES \"Thread\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\nALTER TABLE \"ReadMark\"\n  ADD CONSTRAINT \"ReadMark_userId_fkey\"\n  FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\n-- GroupMember.userId / GroupMember.groupId\nALTER TABLE \"GroupMember\" DROP CONSTRAINT IF EXISTS \"GroupMember_userId_fkey\";\nALTER TABLE \"GroupMember\" DROP CONSTRAINT IF EXISTS \"GroupMember_groupId_fkey\";\n\nALTER TABLE \"GroupMember\"\n  ADD CONSTRAINT \"GroupMember_userId_fkey\"\n  FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\nALTER TABLE \"GroupMember\"\n  ADD CONSTRAINT \"GroupMember_groupId_fkey\"\n  FOREIGN KEY (\"groupId\") REFERENCES \"Group\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\n-- TaskAssignee.userId / TaskAssignee.taskId\nALTER TABLE \"TaskAssignee\" DROP CONSTRAINT IF EXISTS \"TaskAssignee_userId_fkey\";\nALTER TABLE \"TaskAssignee\" DROP CONSTRAINT IF EXISTS \"TaskAssignee_taskId_fkey\";\n\nALTER TABLE \"TaskAssignee\"\n  ADD CONSTRAINT \"TaskAssignee_userId_fkey\"\n  FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\nALTER TABLE \"TaskAssignee\"\n  ADD CONSTRAINT \"TaskAssignee_taskId_fkey\"\n  FOREIGN KEY (\"taskId\") REFERENCES \"Task\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\n-- MessageHide.messageId / MessageHide.userId\nALTER TABLE \"MessageHide\" DROP CONSTRAINT IF EXISTS \"MessageHide_messageId_fkey\";\nALTER TABLE \"MessageHide\" DROP CONSTRAINT IF EXISTS \"MessageHide_userId_fkey\";\n\nALTER TABLE \"MessageHide\"\n  ADD CONSTRAINT \"MessageHide_messageId_fkey\"\n  FOREIGN KEY (\"messageId\") REFERENCES \"Message\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;\n\nALTER TABLE \"MessageHide\"\n  ADD CONSTRAINT \"MessageHide_userId_fkey\"\n  FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\")\n  ON UPDATE CASCADE ON DELETE CASCADE;",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250816_add_subjects/migration.sql",
      "size": 1041,
      "hash": "ed591842a73e949d2804a5502277e550ce137b43",
      "textSample": "-- CreateTable Subject\r\nCREATE TABLE \"Subject\" (\r\n  \"id\"   TEXT NOT NULL,\r\n  \"name\" TEXT NOT NULL,\r\n  CONSTRAINT \"Subject_pkey\" PRIMARY KEY (\"id\"),\r\n  CONSTRAINT \"Subject_name_key\" UNIQUE (\"name\")\r\n);\r\n\r\n-- CreateTable SubjectMember\r\nCREATE TABLE \"SubjectMember\" (\r\n  \"id\"        TEXT NOT NULL,\r\n  \"userId\"    TEXT NOT NULL,\r\n  \"subjectId\" TEXT NOT NULL,\r\n  CONSTRAINT \"SubjectMember_pkey\" PRIMARY KEY (\"id\"),\r\n  CONSTRAINT \"SubjectMember_userId_subjectId_key\" UNIQUE (\"userId\",\"subjectId\"),\r\n  CONSTRAINT \"SubjectMember_userId_fkey\"\r\n    FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\")\r\n    ON UPDATE CASCADE ON DELETE CASCADE,\r\n  CONSTRAINT \"SubjectMember_subjectId_fkey\"\r\n    FOREIGN KEY (\"subjectId\") REFERENCES \"Subject\"(\"id\")\r\n    ON UPDATE CASCADE ON DELETE CASCADE\r\n);\r\n\r\n-- (при желании индексы на lookups)\r\nCREATE INDEX \"Subject_name_idx\" ON \"Subject\" (\"name\");\r\nCREATE INDEX \"SubjectMember_userId_idx\" ON \"SubjectMember\" (\"userId\");\r\nCREATE INDEX \"SubjectMember_subjectId_idx\" ON \"SubjectMember\" (\"subjectId\");\r\n",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250817_010445_sync_to_prisma/migration.sql",
      "size": 1306,
      "hash": "f0ce2b4dd78cdbb18a9772e81c254b0da28dad65",
      "textSample": "-- DropIndex\r\nDROP INDEX \"public\".\"Subject_name_idx\";\r\n\r\n-- DropIndex\r\nDROP INDEX \"public\".\"SubjectMember_subjectId_idx\";\r\n\r\n-- DropIndex\r\nDROP INDEX \"public\".\"SubjectMember_userId_idx\";\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"Message\" ALTER COLUMN \"editedAt\" SET DATA TYPE TIMESTAMP(3),\r\nALTER COLUMN \"deletedAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"ReadMark\" ALTER COLUMN \"readAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"Task\" ALTER COLUMN \"createdAt\" SET DATA TYPE TIMESTAMP(3),\r\nALTER COLUMN \"updatedAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"TaskAssignee\" ALTER COLUMN \"assignedAt\" SET DATA TYPE TIMESTAMP(3),\r\nALTER COLUMN \"completedAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"Thread\" ALTER COLUMN \"aId\" SET NOT NULL,\r\nALTER COLUMN \"bId\" SET NOT NULL;\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"GroupMember_userId_groupId_key\" ON \"public\".\"GroupMember\"(\"userId\", \"groupId\");\r\n\r\n-- RenameIndex\r\nALTER INDEX \"public\".\"Attachment_message_idx\" RENAME TO \"Attachment_messageId_idx\";\r\n\r\n-- RenameIndex\r\nALTER INDEX \"public\".\"Message_thread_created_idx\" RENAME TO \"Message_threadId_createdAt_idx\";\r\n\r\n-- RenameIndex\r\nALTER INDEX \"public\".\"ReadMark_user_idx\" RENAME TO \"ReadMark_userId_idx\";\r\n\r\n",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250817_010821_sync_to_prisma/migration.sql",
      "size": 1380,
      "hash": "4c18e136ad88ec02e11a6c6c4d9020e975612b80",
      "textSample": "-- DropIndex\r\nDROP INDEX IF EXISTS \"public\".\"Subject_name_idx\";\r\n\r\n-- DropIndex\r\nDROP INDEX IF EXISTS \"public\".\"SubjectMember_subjectId_idx\";\r\n\r\n-- DropIndex\r\nDROP INDEX IF EXISTS \"public\".\"SubjectMember_userId_idx\";\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"Message\" ALTER COLUMN \"editedAt\" SET DATA TYPE TIMESTAMP(3),\r\nALTER COLUMN \"deletedAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"ReadMark\" ALTER COLUMN \"readAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"Task\" ALTER COLUMN \"createdAt\" SET DATA TYPE TIMESTAMP(3),\r\nALTER COLUMN \"updatedAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"TaskAssignee\" ALTER COLUMN \"assignedAt\" SET DATA TYPE TIMESTAMP(3),\r\nALTER COLUMN \"completedAt\" SET DATA TYPE TIMESTAMP(3);\r\n\r\n-- AlterTable\r\nALTER TABLE \"public\".\"Thread\" ALTER COLUMN \"aId\" SET NOT NULL,\r\nALTER COLUMN \"bId\" SET NOT NULL;\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX IF NOT EXISTS \"GroupMember_userId_groupId_key\" ON \"public\".\"GroupMember\"(\"userId\", \"groupId\");\r\n\r\n-- RenameIndex\r\nALTER INDEX IF EXISTS \"public\".\"Attachment_message_idx\" RENAME TO \"Attachment_messageId_idx\";\r\n\r\n-- RenameIndex\r\nALTER INDEX IF EXISTS \"public\".\"Message_thread_created_idx\" RENAME TO \"Message_threadId_createdAt_idx\";\r\n\r\n-- RenameIndex\r\nALTER INDEX IF EXISTS \"public\".\"ReadMark_user_idx\" RENAME TO \"ReadMark_userId_idx\";\r\n\r\n",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250817_task_audit_and_status/migration.sql",
      "size": 2037,
      "hash": "98c29f9fd990637abb10db98eaaa2d0b7c4248b2",
      "textSample": "-- Уникальный ключ на пару (taskId, userId) — добавляем, только если его ещё нет\r\nDO $$\r\nBEGIN\r\n  IF NOT EXISTS (\r\n    SELECT 1\r\n    FROM pg_constraint c\r\n    JOIN pg_class t ON t.oid = c.conrelid\r\n    WHERE t.relname = 'TaskAssignee'\r\n      AND c.conname = 'TaskAssignee_taskId_userId_key'\r\n  ) THEN\r\n    ALTER TABLE \"TaskAssignee\"\r\n      ADD CONSTRAINT \"TaskAssignee_taskId_userId_key\"\r\n      UNIQUE (\"taskId\", \"userId\");\r\n  END IF;\r\nEND $$;\r\n\r\n-- 1) Task: аудит + связь с создателем\r\nALTER TABLE \"Task\"\r\n  ADD COLUMN IF NOT EXISTS \"createdAt\"     TIMESTAMPTZ NOT NULL DEFAULT now(),\r\n  ADD COLUMN IF NOT EXISTS \"updatedAt\"     TIMESTAMPTZ NOT NULL DEFAULT now(),\r\n  ADD COLUMN IF NOT EXISTS \"createdById\"   TEXT NULL,\r\n  ADD COLUMN IF NOT EXISTS \"createdByName\" TEXT NULL;\r\n\r\n-- FK на User(id), удаление создателя -> SET NULL, апдейт -> CASCADE\r\nDO $$\r\nBEGIN\r\n  IF NOT EXISTS (\r\n    SELECT 1\r\n    FROM pg_constraint\r\n    WHERE conname = 'Task_createdById_fkey'\r\n  ) THEN\r\n    ALTER TABLE \"Task\"\r\n      ADD CONSTRAINT \"Task_createdById_fkey\"\r\n      FOREIGN KEY (\"createdById\")\r\n      REFERENCES \"User\"(\"id\")\r\n      ON DELETE SET NULL\r\n      ON UPDATE CASCADE;\r\n  END IF;\r\nEND $$;\r\n\r\n-- Индексы\r\nCREATE INDEX IF NOT EXISTS \"Task_createdById_idx\" ON \"Task\" (\"createdById\");\r\nCREATE INDEX IF NOT EXISTS \"Task_dueDate_idx\"     ON \"Task\" (\"dueDate\");\r\n\r\n-- 2) TaskAssignee: статусы исполнителя\r\nALTER TABLE \"TaskAssignee\"\r\n  ADD COLUMN IF NOT EXISTS \"status\"       TEXT NOT NULL DEFAULT 'in_progress',\r\n  ADD COLUMN IF NOT EXISTS \"assignedAt\"   TIMESTAMPTZ NOT NULL DEFAULT now(),\r\n  ADD COLUMN IF NOT EXISTS \"completedAt\"  TIMESTAMPTZ NULL;\r\n\r\n-- Индексы\r\nCREATE INDEX IF NOT EXISTS \"TaskAssignee_userId_idx\"  ON \"TaskAssignee\" (\"userId\");\r\nCREATE INDEX IF NOT EXISTS \"TaskAssignee_taskId_idx\"  ON \"TaskAssignee\" (\"taskId\");\r\nCREATE INDEX IF NOT EXISTS \"TaskAssignee_status_idx\"  ON \"TaskAssignee\" (\"status\");\r\n",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/init_baseline_20250811_225344/migration.sql",
      "size": 14,
      "hash": "3b17ac717a2294785f1f977628b9cba0de0e2c03",
      "textSample": "/* baseline */",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/migration_lock.toml",
      "size": 128,
      "hash": "7abbf1b5bc2ed90d381336ef493ef3a44c488e3d",
      "textSample": "# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = \"postgresql\"\n",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/schema.prisma",
      "size": 5982,
      "hash": "55848a9d37eab62c0f5d00ef679ac19ba5ebb61f",
      "textSample": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\") // pooled (…-pooler…)\n  directUrl = env(\"DIRECT_URL\")   // direct (без -pooler), нужен только для dev-команд\n}\n\nmodel User {\n  id               String    @id @default(uuid())\n  name             String\n  username         String?   @unique\n  email            String?   @unique\n  phone            String?   @unique\n  birthday         DateTime?\n  classroom        String?\n  role             String?\n  avatarUrl        String?\n  telegram         String?\n  about            String?\n  notifyEmail      Boolean   @default(true)\n  notifyTelegram   Boolean   @default(false)\n  subjects         String?\n  methodicalGroups String?\n  passwordHash     String?\n  lastSeen         DateTime?\n\n  messages           Message[]       @relation(\"UserMessages\")\n  threadsA           Thread[]        @relation(\"ThreadA\")\n  threadsB           Thread[]        @relation(\"ThreadB\")\n  readMarks          ReadMark[]      @relation(\"ReadMarkUser\")\n  groupMemberships   GroupMember[]\n  taskAssignments    TaskAssignee[]\n  subjectMemberships SubjectMember[]\n  createdTasks       Task[]          @relation(\"TaskCreatedBy\")\n  // обратная сторона связи для MessageHide\n  messageHides MessageHide[]\n}\n\nmodel Group {\n  id      String        @id @default(uuid())\n  name    String\n  members GroupMember[]\n}\n\nmodel GroupMember {\n  id      String @id @default(uuid())\n  userId  String\n  groupId String\n  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, groupId])\n}\n\nmodel Thread {\n  id              String    @id @default(uuid())\n  aId             String\n  bId             String\n  lastMessageAt   DateTime?\n  lastMessageText String?\n  title           String    @default(\"\")\n\n  a User @relation(\"ThreadA\", fields: [aId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  b User @relation(\"ThreadB\", fields: [bId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  messages  Message[]\n  readMarks ReadMark[] @relation(\"ReadMarkThread\")\n\n  @@index([lastMessageAt, id])\n}\n\nmodel Message {\n  id        String   @id @default(uuid())\n  createdAt DateTime @default(now())\n  text      String\n  authorId  String\n  threadId  String\n\n  editedAt  DateTime?\n  deletedAt DateTime?\n\n  author User   @relation(\"UserMessages\", fields: [authorId], references: [id], onDelete: Cascade)\n  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)\n\n  attachments Attachment[]  @relation(\"MessageAttachments\")\n  hides       MessageHide[]\n\n  @@index([threadId, createdAt])\n}\n\nmodel MessageHide {\n  messageId String\n  userId    String\n\n  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([messageId, userId])\n  @@index([userId])\n}\n\nmodel Task {\n  id            String   @id @default(uuid())\n  title         String\n  description   String\n  dueDate       DateTime\n  hidden        Boolean  @default(false)\n  priority      String   @default(\"normal\")\n\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @default(now()) @updatedAt\n  createdById   String?\n  createdByName String?\n\n  createdBy     User?    @relation(\"TaskCreatedBy\", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)\n\n  assignees     TaskAssignee[]\n  tags          TaskTag[]\n\n  @@index([createdById])\n  @@index([dueDate])\n}\n\nmodel TaskAssignee {\n  id          String   @id @default(uuid())\n  taskId      String\n  userId      String\n  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)\n  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  // статусы исполнителя (соответствует прод-миграции)\n  status      String   @default(\"in_progress\") // 'in_progress' | ",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/seed.cjs",
      "size": 764,
      "hash": "fb18e2eea7347bda1908cc3be22262d65a46032f",
      "textSample": null,
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": "scripts/fix-admin.cjs",
      "size": 629,
      "hash": "e6f33ebbe53282ae1ee4c27fb655f17776de182e",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": "scripts/list-endpoints.mjs",
      "size": 2236,
      "hash": "f74750e57f3edcdc5d6d2f4541dc4c81ce4b8cdc",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": "scripts/upsert-admin.cjs",
      "size": 846,
      "hash": "1b5aa627d845ff0c1bcbe458f24779d2781af002",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": "styles/globals.css",
      "size": 3164,
      "hash": "29a13eb25ca650d32d68ad25b8c7e5fc5ae54e26",
      "textSample": "/* ====== Тема / токены ====== */\n:root{\n  --brand:#8d2828;\n  --bg:#f7f7f8;\n  --text:#111827;\n  --muted:#374151;\n\n  --border: rgba(229,231,235,.8);\n  --glass-top: rgba(255,255,255,.68);\n  --glass-bottom: rgba(255,255,255,.40);\n  --glass-shadow: 0 6px 16px rgba(0,0,0,.06);\n}\n\n/* ====== База/ресет (минимально) ====== */\n*,*::before,*::after{ box-sizing:border-box; }\nhtml,body{ height:100%; }\nbody{\n  margin:0;\n  color:var(--text);\n  background:var(--bg);\n  font-family: ui-sans-serif, system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\";\n  text-rendering:optimizeLegibility;\n  -webkit-font-smoothing:antialiased;\n  -moz-osx-font-smoothing:grayscale;\n}\nbutton,input,select,textarea{ font:inherit; color:inherit; }\nbutton{ cursor:pointer; }\n:focus-visible{ outline:3px solid rgba(207,227,255,.7); outline-offset:2px; border-radius:8px; }\n\n/* ====== Ссылки — глобально без подчёркивания ====== */\na, a:visited, a:active{ color:inherit; text-decoration:none; }\na:hover{ text-decoration:none; }\n\n/* ====== Утилиты стекла (по стилю сайдбара) ====== */\n.u-glass{\n  background:linear-gradient(180deg,var(--glass-top),var(--glass-bottom));\n  backdrop-filter:saturate(180%) blur(10px);\n  -webkit-backdrop-filter:saturate(180%) blur(10px);\n  border:1px solid var(--border);\n  box-shadow:var(--glass-shadow), inset 0 1px 0 rgba(255,255,255,.35);\n  border-radius:16px;\n}\n.u-glass-lite{\n  background:rgba(255,255,255,.55);\n  backdrop-filter:saturate(160%) blur(6px);\n  -webkit-backdrop-filter:saturate(160%) blur(6px);\n  border:1px solid rgba(229,231,235,.7);\n  border-radius:14px;\n  box-shadow:inset 0 1px 0 rgba(255,255,255,.35);\n}\n\n/* ====== Таблицы (общая база) ====== */\ntable{ border-collapse:separate; border-spacing:0; }\n\n/* ====== Страницы авторизации (оставил, но в «стекле») ====== */\n.auth-wrap{\n  max-width:420px; margin:64px auto; padding:16px; border-radius:16px;\n  background:linear-gradient(180deg,var(--glass-top),var(--glass-bottom));\n  backdrop-filter:saturate(180%) blur(10px);\n  -webkit-backdrop-filter:saturate(180%) blur(10px);\n  border:1px solid var(--border);\n  box-shadow:var(--glass-shadow), inset 0 1px 0 rgba(255,255,255,.35);\n}\n.auth-title{ font-size:22px; margin:0 0 12px; font-weight:900; color:var(--text); }\n.auth-error{ color:#b91c1c; margin:0 0 10px; }\n.auth-form{ display:grid; gap:12px; }\n.auth-form label{ display:grid; gap:6px; }\n.auth-form input{\n  padding:10px 12px; border:1px solid rgba(229,231,235,.9);\n  border-radius:10px; background:#fff; outline:none;\n}\n.auth-form input:focus{\n  border-color:#cfe3ff; box-shadow:0 0 0 3px rgba(207,227,255,.4);\n}\n.auth-form button{\n  height:36px; border:1px solid var(--brand); border-radius:10px;\n  background:var(--brand); color:#fff;\n}\n.auth-form button:hover{ filter:brightness(.96); }\n\n/* ====== На всякий: ссылки внутри кликабельных карточек/плиток без подчёркиваний ====== */\n[role=\"button\"], .tile-link, .navlink{ text-decoration:none !important; }\n",
      "kind": "style",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "tools/snapshot.js",
      "size": 9459,
      "hash": "85a6c5673d5a476e65924e67287091cc787e4cbc",
      "textSample": "// tools/snapshot.js\r\n/* \r\n  Проектный снимок: строит дерево и JSON-индекс проекта Next.js (App Router).\r\n  Запуск: node tools/snapshot.js [--include-env-names] [--max-bytes=16384]\r\n*/\r\n\r\nconst fs = require('fs');\r\nconst fsp = fs.promises;\r\nconst path = require('path');\r\nconst crypto = require('crypto');\r\n\r\nconst ROOT = process.cwd();\r\nconst OUT_DIR = path.join(ROOT, 'project-snapshot');\r\nconst MAX_BYTES = Number((process.argv.find(a => a.startsWith('--max-bytes=')) || '').split('=')[1] || 16384);\r\nconst INCLUDE_ENV_NAMES = process.argv.includes('--include-env-names');\r\n\r\nconst IGNORE_DIRS = new Set([\r\n  'node_modules', '.next', '.turbo', '.vercel', '.git', '.cache', 'coverage', 'dist', 'build'\r\n]);\r\n\r\nconst PAGE_FILES = new Set([\r\n  'page.tsx', 'page.jsx',\r\n  'layout.tsx', 'layout.jsx',\r\n  'route.ts', 'route.js',\r\n  'loading.tsx', 'loading.jsx',\r\n  'error.tsx', 'error.jsx',\r\n  'template.tsx', 'template.jsx',\r\n  'default.tsx', 'default.jsx',\r\n  'not-found.tsx', 'not-found.jsx'\r\n]);\r\n\r\nasync function ensureOut() {\r\n  await fsp.mkdir(OUT_DIR, { recursive: true });\r\n}\r\n\r\nfunction isTextFile(fp) {\r\n  return /\\.(tsx?|jsx?|css|md|json|yml|yaml|env|toml|prisma|sql|svg|html?)$/i.test(fp);\r\n}\r\n\r\nasync function sha1OfFile(fp) {\r\n  try {\r\n    const h = crypto.createHash('sha1');\r\n    const s = fs.createReadStream(fp);\r\n    return await new Promise((res, rej) => {\r\n      s.on('data', d => h.update(d));\r\n      s.on('end', () => res(h.digest('hex')));\r\n      s.on('error', rej);\r\n    });\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction appRouteFromFile(appDir, fileAbs) {\r\n  // Преобразуем app/(group)/users/[id]/page.tsx -> /users/[id]\r\n  const rel = path.relative(appDir, fileAbs).replaceAll(path.sep, '/');\r\n  const parts = rel.split('/');\r\n  // убираем файл\r\n  parts.pop();\r\n  const segments = parts.filter(seg => !(seg.startsWith('(') && seg.endsWith(')')));\r\n  const route = '/' + segments.join('/');\r\n  return route.replace(/\\/+/g, '/');\r\n}\r\n\r\nfunction detectIsClient(fileText) {\r\n  // 'use client' в начале файла?\r\n  const head = fileText.slice(0, 512);\r\n  return /['\"]use client['\"]/.test(head);\r\n}\r\n\r\nfunction detectHasUseServer(fileText) {\r\n  return /['\"]use server['\"]/.test(fileText);\r\n}\r\n\r\nfunction detectExports(fileText) {\r\n  const exp = {\r\n    dynamic: /export\\s+const\\s+dynamic\\s*=\\s*['\"`][^'\"`]+['\"`]/.test(fileText),\r\n    revalidate: /export\\s+const\\s+revalidate\\s*=/.test(fileText),\r\n    generateMetadata: /export\\s+async\\s+function\\s+generateMetadata|export\\s+function\\s+generateMetadata/.test(fileText),\r\n    metadata: /export\\s+const\\s+metadata\\s*=/.test(fileText),\r\n  };\r\n  return exp;\r\n}\r\n\r\nfunction detectSearchParamsMention(fileText) {\r\n  // не парсим строго типы, просто фиксируем, что параметр встречается в сигнатуре\r\n  return /(export\\s+default\\s+async\\s+function|export\\s+default\\s+function)\\s*\\([\\s\\S]*searchParams\\s*:?\\s*/.test(fileText);\r\n}\r\n\r\nasync function readHead(fp, maxBytes = MAX_BYTES) {\r\n  try {\r\n    const fh = await fsp.open(fp, 'r');\r\n    const { buffer, bytesRead } = await fh.read(Buffer.alloc(Math.min(maxBytes, (await fh.stat()).size)), 0, Math.min(maxBytes, (await fh.stat()).size), 0);\r\n    await fh.close();\r\n    return buffer.toString('utf8', 0, bytesRead);\r\n  } catch {\r\n    return '';\r\n  }\r\n}\r\n\r\nasync function walk(dir, acc = []) {\r\n  const entries = await fsp.readdir(dir, { withFileTypes: true });\r\n  for (const e of entries) {\r\n    if (IGNORE_DIRS.has(e.name)) continue;\r\n    const abs = path.join(dir, e.name);\r\n    if (e.isDirectory()) {\r\n      await walk(abs, acc);\r\n    } else {\r\n      acc.push(abs);\r\n    }\r\n  }\r\n  return acc;\r\n}\r\n\r\nfunction toTree(lines) {\r\n  // Формируем красивое дерево для README/вложения\r\n  const root = {};\r\n  for (const rel of lines) {\r\n    const parts = rel.split('/');\r\n    let node = root;\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const p = parts[i];\r\n      node.children = node.children || {};\r\n      node.children[p] = node.children[p] || {};\r\n      node = node.children[p];\r\n   ",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "tsconfig.json",
      "size": 702,
      "hash": "c74862a159ab404d1849b87ce1248ead926ad00f",
      "textSample": "{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ES2020\",\r\n    \"lib\": [\r\n      \"dom\",\r\n      \"esnext\"\r\n    ],\r\n    \"module\": \"esnext\",\r\n    \"moduleResolution\": \"bundler\",\r\n    \"strict\": true,\r\n    \"noEmit\": true,\r\n    \"jsx\": \"preserve\",\r\n    \"esModuleInterop\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"skipLibCheck\": true,\r\n    \"paths\": {\r\n      \"@/*\": [\r\n        \"./*\"\r\n      ]\r\n    },\r\n    \"allowJs\": true,\r\n    \"incremental\": true,\r\n    \"isolatedModules\": true,\r\n    \"plugins\": [\r\n      {\r\n        \"name\": \"next\"\r\n      }\r\n    ],\r\n    \"baseUrl\": \".\"\r\n  },\r\n  \"include\": [\r\n    \"**/*.ts\",\r\n    \"**/*.tsx\",\r\n    \"next-env.d.ts\",\r\n    \".next/types/**/*.ts\"\r\n  ],\r\n  \"exclude\": [\r\n    \"node_modules\"\r\n  ]\r\n}",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "tsconfig.tsbuildinfo",
      "size": 110634,
      "hash": "2753f4b9414f9d95f3bf3fc73cff7aba0f166937",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    }
  ]
}