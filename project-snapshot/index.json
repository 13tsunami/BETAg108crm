{
  "generatedAt": "2025-08-16T09:34:12.258Z",
  "root": "BETAg108crm.clean",
  "node": "v24.5.0",
  "next": "unknown",
  "uiHints": {
    "brand": "#8d2828",
    "sidebarWidthPx": 22
  },
  "envVarNames": [],
  "files": [
    {
      "path": ".env",
      "size": 588,
      "hash": "6f667ad5340ba3c2989827e39677535744bf93f7",
      "textSample": "NEXTAUTH_URL=http://localhost:3000\r\nNEXTAUTH_SECRET=NzdjNmRjMmJiNTc2NGZjNjg2OWM0Zjg2ZjI0OGUwNGI=\r\n\r\n# подключение к базе Neon\r\n# pooled (через PgBouncer) — для рантайма\r\nDATABASE_URL=\"postgresql://neondb_owner:npg_thIjF0Dr1dgo@ep-summer-frog-a2bmkiyw-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require\"\r\n\r\n# direct (без пула) — для миграций / seed\r\nDIRECT_URL=\"postgresql://neondb_owner:npg_thIjF0Dr1dgo@ep-summer-frog-a2bmkiyw.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require\"\r\n",
      "kind": "env",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": ".env.example",
      "size": 287,
      "hash": "e8afe59824c231c8557965af511c52316502cd1d",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": ".gitignore",
      "size": 46,
      "hash": "a5e5571681fac503d7e940750350eec2fc7743b7",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": ".introspection/endpoints.json",
      "size": 2302,
      "hash": "e97680e7090f11a5ff2bdec411cbfbd9efa7e3d7",
      "textSample": "[\n  {\n    \"route\": \"/api/auth/:nextauth*\",\n    \"methods\": []\n  },\n  {\n    \"route\": \"/api/chat/search-users\",\n    \"methods\": [\n      \"GET\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/sse/user/:id\",\n    \"methods\": [\n      \"GET\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/threads/:id\",\n    \"methods\": [\n      \"DELETE\",\n      \"GET\",\n      \"PATCH\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/threads/:id/messages\",\n    \"methods\": [\n      \"GET\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/threads/:id/read\",\n    \"methods\": [\n      \"GET\",\n      \"PUT\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/threads/ensure\",\n    \"methods\": [\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/threads/list\",\n    \"methods\": [\n      \"GET\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/typing\",\n    \"methods\": [\n      \"GET\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/users\",\n    \"methods\": [\n      \"GET\",\n      \"OPTIONS\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/users/_delete/:id\",\n    \"methods\": [\n      \"DELETE\",\n      \"OPTIONS\"\n    ]\n  },\n  {\n    \"route\": \"/api/chat/users/delete\",\n    \"methods\": [\n      \"OPTIONS\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/health\",\n    \"methods\": [\n      \"GET\"\n    ]\n  },\n  {\n    \"route\": \"/api/presence\",\n    \"methods\": [\n      \"GET\",\n      \"HEAD\",\n      \"OPTIONS\",\n      \"PATCH\",\n      \"POST\",\n      \"PUT\"\n    ]\n  },\n  {\n    \"route\": \"/api/profile\",\n    \"methods\": [\n      \"GET\",\n      \"PATCH\"\n    ]\n  },\n  {\n    \"route\": \"/api/profile/password\",\n    \"methods\": [\n      \"GET\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/tasks\",\n    \"methods\": [\n      \"DELETE\",\n      \"GET\",\n      \"PATCH\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/tasks/:id\",\n    \"methods\": [\n      \"DELETE\",\n      \"GET\",\n      \"PUT\"\n    ]\n  },\n  {\n    \"route\": \"/api/tasks/:id/assignees/:userid\",\n    \"methods\": [\n      \"PATCH\"\n    ]\n  },\n  {\n    \"route\": \"/api/tasks/:id/progress\",\n    \"methods\": [\n      \"GET\"\n    ]\n  },\n  {\n    \"route\": \"/api/users\",\n    \"methods\": [\n      \"GET\",\n      \"POST\",\n      \"PUT\"\n    ]\n  },\n  {\n    \"route\": \"/api/users/:id\",\n    \"methods\": [\n      \"GET\",\n      \"OPTIONS\",\n      \"PATCH\"\n    ]\n  },\n  {\n    \"route\": \"/api/users/:id/archive\",\n    \"methods\": [\n      \"OPTIONS\",\n      \"POST\"\n    ]\n  },\n  {\n    \"route\": \"/api/users/:id/groups\",\n    \"methods\": [\n      \"GET\"\n    ]\n  }\n]",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/ChatBoxClient.tsx",
      "size": 12176,
      "hash": "e062406b30bd07aa16f2d2ceedc7540f18bc3d5e",
      "textSample": "'use client';\r\n\r\nimport { useEffect, useMemo, useRef, useState, startTransition } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport s from './chat.module.css';\r\nimport {\r\n  sendMessageAction,\r\n  editMessageAction,\r\n  deleteMessageAction,\r\n  markReadAction,\r\n  deleteThreadAction,\r\n} from './actions';\r\n\r\n// ===== Types =====\r\ntype Msg = {\r\n  id: string;\r\n  text: string;\r\n  ts: string;       // ISO\r\n  authorId: string;\r\n  edited?: boolean;\r\n  deleted?: boolean;\r\n  temp?: { clientId: string }; // local-only marker for replacement\r\n};\r\n\r\ntype ChatApi = {\r\n  threadId: string;\r\n  push: (p: { messageId: string; text: string; authorId: string; ts: string; clientId?: string }) => void;\r\n  edit: (p: { messageId: string; text: string }) => void;\r\n  del:  (p: { messageId: string; scope: 'self'|'both' }) => void;\r\n  read: (p: { threadId: string }) => void;\r\n  onThreadDeleted: (p: { byName: string }) => void;\r\n};\r\n\r\ndeclare global {\r\n  interface Window { __chatApi?: ChatApi }\r\n}\r\n\r\nexport default function ChatBoxClient({\r\n  meId, threadId, peerReadAtIso, initial,\r\n}: { meId: string; threadId: string; peerReadAtIso: string | null; initial: Msg[] }) {\r\n  const router = useRouter();\r\n\r\n  const [msgs, setMsgs] = useState<Msg[]>(initial);\r\n  const [input, setInput] = useState('');\r\n  const [modalOf, setModalOf] = useState<Msg | null>(null);\r\n  const [editText, setEditText] = useState('');\r\n  const bottomRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const peerReadAt = useMemo(() => (peerReadAtIso ? new Date(peerReadAtIso) : null), [peerReadAtIso]);\r\n\r\n  // merge server -> client и зачистка висячих temp при серверном ререндере\r\n  useEffect(() => {\r\n    setMsgs(prev => {\r\n      const official = new Map(initial.map(m => [m.id, { ...m }]));\r\n      const sig = (m: Msg) => `${m.authorId}|${m.text}|${Math.floor(new Date(m.ts).getTime()/1000)}`;\r\n      const officialSig = new Set(initial.map(sig));\r\n      const carryTemps = prev.filter(m => m.temp && !officialSig.has(sig(m)));\r\n      const merged = [...Array.from(official.values()), ...carryTemps];\r\n      merged.sort((a,b) => a.ts.localeCompare(b.ts));\r\n      return merged;\r\n    });\r\n  }, [initial]);\r\n\r\n  // автоскролл\r\n  useEffect(() => { bottomRef.current?.scrollIntoView({ block:'end' }); }, []);\r\n  useEffect(() => { bottomRef.current?.scrollIntoView({ block:'end', behavior:'smooth' }); }, [msgs.length]);\r\n\r\n  // Глобальный API для Live: никогда не добавляем второй пузырь для моих событий\r\n  useEffect(() => {\r\n    const api: ChatApi = {\r\n      threadId,\r\n      push: (p) => {\r\n        setMsgs(xs => {\r\n          if (xs.some(m => m.id === p.messageId)) return xs; // уже есть\r\n          if (p.authorId === meId) {\r\n            // 1) точное попадание по clientId\r\n            if (p.clientId) {\r\n              const i = xs.findIndex(m => m.temp?.clientId === p.clientId);\r\n              if (i >= 0) {\r\n                const next = xs.slice();\r\n                next[i] = { id: p.messageId, text: p.text, ts: p.ts, authorId: p.authorId };\r\n                return next;\r\n              }\r\n            }\r\n            // 2) последний мой temp — заменяем его\r\n            const j = [...xs].map((m,i)=>[i,m] as const).reverse().find(([_,m]) => m.authorId===meId && m.temp)?.[0];\r\n            if (j !== undefined) {\r\n              const next = xs.slice();\r\n              next[j] = { id: p.messageId, text: p.text, ts: p.ts, authorId: p.authorId };\r\n              return next;\r\n            }\r\n            // 3) уже есть «почти такой же» real — ничего не делаем\r\n            const tReal = new Date(p.ts).getTime();\r\n            const existsSame = xs.some(m => m.authorId===meId && !m.temp && m.text===p.text && Math.abs(new Date(m.ts).getTime() - tReal) <= 30000);\r\n            if (existsSame) return xs;\r\n          }\r\n          // чужое сообщение — дописываем\r\n          return [...xs, { id: p.messageId, text: p.text, ts: p.ts, authorId: p.authorId }];\r\n        });\r\n      },\r\n      edit: (p) => setMsgs(xs => xs.map(m => m.",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/actions.ts",
      "size": 5683,
      "hash": "b0955f7db18bfb1de4c04fdea956fc3f3f2adb84",
      "textSample": "'use server';\r\n\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { redirect } from 'next/navigation';\r\nimport broker from './sse/broker';\r\n\r\nconst now = () => new Date();\r\nconst s = (v: unknown) => (typeof v === 'string' ? v : '');\r\n\r\nfunction requireUserId(session: any): string {\r\n  const id = session?.user?.id;\r\n  if (!id || typeof id !== 'string') redirect('/sign-in');\r\n  return id;\r\n}\r\n\r\nasync function participantsOf(threadId: string): Promise<[string, string]> {\r\n  const th = await prisma.thread.findUnique({\r\n    where: { id: threadId },\r\n    select: { aId: true, bId: true },\r\n  });\r\n  return [th?.aId || '', th?.bId || ''] as [string, string];\r\n}\r\n\r\nexport async function sendMessageAction(fd: FormData): Promise<void> {\r\n  const session = await auth();\r\n  const me = requireUserId(session);\r\n  const threadId = s(fd.get('threadId')).trim();\r\n  const text = s(fd.get('text')).trim();\r\n  const clientId = s(fd.get('clientId')).trim() || undefined;\r\n  if (!threadId || !text) return;\r\n\r\n  const th = await prisma.thread.findFirst({\r\n    where: { id: threadId, OR: [{ aId: me }, { bId: me }] },\r\n    select: { aId: true, bId: true },\r\n  });\r\n  if (!th) return;\r\n\r\n  const created = await prisma.$transaction(async (tx) => {\r\n    const m = await tx.message.create({\r\n      data: { threadId, authorId: me, text },\r\n      select: { id: true, createdAt: true, authorId: true, text: true },\r\n    });\r\n\r\n    await tx.thread.update({\r\n      where: { id: threadId },\r\n      data: { lastMessageAt: m.createdAt, lastMessageText: m.text },\r\n    });\r\n\r\n    await tx.readMark.upsert({\r\n      where: { threadId_userId: { threadId, userId: me } },\r\n      update: { readAt: now() },\r\n      create: { threadId, userId: me, readAt: now() },\r\n    });\r\n\r\n    return m;\r\n  });\r\n\r\n  broker.publish([th.aId, th.bId], {\r\n    type: 'message',\r\n    threadId,\r\n    at: Date.now(),\r\n    messageId: created.id,\r\n    authorId: created.authorId,\r\n    text: created.text,\r\n    ts: created.createdAt.toISOString(),\r\n    clientId, // ← ключ к замене temp -> real\r\n  } as any);\r\n}\r\n\r\nexport async function editMessageAction(fd: FormData): Promise<void> {\r\n  const session = await auth();\r\n  const me = requireUserId(session);\r\n  const messageId = s(fd.get('messageId')).trim();\r\n  const text = s(fd.get('text')).trim();\r\n  if (!messageId || !text) return;\r\n\r\n  const msg = await prisma.message.findFirst({\r\n    where: { id: messageId, authorId: me },\r\n    select: { id: true, threadId: true },\r\n  });\r\n  if (!msg) return;\r\n\r\n  await prisma.message.update({ where: { id: messageId }, data: { text, editedAt: now() } });\r\n\r\n  broker.publish(await participantsOf(msg.threadId), {\r\n    type: 'messageEdited',\r\n    threadId: msg.threadId,\r\n    at: Date.now(),\r\n    messageId,\r\n    byId: me,\r\n    text,\r\n  } as any);\r\n}\r\n\r\nexport async function deleteMessageAction(fd: FormData): Promise<void> {\r\n  const session = await auth();\r\n  const me = requireUserId(session);\r\n  const messageId = s(fd.get('messageId')).trim();\r\n  const scope = s(fd.get('scope')).trim(); // 'self' | 'both'\r\n  if (!messageId || !scope) return;\r\n\r\n  const m = await prisma.message.findUnique({\r\n    where: { id: messageId },\r\n    select: { id: true, threadId: true, authorId: true },\r\n  });\r\n  if (!m) return;\r\n\r\n  if (scope === 'self') {\r\n    await prisma.messageHide.upsert({\r\n      where: { messageId_userId: { messageId: m.id, userId: me } },\r\n      update: {},\r\n      create: { messageId: m.id, userId: me },\r\n    });\r\n  } else {\r\n    if (m.authorId !== me) return;\r\n    await prisma.message.update({ where: { id: m.id }, data: { text: '', deletedAt: now() } });\r\n  }\r\n\r\n  broker.publish(await participantsOf(m.threadId), {\r\n    type: 'messageDeleted',\r\n    threadId: m.threadId,\r\n    at: Date.now(),\r\n    messageId: m.id,\r\n    byId: me,\r\n    scope: scope as 'self' | 'both',\r\n  } as any);\r\n}\r\n\r\nexport async function markReadAction(fd: FormData): Promise<void> {\r\n  const session = await auth();\r\n  const me = req",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/chat.module.css",
      "size": 8136,
      "hash": "a012d43bd23490bbaa7dc142ebc6cfde2a70aa66",
      "textSample": ".chatRoot {\r\n  /* локально-скоупленные переменные темы для чатов */\r\n  --brand: #8d2828;\r\n  --glass-bg: rgba(255,255,255,0.55);\r\n  --glass-brd: rgba(229,231,235,0.8);\r\n  --ink: #0f172a;\r\n  --muted: #6b7280;\r\n  --line: #e5e7eb;\r\n\r\n  display: grid;\r\n  grid-template-columns: 380px 1fr;\r\n  min-height: 560px;\r\n  gap: 12px;\r\n}\r\n\r\n.glass {\r\n  background: var(--glass-bg);\r\n  backdrop-filter: saturate(180%) blur(10px);\r\n  -webkit-backdrop-filter: saturate(180%) blur(10px);\r\n  border: 1px solid var(--glass-brd);\r\n  border-radius: 12px;\r\n}\r\n\r\n.threads {\r\n  border-right: 0;\r\n  font-size: 13px;\r\n  padding: 12px;\r\n}\r\n\r\n.block { padding: 12px; }\r\n.block + .block { margin-top: 12px; }\r\n\r\n.blockTitle {\r\n  font-weight: 800;\r\n  margin-bottom: 8px;\r\n  position: relative;\r\n  color: var(--ink);\r\n}\r\n.blockTitle::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: 0; right: 0; bottom: -6px;\r\n  height: 2px;\r\n  background: var(--brand);\r\n  opacity: .12;\r\n  border-radius: 2px;\r\n}\r\n\r\n.searchBlock { position: relative; z-index: 20; }\r\n\r\n.searchRow { position: relative; margin-top: 10px; }\r\n.searchInput {\r\n  width: 100%;\r\n  padding: 8px 10px;\r\n  border: 1px solid var(--line);\r\n  border-radius: 10px;\r\n  outline: none;\r\n  background: #fff;\r\n}\r\n\r\n.dd {\r\n  position: absolute; left: 0; right: 0; top: calc(100% + 6px);\r\n  background: #fff;\r\n  border: 1px solid var(--line);\r\n  border-radius: 12px;\r\n  box-shadow: 0 12px 16px rgba(0,0,0,.08), 0 4px 6px rgba(0,0,0,.06);\r\n  z-index: 2000;\r\n  max-height: 260px;\r\n  overflow: auto;\r\n}\r\n.ddItem {\r\n  width: 100%;\r\n  text-align: left;\r\n  padding: 8px 10px;\r\n  border: 0;\r\n  background: transparent;\r\n  cursor: pointer;\r\n}\r\n.ddItem:hover { background: #f9fafb; }\r\n\r\n.threadWrap { position: relative; }\r\n.thread {\r\n  width: 100%;\r\n  text-align: left;\r\n  padding: 14px 72px 14px 12px;\r\n  min-height: 76px;\r\n  border-radius: 12px;\r\n  border: 1px solid var(--line);\r\n  background: #fff;\r\n  position: relative;\r\n  cursor: pointer;\r\n  transition: background 120ms ease, border-color 120ms ease, transform 80ms ease;\r\n}\r\n.thread + .thread { margin-top: 8px; }\r\n.thread:hover { transform: translateY(-1px); border-color: #c7e3ff; }\r\n.threadActive { background: #eef6ff; border-color: #c7e3ff; }\r\n.threadUnread { background: #fff7ed; border-color: #fde68a; }\r\n.threadUnread::before {\r\n  content:\"\";\r\n  position:absolute; left:-1px; top:-1px; bottom:-1px; width:4px;\r\n  background:#ef9b28;\r\n  border-top-left-radius:12px; border-bottom-left-radius:12px;\r\n}\r\n\r\n.threadTop { display:flex; align-items:center; justify-content:space-between; gap:8px; margin-bottom: 6px; }\r\n.peer { display:flex; align-items:center; gap:8px; min-width: 0; }\r\n.avatar {\r\n  width:32px; height:32px; border-radius:50%;\r\n  display:grid; place-items:center; font-weight:800; color:#fff; font-size:12px;\r\n  background: radial-gradient(120% 120% at 0% 0%, #c34a4a 0%, var(--brand) 60%, #5a1818 100%);\r\n  box-shadow: 0 2px 6px rgba(0,0,0,.12);\r\n  flex-shrink: 0;\r\n}\r\n.threadName { font-weight: 800; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }\r\n.threadDate { color: var(--muted); font-size: 11px; white-space: nowrap; flex-shrink: 0; }\r\n\r\n/* здесь добавлен стандартный line-clamp */\r\n.threadLast {\r\n  color:#374151;\r\n  overflow:hidden;\r\n  display:-webkit-box;\r\n  line-clamp: 2;           /* стандарт */\r\n  -webkit-line-clamp: 2;   /* fallback для старых WebKit */\r\n  -webkit-box-orient: vertical;\r\n  word-break: normal;\r\n  overflow-wrap: break-word;\r\n  hyphens: auto;\r\n  text-wrap: balance;\r\n}\r\n.threadLastMine { text-align: right; }\r\n\r\n.badge {\r\n  position:absolute; right: 44px; top: 8px;\r\n  font-size: 11px; background: var(--brand); color:#fff;\r\n  padding: 0 7px; line-height: 20px; min-width: 22px; text-align:center;\r\n  border-radius:9999px; box-shadow:0 1px 4px rgba(0,0,0,.12); font-weight: 800;\r\n}\r\n\r\n.btnDel {\r\n  position:absolute; right: 8px; top: 8px;\r\n  width: 26px; height: 26px; border-radius: 8px;\r\n  border: 1px solid var(--line); background: rgba(255,255,255,0.85);\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/live.tsx",
      "size": 3536,
      "hash": "a096f20d4d8bd0913d78add083e5a0af1ecf12c6",
      "textSample": "'use client';\r\nimport { useEffect, useRef, startTransition } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\ntype P =\r\n  | { type: 'message'; threadId: string; at: number; messageId: string; authorId: string; text: string; ts: string; clientId?: string }\r\n  | { type: 'messageEdited'; threadId: string; at: number; messageId: string; byId: string; text: string }\r\n  | { type: 'messageDeleted'; threadId: string; at: number; messageId: string; byId: string; scope: 'self' | 'both' }\r\n  | { type: 'read'; threadId: string; at: number }\r\n  | { type: 'threadCreated'; threadId: string; at: number }\r\n  | { type: 'threadDeleted'; threadId: string; at: number; byId: string; byName: string }\r\n  | { type?: string; [k: string]: any };\r\n\r\nexport default function Live({ uid, activeThreadId }: { uid: string; activeThreadId?: string }) {\r\n  const router = useRouter();\r\n  const esRef = useRef<EventSource | null>(null);\r\n  const lastRefresh = useRef(0);\r\n\r\n  useEffect(() => {\r\n    if (!uid) return;\r\n    let stop = false;\r\n\r\n    const softRefresh = (gapMs: number) => {\r\n      const now = Date.now();\r\n      if (now - lastRefresh.current > gapMs) {\r\n        lastRefresh.current = now;\r\n        startTransition(() => router.refresh());\r\n      }\r\n    };\r\n\r\n    const connect = () => {\r\n      if (stop) return;\r\n      try { esRef.current?.close(); } catch {}\r\n      const es = new EventSource(`/chat/sse?uid=${encodeURIComponent(uid)}&t=${Date.now()}`);\r\n      esRef.current = es;\r\n\r\n      es.onmessage = (e) => {\r\n        let p: P;\r\n        try { p = JSON.parse(e.data || '{}'); } catch { softRefresh(400); return; }\r\n\r\n        // если открыт активный тред — без refresh, только точечные апдейты\r\n        if (activeThreadId && p.threadId === activeThreadId) {\r\n          const api = (window as any).__chatApi;\r\n          if (api && api.threadId === activeThreadId) {\r\n            if (p.type === 'message')        { api.push?.({ ...p, clientId: (p as any).clientId }); return; }\r\n            if (p.type === 'messageEdited')  { api.edit?.(p); return; }\r\n            if (p.type === 'messageDeleted') { api.del?.(p);  return; }\r\n            if (p.type === 'read')           { api.read?.(p); return; }\r\n            if (p.type === 'threadDeleted')  {\r\n              api.onThreadDeleted?.(p);\r\n              startTransition(() => router.replace('/chat'));\r\n              return;\r\n            }\r\n          }\r\n        }\r\n\r\n        // фоновая вкладка / другие страницы\r\n        if (p.type === 'message' && p.authorId !== uid) {\r\n          try { window.dispatchEvent(new CustomEvent('app:unread-bump', { detail: { threadId: p.threadId } })); } catch {}\r\n          softRefresh(250);\r\n          return;\r\n        }\r\n        if (p.type === 'threadDeleted' || p.type === 'threadCreated') { softRefresh(120); return; }\r\n        if (p.type === 'messageEdited' || p.type === 'messageDeleted' || p.type === 'read') { softRefresh(300); return; }\r\n        softRefresh(800);\r\n      };\r\n\r\n      es.onerror = () => {\r\n        try { es.close(); } catch {}\r\n        if (!stop) setTimeout(connect, 900);\r\n      };\r\n    };\r\n\r\n    connect();\r\n    const onVis = () => { if (document.visibilityState === 'visible') softRefresh(0); };\r\n    document.addEventListener('visibilitychange', onVis);\r\n    return () => { document.removeEventListener('visibilitychange', onVis); stop = true; try { esRef.current?.close(); } catch {} };\r\n  }, [router, uid, activeThreadId]);\r\n\r\n  return null;\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/page.tsx",
      "size": 11335,
      "hash": "50e765935c687a4ca1f05819bdff3337b45699e2",
      "textSample": "// app/(app)/chat/page.tsx\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { Prisma } from '@prisma/client';\r\nimport { redirect } from 'next/navigation';\r\nimport Live from './live';\r\nimport ChatBoxClient from './ChatBoxClient';\r\nimport s from './chat.module.css';\r\n\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\n\r\ntype Row = {\r\n  id: string;\r\n  peerId: string;\r\n  peerName: string;\r\n  lastMessageAt: Date | null;\r\n  lastMessageText: string | null;\r\n  unreadCount: number;\r\n};\r\n\r\nconst ROLES = [\r\n  'director', 'deputy_plus', 'deputy', 'teacher_plus', 'teacher',\r\n  'Директор','Заместитель +','Заместитель','Педагог +','Педагог'\r\n];\r\n\r\nconst toStr = (v: string | string[] | undefined): string =>\r\n  typeof v === 'string' ? v : Array.isArray(v) ? (v[0] ?? '') : '';\r\n\r\nconst now = () => new Date();\r\nconst fmt = (d: Date) => {\r\n  const M = ['янв','фев','мар','апр','май','июн','июл','авг','сен','окт','ноя','дек'];\r\n  return `${String(d.getDate()).padStart(2,'0')} ${M[d.getMonth()]} ${d.getFullYear()}, ${String(d.getHours()).padStart(2,'0')}:${String(d.getMinutes()).padStart(2,'0')}`;\r\n};\r\n\r\nfunction requireSessionId(session: any): string {\r\n  const id = session?.user?.id;\r\n  if (typeof id !== 'string' || !id) redirect('/sign-in');\r\n  return id;\r\n}\r\n\r\nasync function threadsWithUnread(uid: string): Promise<Row[]> {\r\n  const rows = await prisma.thread.findMany({\r\n    where: { OR: [{ aId: uid }, { bId: uid }] },\r\n    orderBy: [{ lastMessageAt: 'desc' }, { id: 'asc' }],\r\n    include: { a: { select: { id:true, name:true } }, b: { select: { id:true, name:true } } },\r\n  });\r\n\r\n  if (!rows.length) return [];\r\n\r\n  const ids = rows.map(r => r.id);\r\n  const list = await prisma.$queryRaw<{ threadId: string; count: bigint }[]>`\r\n    SELECT m.\"threadId\" as \"threadId\", COUNT(*)::bigint as \"count\"\r\n    FROM \"Message\" m\r\n    LEFT JOIN \"ReadMark\" r\r\n      ON r.\"threadId\" = m.\"threadId\" AND r.\"userId\" = ${uid}\r\n    LEFT JOIN \"MessageHide\" h\r\n      ON h.\"messageId\" = m.\"id\" AND h.\"userId\" = ${uid}\r\n    WHERE m.\"threadId\" IN (${Prisma.join(ids)})\r\n      AND (r.\"readAt\" IS NULL OR m.\"createdAt\" > r.\"readAt\")\r\n      AND m.\"authorId\" <> ${uid}\r\n      AND h.\"messageId\" IS NULL\r\n    GROUP BY m.\"threadId\"\r\n  `;\r\n  const unread = new Map(list.map(x => [x.threadId, Number(x.count)]));\r\n\r\n  return rows.map(t => {\r\n    const peer = t.aId === uid ? t.b : t.a;\r\n    return {\r\n      id: t.id,\r\n      peerId: peer?.id ?? '',\r\n      peerName: peer?.name ?? '—',\r\n      lastMessageAt: t.lastMessageAt ?? null,\r\n      lastMessageText: t.lastMessageText ?? null,\r\n      unreadCount: unread.get(t.id) ?? 0,\r\n    };\r\n  });\r\n}\r\n\r\nasync function ensureThread(me: string, otherIdRaw: string) {\r\n  const otherId = otherIdRaw.trim();\r\n  if (!otherId || otherId === me) return redirect('/chat');\r\n\r\n  const existing = await prisma.thread.findFirst({\r\n    where: { OR: [{ aId: me, bId: otherId }, { aId: otherId, bId: me }] },\r\n    select: { id:true },\r\n  });\r\n  if (existing?.id) return redirect(`/chat?thread=${existing.id}`);\r\n\r\n  const created = await prisma.thread.create({ data: { aId: me, bId: otherId } });\r\n  return redirect(`/chat?thread=${created.id}`);\r\n}\r\n\r\nexport default async function ChatPage({\r\n  searchParams,\r\n}: {\r\n  searchParams: Promise<Record<string, string | string[] | undefined>>;\r\n}) {\r\n  const session = await auth();\r\n  const meId = requireSessionId(session);\r\n\r\n  const sp = await searchParams;\r\n  const get = (k: string) => toStr(sp?.[k]);\r\n\r\n  const threadId = get('thread');\r\n  const q        = get('q').trim();\r\n  const start    = get('start').trim();\r\n\r\n  if (start) { await ensureThread(meId, start); return null as any; }\r\n\r\n  // Если задан thread, проверяем, что он существует и принадлежит пользователю.\r\n  // Если нет — сразу уводим на список, чтобы серверный рендер не падал.\r\n  let active: { id: string; aId: string; bId: string; a: { id: string; name: string | null }; b: { id: string; name: string | null } } | n",
      "kind": "app-route-file",
      "routePath": "/chat",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/sse/broker.ts",
      "size": 1613,
      "hash": "72a80b2cc5080f26851de7bb85e2ce8dc0bfebc4",
      "textSample": "// app/(app)/chat/sse/broker.ts\r\nexport type EventPayload =\r\n  | {\r\n      type: 'message';\r\n      threadId: string;\r\n      at: number;\r\n      messageId: string;\r\n      authorId: string;\r\n      text: string;\r\n      ts: string;\r\n      clientId?: string; // ← добавили\r\n    }\r\n  | { type: 'messageEdited'; threadId: string; at: number; messageId: string; byId: string; text: string }\r\n  | { type: 'messageDeleted'; threadId: string; at: number; messageId: string; byId: string; scope: 'self' | 'both' }\r\n  | { type: 'read'; threadId: string; at: number }\r\n  | { type: 'threadCreated'; threadId: string; at: number }\r\n  | { type: 'threadDeleted'; threadId: string; at: number; byId: string; byName: string };\r\n\r\ntype Subscriber = (p: EventPayload) => void;\r\n\r\nclass Broker {\r\n  private subs = new Map<string, Map<number, Subscriber>>();\r\n  private seq = 0;\r\n\r\n  subscribe(uid: string, fn: Subscriber) {\r\n    if (!this.subs.has(uid)) this.subs.set(uid, new Map());\r\n    const id = ++this.seq;\r\n    this.subs.get(uid)!.set(id, fn);\r\n    return () => this.subs.get(uid)?.delete(id);\r\n  }\r\n\r\n  publish(uids: string[] | string, payload: EventPayload) {\r\n    const targets = Array.isArray(uids) ? uids : [uids];\r\n    for (const uid of targets) {\r\n      const hs = this.subs.get(uid);\r\n      if (!hs?.size) continue;\r\n      for (const [, h] of hs) {\r\n        try {\r\n          h(payload);\r\n        } catch {}\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ntype G = typeof globalThis & { __g108_broker?: Broker };\r\nconst g = globalThis as G;\r\nconst broker = g.__g108_broker ?? (g.__g108_broker = new Broker());\r\nexport default broker;\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/chat/sse/route.ts",
      "size": 1800,
      "hash": "5c1434cf0085792f7b45c321860ff77e31f28ded",
      "textSample": "// app/(app)/chat/sse/route.ts\r\nimport broker, { type EventPayload } from './broker';\r\n\r\nexport const runtime = 'nodejs';\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\n\r\nfunction sseHeaders(): HeadersInit {\r\n  return {\r\n    'Content-Type': 'text/event-stream; charset=utf-8',\r\n    'Cache-Control': 'no-cache, no-transform',\r\n    'Connection': 'keep-alive',\r\n    'X-Accel-Buffering': 'no',\r\n    'Keep-Alive': 'timeout=120',\r\n  };\r\n}\r\n\r\nexport function GET(req: Request) {\r\n  const url = new URL(req.url);\r\n  const uid = url.searchParams.get('uid') || '';\r\n  if (!uid) return new Response('missing uid', { status: 400, headers: sseHeaders() });\r\n\r\n  const stream = new ReadableStream({\r\n    start(controller) {\r\n      const enc = new TextEncoder();\r\n\r\n      // анти-буферизация: первый чанк >2 КБ + мгновенный retry\r\n      controller.enqueue(enc.encode(`:${' '.repeat(2048)}\\n`));\r\n      controller.enqueue(enc.encode(`retry: 0\\n`));\r\n\r\n      const send = (payload: unknown) => {\r\n        controller.enqueue(enc.encode(`data: ${JSON.stringify(payload)}\\n\\n`));\r\n      };\r\n\r\n      // «пробой» канала\r\n      send({ type: 'hello', at: Date.now() });\r\n\r\n      // подписка на пользователя\r\n      const unsub = broker.subscribe(uid, (p: EventPayload) => send(p));\r\n\r\n      // heartbeat — не даём каналу уснуть\r\n      const hb = setInterval(() => send({ type: 'ping', at: Date.now() }), 5000);\r\n\r\n      const close = () => {\r\n        clearInterval(hb);\r\n        try { unsub(); } catch {}\r\n        try { controller.close(); } catch {}\r\n      };\r\n\r\n      (req as any).signal?.addEventListener?.('abort', close);\r\n    },\r\n  });\r\n\r\n  return new Response(stream, { headers: sseHeaders() });\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/chat/sse",
      "pageType": "route",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/dashboard/page.module.css",
      "size": 942,
      "hash": "5256c8bd82583ad17ff8898bfc808af35c7a0d20",
      "textSample": ".page { display:grid; gap:12px; }\r\n.head { padding:14px 16px; border-radius:16px; }\r\n.title { margin:0; font-weight:900; font-size:22px; letter-spacing:.2px; color:#0f172a; }\r\n.subtitle { margin:6px 0 0; font-size:14px; color:#374151; text-decoration:none; }\r\n\r\n.grid { display:grid; grid-template-columns:repeat(2, minmax(0,1fr)); gap:12px; }\r\n.card {\r\n  border-radius:16px; padding:14px; border:1px solid rgba(229,231,235,.8); background:#fff;\r\n  box-shadow:0 4px 12px rgba(0,0,0,.04);\r\n}\r\n.cardTitle { font-weight:800; color:#0f172a; margin:0 0 6px; text-transform:none; }\r\n.cardText { color:#374151; font-size:14px; }\r\n\r\n.glass{\r\n  background:linear-gradient(180deg,rgba(255,255,255,.68),rgba(255,255,255,.4));\r\n  backdrop-filter:saturate(180%) blur(10px);\r\n  -webkit-backdrop-filter:saturate(180%) blur(10px);\r\n  border:1px solid rgba(229,231,235,.8);\r\n  box-shadow:0 6px 16px rgba(0,0,0,.06), inset 0 1px 0 rgba(255,255,255,.35);\r\n}\r\n\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/dashboard/page.tsx",
      "size": 1112,
      "hash": "f005e32d6d8f3df6c3e02a0d875982b74ef303a9",
      "textSample": "import { redirect } from 'next/navigation';\r\nimport { auth } from '@/auth.config';\r\nimport styles from './page.module.css';\r\n\r\nexport default async function Dashboard() {\r\n  const session = await auth();\r\n  if (!session) redirect('/sign-in');\r\n\r\n  return (\r\n    <section className={styles.page}>\r\n      <header className={`${styles.glass} ${styles.head}`}>\r\n        <h1 className={styles.title}>Дашборд</h1>\r\n        <p className={styles.subtitle}>стартовая страница после входа</p>\r\n      </header>\r\n\r\n      <div className={styles.grid}>\r\n        <div className={styles.card}>\r\n          <div className={styles.cardTitle}>сводка</div>\r\n          <div className={styles.cardText}>здесь появятся ваши виджеты и показатели</div>\r\n        </div>\r\n        <div className={styles.card}>\r\n          <div className={styles.cardTitle}>обновления</div>\r\n          <div className={styles.cardText}>история действий и системные уведомления</div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/dashboard",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/heartbeat/Heartbeat.tsx",
      "size": 1542,
      "hash": "95edbe7694751e493f8ef6adae755927d05b5e8e",
      "textSample": "'use client';\r\n\r\nimport { useEffect, useRef } from 'react';\r\nimport { usePathname } from 'next/navigation';\r\n\r\nexport default function Heartbeat({\r\n  action,\r\n  intervalMs = 60_000,     // раз в минуту\r\n}: {\r\n  action: (fd: FormData) => Promise<void>;\r\n  intervalMs?: number;\r\n}) {\r\n  const formRef = useRef<HTMLFormElement>(null);\r\n  const path = usePathname();\r\n\r\n  useEffect(() => {\r\n    const submit = () => {\r\n      const f = formRef.current;\r\n      if (!f) return;\r\n      // submit без перезагрузки/перехода\r\n      (f as any).requestSubmit ? (f as any).requestSubmit() : f.submit();\r\n    };\r\n\r\n    // пульс сразу + при видимости\r\n    submit();\r\n    const onVis = () => { if (document.visibilityState === 'visible') submit(); };\r\n\r\n    const t = window.setInterval(() => {\r\n      if (document.visibilityState === 'visible') submit();\r\n    }, intervalMs);\r\n\r\n    document.addEventListener('visibilitychange', onVis);\r\n    window.addEventListener('focus', onVis);\r\n\r\n    return () => {\r\n      window.clearInterval(t);\r\n      document.removeEventListener('visibilitychange', onVis);\r\n      window.removeEventListener('focus', onVis);\r\n    };\r\n  }, [intervalMs, path]);\r\n\r\n  return (\r\n    <form ref={formRef} action={action} style={{ display: 'none' }}>\r\n      {/* запасной параметр — вдруг захочешь что-то варьировать по текущему пути */}\r\n      <input type=\"hidden\" name=\"path\" value={path || ''} />\r\n    </form>\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/heartbeat/actions.ts",
      "size": 584,
      "hash": "83868c3759f315f472a14deb3150ba30e4388da5",
      "textSample": "'use server';\r\n\r\nimport { prisma } from '@/lib/prisma';\r\nimport { auth } from '@/auth.config';\r\n\r\n// тихий пульс: обновляем lastSeen и выходим (без redirect/revalidate)\r\nexport async function heartbeat(): Promise<void> {\r\n  const session = await auth();\r\n  const id = (session?.user as any)?.id as string | undefined;\r\n  if (!id) return;\r\n  try {\r\n    await prisma.user.update({\r\n      where: { id },\r\n      data: { lastSeen: new Date() },\r\n    });\r\n  } catch {\r\n    // тишина: пульс не должен ломать навигацию\r\n  }\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/layout.module.css",
      "size": 833,
      "hash": "b238ed2c55ba0ec19cd22452313b3b340a287371",
      "textSample": "/* app/(app)/layout.module.css */\r\n.appShell {\r\n  display: grid;\r\n  grid-template-columns: 280px minmax(0, 1fr); /* ширина = ширине Sidebar */\r\n  min-height: 100dvh;\r\n  background: #f7f7f8;\r\n}\r\n\r\n.appSidebar {\r\n  position: sticky;\r\n  top: 0;\r\n  height: 100dvh;\r\n  overflow: hidden;             /* сайдбар без скроллов */\r\n  background: #ffffff;\r\n  width: 280px;                 /* фиксируем ширину контейнера */\r\n  flex: 0 0 280px;              /* не даём колонке сжиматься/расти */\r\n  border-right: 1px solid #e5e7eb;\r\n}\r\n\r\n.appMain {\r\n  min-width: 0;\r\n  height: 100dvh;\r\n  overflow: auto;               /* прокрутка — только у контента */\r\n  -webkit-overflow-scrolling: touch;\r\n  padding: 16px;\r\n  background: #f7f7f8;\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/layout.tsx",
      "size": 1648,
      "hash": "848da600842f98c7bd63f308283f27930746721b",
      "textSample": "// app/(app)/layout.tsx\r\nimport type { ReactNode } from 'react';\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { Prisma } from '@prisma/client';\r\nimport Sidebar from '@/components/Sidebar';\r\nimport Heartbeat from './heartbeat/Heartbeat';\r\nimport { heartbeat } from './heartbeat/actions';\r\nimport { unstable_noStore as noStore } from 'next/cache';\r\n\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\n\r\nasync function unreadTotal(uid: string) {\r\n  noStore();\r\n  const threads = await prisma.thread.findMany({\r\n    where: { OR: [{ aId: uid }, { bId: uid }] },\r\n    select: { id: true },\r\n  });\r\n  const ids = threads.map(t => t.id);\r\n  if (ids.length === 0) return 0;\r\n\r\n  const rows = await prisma.$queryRaw<{ count: bigint }[]>`\r\n    SELECT COUNT(*)::bigint AS count\r\n    FROM \"Message\" m\r\n    LEFT JOIN \"ReadMark\" r\r\n      ON r.\"threadId\" = m.\"threadId\" AND r.\"userId\" = ${uid}\r\n    WHERE m.\"threadId\" IN (${Prisma.join(ids)})\r\n      AND (r.\"readAt\" IS NULL OR m.\"createdAt\" > r.\"readAt\")\r\n      AND m.\"authorId\" <> ${uid}\r\n  `;\r\n  return Number(rows[0]?.count ?? 0);\r\n}\r\n\r\nexport default async function AppLayout({ children }: { children: ReactNode }) {\r\n  const session = await auth();\r\n  const uid = (session?.user as any)?.id as string | undefined;\r\n  const unread = uid ? await unreadTotal(uid) : 0;\r\n\r\n  return (\r\n    <div style={{ display:'grid', gridTemplateColumns:'280px 1fr', minHeight:'100vh' }}>\r\n      <Sidebar unreadChats={unread} />\r\n      <main style={{ padding:12 }}>\r\n        {children}\r\n        <Heartbeat action={heartbeat} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/",
      "pageType": "layout",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/teachers/SearchBox.tsx",
      "size": 2387,
      "hash": "a37902fcaa8ed012a2d451a8c440b923af0187b6",
      "textSample": "'use client';\r\n\r\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation';\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\n\r\nexport default function SearchBox({ initial }: { initial?: string }) {\r\n  const router = useRouter();\r\n  const pathname = usePathname();\r\n  const sp = useSearchParams();\r\n  const [q, setQ] = useState(initial ?? '');\r\n\r\n  const base = useMemo(() => {\r\n    const obj = Object.fromEntries(sp?.entries() ?? []);\r\n    delete obj.ok; delete obj.error;\r\n    return obj;\r\n  }, [sp]);\r\n\r\n  // debounce + IME-guard (не триггерим во время набора по раскладке/IME)\r\n  const timerRef = useRef<number | null>(null);\r\n  const composingRef = useRef(false);\r\n\r\n  useEffect(() => { setQ(initial ?? ''); }, [initial]);\r\n\r\n  function push(qNext: string) {\r\n    const params = new URLSearchParams(base);\r\n    if (qNext) params.set('q', qNext); else params.delete('q');\r\n    router.replace(params.size ? `${pathname}?${params.toString()}` : pathname);\r\n  }\r\n\r\n  function schedule(qNext: string) {\r\n    if (timerRef.current) window.clearTimeout(timerRef.current);\r\n    // только если пусто или 2+ символа — чтобы не дергать сервер каждую букву\r\n    const shouldUpdate = qNext.length === 0 || qNext.length >= 2;\r\n    timerRef.current = window.setTimeout(() => {\r\n      if (!composingRef.current && shouldUpdate) push(qNext);\r\n    }, 450);\r\n  }\r\n\r\n  return (\r\n    <input\r\n      value={q}\r\n      onChange={(e) => { const v = e.target.value; setQ(v); schedule(v); }}\r\n      onCompositionStart={() => { composingRef.current = true; }}\r\n      onCompositionEnd={(e) => { composingRef.current = false; schedule((e.target as HTMLInputElement).value); }}\r\n      onBlur={(e) => push(e.currentTarget.value)}         // мгновенно по blur\r\n      onKeyDown={(e) => { if (e.key === 'Enter') push(q); }} // мгновенно по Enter\r\n      placeholder=\"поиск: фио, email, телефон, классное руководство, логин, роль…\"\r\n      style={{\r\n        height: 36,\r\n        fontSize: 14,\r\n        width: 520,\r\n        maxWidth: '60ch',\r\n        padding: '6px 10px',\r\n        borderRadius: 10,\r\n        border: '1px solid rgba(229,231,235,.9)',\r\n        background: '#fff',\r\n        outline: 'none',\r\n      }}\r\n    />\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/teachers/actions.ts",
      "size": 5607,
      "hash": "2a02ef4be7209c09b831272fa1e3997842001bbe",
      "textSample": "// app/(app)/teachers/actions.ts\r\n'use server';\r\n\r\nimport type { Session } from 'next-auth';\r\nimport { auth } from '@/auth.config';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { revalidatePath } from 'next/cache';\r\nimport { redirect } from 'next/navigation';\r\n\r\nconst MANAGER_ROLES = new Set(['director', 'deputy_plus'] as const);\r\n\r\nconst s = (fd: FormData, k: string) => {\r\n  const v = fd.get(k);\r\n  return typeof v === 'string' ? v.trim() : '';\r\n};\r\nconst b = (fd: FormData, k: string) => {\r\n  const v = fd.get(k);\r\n  return v === 'on' || v === 'true' || v === '1';\r\n};\r\n\r\ntype HasRole = { role?: unknown };\r\nfunction roleFrom(session: Session | null): string | null {\r\n  const u = session?.user as unknown;\r\n  if (u && typeof u === 'object' && 'role' in (u as Record<string, unknown>)) {\r\n    const r = (u as HasRole).role;\r\n    return typeof r === 'string' ? r : null;\r\n  }\r\n  return null;\r\n}\r\nfunction mustManage(session: Session | null) {\r\n  const role = roleFrom(session);\r\n  if (!role || !MANAGER_ROLES.has(role as any)) redirect('/');\r\n}\r\n\r\nexport async function createUser(fd: FormData): Promise<void> {\r\n  const session = await auth(); mustManage(session);\r\n  const data = {\r\n    name: s(fd, 'name') || 'Без имени',\r\n    username: s(fd, 'username') || null,\r\n    email: s(fd, 'email') || null,\r\n    phone: s(fd, 'phone') || null,\r\n    classroom: s(fd, 'classroom') || null,\r\n    role: s(fd, 'role') || 'teacher',\r\n    birthday: s(fd, 'birthday') ? new Date(s(fd, 'birthday')) : null,\r\n    telegram: s(fd, 'telegram') || null,\r\n    about: s(fd, 'about') || null,\r\n    notifyEmail: b(fd, 'notifyEmail'),\r\n    notifyTelegram: b(fd, 'notifyTelegram'),\r\n  };\r\n  await prisma.user.create({ data });\r\n  revalidatePath('/teachers');\r\n  redirect('/teachers?ok=пользователь создан');\r\n}\r\n\r\nexport async function updateUser(fd: FormData): Promise<void> {\r\n  const session = await auth(); mustManage(session);\r\n  const id = s(fd, 'id'); if (!id) redirect('/teachers?error=нет id');\r\n  const data = {\r\n    name: s(fd, 'name') || 'Без имени',\r\n    username: s(fd, 'username') || null,\r\n    email: s(fd, 'email') || null,\r\n    phone: s(fd, 'phone') || null,\r\n    classroom: s(fd, 'classroom') || null,\r\n    role: s(fd, 'role') || 'teacher',\r\n    birthday: s(fd, 'birthday') ? new Date(s(fd, 'birthday')) : null,\r\n    telegram: s(fd, 'telegram') || null,\r\n    about: s(fd, 'about') || null,\r\n    notifyEmail: b(fd, 'notifyEmail'),\r\n    notifyTelegram: b(fd, 'notifyTelegram'),\r\n  };\r\n  await prisma.user.update({ where: { id }, data });\r\n  revalidatePath('/teachers');\r\n  redirect('/teachers?ok=данные обновлены');\r\n}\r\n\r\n/** Полный purge пользователя и всех связей. Без 500 — всегда редирект с результатом. */\r\nexport async function deleteUser(fd: FormData): Promise<void> {\r\n  const session = await auth(); mustManage(session);\r\n  const id = s(fd, 'id'); if (!id) redirect('/teachers?error=нет id');\r\n\r\n  try {\r\n    const u = await prisma.user.findUnique({ where: { id }, select: { email: true } });\r\n\r\n    await prisma.$transaction(async (tx) => {\r\n      // next-auth\r\n      await tx.$executeRaw`DELETE FROM \"Session\" WHERE \"userId\" = ${id};`;\r\n      await tx.$executeRaw`DELETE FROM \"Account\" WHERE \"userId\" = ${id};`;\r\n      if (u?.email) await tx.$executeRaw`DELETE FROM \"VerificationToken\" WHERE \"identifier\" = ${u.email};`;\r\n\r\n      // чаты\r\n      await tx.$executeRaw`DELETE FROM \"MessageHide\" WHERE \"userId\" = ${id};`;\r\n      await tx.$executeRaw`\r\n        DELETE FROM \"MessageHide\" h\r\n        WHERE h.\"messageId\" IN (\r\n          SELECT m.id FROM \"Message\" m\r\n          WHERE m.\"threadId\" IN (SELECT t.id FROM \"Thread\" t WHERE t.\"aId\" = ${id} OR t.\"bId\" = ${id})\r\n        );`;\r\n      await tx.$executeRaw`\r\n        DELETE FROM \"ReadMark\"\r\n        WHERE \"userId\" = ${id}\r\n           OR \"threadId\" IN (SELECT t.id FROM \"Thread\" t WHERE t.\"aId\" = ${id} OR t.\"bId\" = ${id});`;\r\n      await tx.$executeRaw`\r\n        DELETE FROM \"Message\"\r\n        WHERE \"authorId\" = ${id}\r\n           OR \"threadId",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(app)/teachers/page.tsx",
      "size": 12565,
      "hash": "560337d63a1f69b30e055e1332e57827db1c60d9",
      "textSample": "import { prisma } from '@/lib/prisma';\r\nimport { createUser, updateUser, deleteUser } from './actions';\r\nimport AddUserModal from '@/components/AddUserModal';\r\nimport EditUserModal from '@/components/EditUserModal';\r\nimport SearchBox from './SearchBox';\r\nimport { auth } from '@/auth.config';\r\nimport { Prisma } from '@prisma/client';\r\n\r\ntype Search = Promise<Record<string, string | string[] | undefined>>;\r\n\r\nexport const dynamic = 'force-dynamic';\r\n\r\nconst BORDER = 'rgba(229,231,235,.8)';\r\nconst ONLINE_WINDOW_MS = 5 * 60 * 1000; // 5 минут\r\n\r\nfunction fmtDateTime(d: Date) {\r\n  const tt = d.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });\r\n  const dd = d.toLocaleDateString('ru-RU');\r\n  return `${tt} ${dd}`;\r\n}\r\n\r\nexport default async function TeachersPage(props: { searchParams?: Search }) {\r\n  const sp = (props.searchParams ? await props.searchParams : undefined) ?? {};\r\n  const q = (Array.isArray(sp.q) ? sp.q[0] : sp.q) || '';\r\n  const okRaw = Array.isArray(sp.ok) ? sp.ok[0] : sp.ok;\r\nconst errorRaw = Array.isArray(sp.error) ? sp.error[0] : sp.error;\r\n// игнорим служебные редиректы Next\r\nconst ok = okRaw && !/^NEXT_REDIRECT/.test(okRaw) ? okRaw : undefined;\r\nconst error = errorRaw && !/^NEXT_REDIRECT/.test(errorRaw) ? errorRaw : undefined;\r\n\r\n  const session = await auth();\r\n  const role = (session?.user as any)?.role as string | undefined;\r\n  const canManage = role === 'director' || role === 'deputy_plus';\r\n\r\n  // where для поиска (по всем ключевым полям). Если q пуст — берём всех.\r\n  const s = q.trim();\r\n  const or: Prisma.UserWhereInput[] = s ? [\r\n    { name:      { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n    { email:     { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n    { phone:     { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n    { classroom: { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n    { username:  { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n    { role:      { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n    { telegram:  { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n    { about:     { contains: s, mode: Prisma.QueryMode.insensitive } },\r\n  ] : [];\r\n  const where: Prisma.UserWhereInput | undefined = or.length ? { OR: or } : undefined;\r\n\r\n  const users = await prisma.user.findMany({\r\n    where,\r\n    orderBy: { name: 'asc' },\r\n    select: {\r\n      id: true, name: true, role: true, username: true, email: true, phone: true,\r\n      classroom: true, telegram: true, about: true, birthday: true,\r\n      notifyEmail: true, notifyTelegram: true,\r\n      lastSeen: true, // 👈 добавили\r\n    },\r\n  });\r\n\r\n  const btnGhost: React.CSSProperties = { height: 32, padding: '4px 10px', borderRadius: 10, border: '1px solid rgba(229,231,235,.9)', background: '#fff', cursor: 'pointer' };\r\n  const btnDanger: React.CSSProperties = { height: 32, padding: '4px 10px', borderRadius: 10, border: '1px solid #ef4444', background: '#fff', color: '#b91c1c', cursor: 'pointer' };\r\n\r\n  const clean = (x?: string | null) => x ?? '—';\r\n  const ruRole = (r?: string | null) =>\r\n    r === 'director' ? 'Директор'\r\n    : r === 'deputy_plus' ? 'Заместитель +'\r\n    : r === 'deputy' ? 'Заместитель'\r\n    : r === 'teacher_plus' ? 'Педагог +'\r\n    : r === 'teacher' ? 'Педагог'\r\n    : r === 'archived' ? 'В архиве'\r\n    : (r || '—');\r\n\r\n  const now = new Date();\r\n\r\n  return (\r\n    <section style={{ display: 'grid', gap: 12 }}>\r\n      {/* локальные стили для apple-expand + статус */}\r\n      <style>{`\r\n        .glass-tile {\r\n          position: relative;\r\n          padding: 10px 12px;\r\n          border-radius: 12px;\r\n          border: 1px solid ${BORDER};\r\n          background: linear-gradient(180deg, rgba(255,255,255,0.70), rgba(255,255,255,0.44));\r\n          backdrop-filter: saturate(180%) blur(12px);\r\n          -webkit-backdrop-filter: saturate(180%) blur(12px);\r\n          box-shadow: 0 6px 16px rgba(0,0,0,.06), inset 0 1px 0 rgba(255,255,255,.45);\r\n          transition: transf",
      "kind": "app-route-file",
      "routePath": "/teachers",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(auth)/sign-in/SignInForm.tsx",
      "size": 2618,
      "hash": "b481c7e4b8055d8bdcae908a5c4053a86a0009ec",
      "textSample": "// app/(auth)/sign-in/SignInForm.tsx\r\n'use client';\r\nimport { useState, FormEvent } from 'react';\r\nimport { signIn } from 'next-auth/react';\r\n\r\nexport default function SignInForm({ callbackUrl }: { callbackUrl: string }) {\r\n  const [username, setUsername] = useState(''); \r\n  const [password, setPassword] = useState('');\r\n  const [pending, setPending] = useState(false);\r\n  const [localError, setLocalError] = useState<string | null>(null);\r\n\r\n  async function onSubmit(e: FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    setLocalError(null);\r\n    setPending(true);\r\n    try {\r\n      await signIn('credentials', { username, password, callbackUrl, redirect: true });\r\n    } catch {\r\n      setLocalError('Не удалось выполнить вход');\r\n    } finally {\r\n      setPending(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"auth-form\">\r\n      <label className=\"lbl\">Логин или Email</label>\r\n      <input className=\"inp\" type=\"text\" autoComplete=\"username\" value={username} onChange={e=>setUsername(e.target.value)} required />\r\n\r\n      <label className=\"lbl\">Пароль</label>\r\n      <input className=\"inp\" type=\"password\" autoComplete=\"current-password\" value={password} onChange={e=>setPassword(e.target.value)} required />\r\n\r\n      {localError && <div className=\"err\">{localError}</div>}\r\n\r\n      <button type=\"submit\" disabled={pending} className=\"btn\">\r\n        {pending ? 'Входим…' : 'Войти'}\r\n      </button>\r\n\r\n      <input type=\"hidden\" name=\"callbackUrl\" value={callbackUrl} />\r\n\r\n      <style jsx>{`\r\n        .auth-form {\r\n          width: 100%;\r\n          max-width: 360px;\r\n          display: grid;\r\n          gap: 10px;\r\n        }\r\n        .lbl { font-size: 13px; color: #374151; }\r\n        .inp {\r\n          width: 100%;\r\n          height: 38px;\r\n          border: 1px solid #e5e7eb;\r\n          border-radius: 10px;\r\n          padding: 0 12px;\r\n          background: #fff;\r\n        }\r\n        .err { color: #ef4444; font-size: 13px; }\r\n        .btn {\r\n          display: inline-flex;           /* ключ: НЕ растягиваемся на всю ширину */\r\n          align-items: center;\r\n          justify-content: center;\r\n          height: 38px;\r\n          padding: 0 14px;\r\n          border-radius: 10px;\r\n          border: 1px solid #e5e7eb;\r\n          background: #8d2828;            /* фирменный цвет */\r\n          color: #fff;\r\n          font-weight: 600;\r\n          cursor: pointer;\r\n        }\r\n        .btn:disabled { opacity: 0.6; cursor: default; }\r\n      `}</style>\r\n    </form>\r\n  );\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/(auth)/sign-in/page.tsx",
      "size": 2648,
      "hash": "3099bb6c73fef6bd0cd752faf73c84ad963f53fe",
      "textSample": "import { redirect } from 'next/navigation';\nimport { auth } from '@/auth.config';\nimport SignInForm from './SignInForm';\n\nexport const dynamic = 'force-dynamic';  // Обязательно динамическая страница (не статическая), т.к. зависит от сессии и query-параметров\n\nexport default async function SignInPage(props: { \n  searchParams?: Promise<Record<string, string | string[] | undefined>> \n}) {\n  // Проверяем наличие активной сессии через auth() (getServerSession). Если пользователь уже залогинен – перенаправляем на главную.\n  const session = await auth();\n  if (session) {\n    redirect('/');  // Если есть сессия, сразу уходим с страницы входа (редирект на главную/дешборд)\n  }\n\n  // Извлекаем query-параметры (?error=… & callbackUrl=…) из URL, учитывая что searchParams передаются как Promise\n  const sp = props.searchParams ? await props.searchParams : undefined;\n  const errorParam = sp?.error;\n  const callbackParam = sp?.callbackUrl;\n  const error = Array.isArray(errorParam) ? errorParam[0] : errorParam;\n  const callbackUrl = Array.isArray(callbackParam) ? callbackParam[0] : (callbackParam ?? '/dashboard');\n  // ↑ Если callbackUrl не задан, по умолчанию отправим пользователя на \"/dashboard\" после входа (основная страница после логина)\n\n  return (\n    <main className=\"mx-auto max-w-xl px-4 py-10\">\n      {/* Верхний блок с приветствием (визуал как в разработочной версии) */}\n      <div className=\"mb-8\">\n        <div className=\"text-lg text-neutral-600\">Гимназия № 108 имени В. Н. Татищева</div>\n        <h1 className=\"text-3xl font-semibold mt-1\">Добро пожаловать в CRM-систему</h1>\n        <div className=\"text-neutral-600 mt-2\">Необходим вход в систему</div>\n      </div>\n\n      {/* Сообщение об ошибке, если передан параметр error */}\n      {error && (\n        <p className=\"text-red-600 mb-4\">\n          Ошибка авторизации. {error === 'CredentialsSignin' ? 'Проверьте логин и пароль.' : error}\n        </p>\n      )}\n\n      {/* Форма входа (вынесена в отдельный компонент) */}\n      <SignInForm callbackUrl={callbackUrl} />\n    </main>\n  );\n}\n",
      "kind": "app-route-file",
      "routePath": "/sign-in",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/db-status/actions.ts",
      "size": 2460,
      "hash": "b7e1b502822b72af653aa4dd1fe3d1b787531b92",
      "textSample": "// app/admin/db-status/actions.ts\r\n'use server';\r\n\r\nimport { revalidatePath } from 'next/cache';\r\nimport { redirect } from 'next/navigation';\r\nimport bcrypt from 'bcryptjs';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { normalizeRole, Role } from '@/lib/roles';\r\n\r\n// остальной код без изменений\r\n\r\n\r\nfunction requireString(v: FormDataEntryValue | null, field: string): string {\r\n  if (typeof v !== 'string' || v.trim() === '') {\r\n    throw new Error(`Поле ${field} обязательно`);\r\n  }\r\n  return v.trim();\r\n}\r\n\r\nfunction optionalString(v: FormDataEntryValue | null): string | null {\r\n  return typeof v === 'string' && v.trim() !== '' ? v.trim() : null;\r\n}\r\n\r\nfunction pickRole(v: FormDataEntryValue | null): Role | null {\r\n  return normalizeRole(typeof v === 'string' ? v : null);\r\n}\r\n\r\nexport async function upsertUser(formData: FormData): Promise<void> {\r\n  const id = optionalString(formData.get('id'));\r\n  const name = requireString(formData.get('name'), 'name');\r\n  const username = optionalString(formData.get('username'));\r\n  const email = optionalString(formData.get('email'));\r\n  const phone = optionalString(formData.get('phone'));\r\n  const role = pickRole(formData.get('role')); // Role | null — тип совпадает с нашими предикатами\r\n\r\n  await prisma.user.upsert({\r\n    where: { id: id ?? '00000000-0000-0000-0000-000000000000' }, // заведомо несуществующий, чтобы сработал create\r\n    update: { name, username, email, phone, role },\r\n    create: {\r\n      name,\r\n      username,\r\n      email,\r\n      phone,\r\n      role,\r\n    },\r\n  });\r\n\r\n  revalidatePath('/admin/db-status');\r\n  redirect('/admin/db-status?ok=upsert');\r\n}\r\n\r\nexport async function forceResetPassword(formData: FormData): Promise<void> {\r\n  const id = requireString(formData.get('id'), 'id');\r\n  const newPassword = requireString(formData.get('newPassword'), 'newPassword');\r\n\r\n  const passwordHash = await bcrypt.hash(newPassword, 10);\r\n\r\n  await prisma.user.update({\r\n    where: { id },\r\n    data: { passwordHash },\r\n  });\r\n\r\n  revalidatePath('/admin/db-status');\r\n  redirect('/admin/db-status?ok=reset');\r\n}\r\n\r\nexport async function deleteUser(formData: FormData): Promise<void> {\r\n  const id = requireString(formData.get('id'), 'id');\r\n  await prisma.user.delete({ where: { id } });\r\n\r\n  revalidatePath('/admin/db-status');\r\n  redirect('/admin/db-status?ok=deleted');\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": true,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/db-status/page.module.css",
      "size": 2471,
      "hash": "40e6993ecd77e49aaff49149ea9e362f778345f8",
      "textSample": ".page { display:grid; gap:12px; }\r\n\r\n.head { padding:14px 16px; border-radius:16px; }\r\n.title { margin:0; font-weight:900; font-size:22px; color:#0f172a; }\r\n.subtitle { margin:6px 0 0; font-size:14px; color:#374151; }\r\n\r\n.note { padding:10px 12px; border-radius:12px; font-size:14px; }\r\n.ok { border:1px solid #c8e6c9; background:#f0fbf1; color:#166534; }\r\n.err { border:1px solid #fecaca; background:#fff1f2; color:#991b1b; }\r\n\r\n.panel { padding:12px 14px; border-radius:16px; }\r\n\r\n.h2 { margin:0 0 10px; font-size:16px; font-weight:800; color:#0f172a; }\r\n\r\n.tableWrap { padding:8px; border-radius:14px; }\r\n.table {\r\n  width:100%; border-collapse:separate; border-spacing:0; font-size:14px;\r\n}\r\n.table thead th {\r\n  text-align:left; font-weight:800; color:#0f172a; padding:8px;\r\n  border-bottom:1px solid rgba(229,231,235,.9); text-transform:none;\r\n}\r\n.table tbody td {\r\n  padding:8px; border-bottom:1px solid rgba(229,231,235,.6); color:#111827;\r\n}\r\n.table tbody tr:last-child td { border-bottom:0; }\r\n\r\n.actions { display:flex; align-items:center; gap:10px; flex-wrap:wrap; }\r\n\r\n.form { display:grid; grid-template-columns:repeat(6, minmax(0,1fr)); gap:8px; align-items:center; }\r\n\r\n.input{\r\n  border:1px solid rgba(229,231,235,.9);\r\n  background:#fff; border-radius:10px; padding:8px 10px; font-size:14px; color:#0f172a; outline:none;\r\n}\r\n.input:focus { border-color:#cfe3ff; box-shadow:0 0 0 3px rgba(207,227,255,.4); }\r\n\r\n.btn{\r\n  height:34px; border-radius:10px; padding:0 12px;\r\n  border:1px solid rgba(229,231,235,.9); background:#fff; color:#0f172a;\r\n  cursor:pointer; transition:filter 120ms ease, box-shadow 120ms ease, transform 120ms ease;\r\n  text-decoration:none;\r\n}\r\n.btn:hover { filter:brightness(.98); }\r\n.primary{ background:var(--brand); color:#fff; border-color:var(--brand); }\r\n.primary:hover{ filter:brightness(.96); }\r\n.ghost{ background:rgba(255,255,255,.6); }\r\n\r\n.glass{\r\n  background:linear-gradient(180deg,rgba(255,255,255,.68),rgba(255,255,255,.4));\r\n  backdrop-filter:saturate(180%) blur(10px);\r\n  -webkit-backdrop-filter:saturate(180%) blur(10px);\r\n  border:1px solid rgba(229,231,235,.8);\r\n  box-shadow:0 6px 16px rgba(0,0,0,.06), inset 0 1px 0 rgba(255,255,255,.35);\r\n}\r\n.glassLite{\r\n  background:rgba(255,255,255,.55);\r\n  backdrop-filter:saturate(160%) blur(6px);\r\n  -webkit-backdrop-filter:saturate(160%) blur(6px);\r\n  border:1px solid rgba(229,231,235,.7);\r\n  border-radius:14px;\r\n  box-shadow:inset 0 1px 0 rgba(255,255,255,.35);\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/db-status/page.tsx",
      "size": 4837,
      "hash": "c85238af177c625852a8a95a111ec3d09de57d03",
      "textSample": "import { prisma } from '@/lib/prisma';\r\nimport { canViewAdmin } from '@/lib/roles';\r\nimport { auth } from '@/auth.config';\r\nimport { redirect } from 'next/navigation';\r\nimport { deleteUser, forceResetPassword, upsertUser } from './actions';\r\nimport styles from './page.module.css';\r\n\r\nexport const dynamic = 'force-dynamic';\r\n\r\ntype UserRow = {\r\n  id: string;\r\n  name: string;\r\n  username: string | null;\r\n  email: string | null;\r\n  phone: string | null;\r\n  role: string | null;\r\n};\r\n\r\nexport default async function DbStatusPage(props: {\r\n  searchParams?: Promise<Record<string, string | string[] | undefined>>;\r\n}) {\r\n  const session = await auth();\r\n  const role = (session?.user as any)?.role ?? null;\r\n  if (!canViewAdmin(role)) redirect('/');\r\n\r\n  const sp = (props.searchParams ? await props.searchParams : undefined) ?? undefined;\r\n  const okParam = sp?.ok;\r\n  const errorParam = sp?.error;\r\n  const ok = Array.isArray(okParam) ? okParam[0] : okParam;\r\n  const error = Array.isArray(errorParam) ? errorParam[0] : errorParam;\r\n\r\n  const users = await prisma.user.findMany({\r\n    orderBy: { name: 'asc' },\r\n    select: { id: true, name: true, username: true, email: true, phone: true, role: true },\r\n  });\r\n\r\n  return (\r\n    <main className={styles.page}>\r\n      <header className={`${styles.glass} ${styles.head}`}>\r\n        <h1 className={styles.title}>Статус БД</h1>\r\n        <p className={styles.subtitle}>пользователей: {users.length}. подключение активно.</p>\r\n      </header>\r\n\r\n      {(ok || error) && (\r\n        <div className={`${styles.note} ${ok ? styles.ok : styles.err}`}>\r\n          {ok ? <>Готово: {ok}</> : <>Ошибка: {error}</>}\r\n        </div>\r\n      )}\r\n\r\n      <section className={styles.panel + ' ' + styles.glass}>\r\n        <h2 className={styles.h2}>пользователи</h2>\r\n        <div className={styles.tableWrap + ' ' + styles.glassLite}>\r\n          <table className={styles.table}>\r\n            <thead>\r\n              <tr>\r\n                <th>имя</th>\r\n                <th>логин</th>\r\n                <th>email</th>\r\n                <th>телефон</th>\r\n                <th>роль</th>\r\n                <th>действия</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {users.map((u: UserRow) => (\r\n                <tr key={u.id}>\r\n                  <td>{u.name}</td>\r\n                  <td>{u.username ?? '—'}</td>\r\n                  <td>{u.email ?? '—'}</td>\r\n                  <td>{u.phone ?? '—'}</td>\r\n                  <td>{u.role ?? '—'}</td>\r\n                  <td className={styles.actions}>\r\n                    <form action={deleteUser}>\r\n                      <input type=\"hidden\" name=\"id\" value={u.id} />\r\n                      <button className={`${styles.btn} ${styles.ghost}`} type=\"submit\">удалить</button>\r\n                    </form>\r\n                    <form action={forceResetPassword} className={styles.resetForm}>\r\n                      <input type=\"hidden\" name=\"id\" value={u.id} />\r\n                      <input name=\"newPassword\" placeholder=\"Новый пароль\" className={styles.input} required />\r\n                      <button className={`${styles.btn} ${styles.ghost}`} type=\"submit\">сбросить</button>\r\n                    </form>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </section>\r\n\r\n      <section className={styles.panel + ' ' + styles.glass}>\r\n        <h2 className={styles.h2}>создать/обновить пользователя</h2>\r\n        <form action={upsertUser} className={styles.form}>\r\n          <input name=\"id\" placeholder=\"id (опц.)\" className={styles.input} />\r\n          <input name=\"name\" placeholder=\"Имя\" className={styles.input} required />\r\n          <input name=\"username\" placeholder=\"Логин\" className={styles.input} />\r\n          <input name=\"email\" placeholder=\"Email\" className={styles.input} />\r\n          <input name=\"phone\" placeholder=\"Телефон\" className={styles.input} />\r\n          <select name=\"role\" className={st",
      "kind": "app-route-file",
      "routePath": "/admin/db-status",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/layout.module.css",
      "size": 788,
      "hash": "a805426b3b4c6976577cc360e42211a9453dd84c",
      "textSample": "/* app/admin/layout.module.css */\r\n.appShell {\r\n  display: grid;\r\n  grid-template-columns: 280px minmax(0, 1fr); /* синхронизировано с Sidebar */\r\n  min-height: 100dvh;\r\n  background: #f7f7f8;\r\n}\r\n\r\n.appSidebar {\r\n  position: sticky;\r\n  top: 0;\r\n  height: 100dvh;\r\n  width: 280px;          /* фиксируем контейнер */\r\n  flex: 0 0 280px;       /* запрещаем сжатие/растяжение */\r\n  overflow: hidden;      /* сайдбар без скроллов */\r\n  background: #ffffff;\r\n  border-right: 1px solid #e5e7eb;\r\n}\r\n\r\n.appMain {\r\n  min-width: 0;\r\n  height: 100dvh;\r\n  overflow: auto;        /* прокрутка только у контента */\r\n  -webkit-overflow-scrolling: touch;\r\n  padding: 16px;\r\n  background: #f7f7f8;\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/layout.tsx",
      "size": 845,
      "hash": "a8b690f7f22ed88b7ab79e8b54c8ba679391a964",
      "textSample": "// app/admin/layout.tsx\r\nimport { redirect } from 'next/navigation';\r\nimport type { ReactNode } from 'react';\r\nimport { auth } from '@/auth.config';\r\nimport { canViewAdmin, normalizeRole } from '@/lib/roles';\r\nimport Sidebar from '@/components/Sidebar';\r\nimport styles from './layout.module.css';\r\n\r\nexport const dynamic = 'force-dynamic';\r\n\r\nexport default async function AdminLayout({ children }: { children: ReactNode }) {\r\n  const session = await auth();\r\n  const role = normalizeRole((session?.user as any)?.role ?? null);\r\n\r\n  if (!session) redirect('/sign-in');\r\n  if (!canViewAdmin(role)) redirect('/');\r\n\r\n  return (\r\n    <div className={styles.appShell}>\r\n      <aside className={styles.appSidebar}>\r\n        <Sidebar />\r\n      </aside>\r\n      <main className={styles.appMain}>\r\n        {children}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n",
      "kind": "app-route-file",
      "routePath": "/admin",
      "pageType": "layout",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/page.module.css",
      "size": 753,
      "hash": "32e89a81dbe6dcb671a42dcf96b67d831cbf3819",
      "textSample": ".page { display:grid; gap:12px; }\r\n.head { padding:14px 16px; border-radius:16px; }\r\n.title { margin:0; font-weight:900; font-size:22px; color:#0f172a; }\r\n.subtitle { margin:6px 0 0; font-size:14px; color:#374151; }\r\n\r\n.info { padding:12px 14px; border-radius:16px; }\r\n.infoRow { display:grid; grid-template-columns:140px 1fr; gap:8px; align-items:center; }\r\n.infoKey { font-weight:800; color:#0f172a; }\r\n.infoVal { color:#374151; }\r\n\r\n.glass{\r\n  background:linear-gradient(180deg,rgba(255,255,255,.68),rgba(255,255,255,.4));\r\n  backdrop-filter:saturate(180%) blur(10px);\r\n  -webkit-backdrop-filter:saturate(180%) blur(10px);\r\n  border:1px solid rgba(229,231,235,.8);\r\n  box-shadow:0 6px 16px rgba(0,0,0,.06), inset 0 1px 0 rgba(255,255,255,.35);\r\n}\r\n\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/admin/page.tsx",
      "size": 1028,
      "hash": "bd4a7285ac2433cb92b9424539267034a7194c81",
      "textSample": "import { redirect } from 'next/navigation';\nimport { auth } from '@/auth.config';\nimport { canViewAdmin, normalizeRole } from '@/lib/roles';\nimport styles from './page.module.css';\n\nexport const dynamic = 'force-dynamic';\n\nexport default async function AdminStub() {\n  const session = await auth();\n  const role = normalizeRole((session?.user as any)?.role ?? null);\n  if (!canViewAdmin(role)) redirect('/');\n\n  return (\n    <main className={styles.page}>\n      <header className={`${styles.glass} ${styles.head}`}>\n        <h1 className={styles.title}>Администрирование</h1>\n        <p className={styles.subtitle}>доступ: {role || '—'}</p>\n      </header>\n\n      <section className={styles.info + ' ' + styles.glass}>\n        <div className={styles.infoRow}>\n          <span className={styles.infoKey}>панель</span>\n          <span className={styles.infoVal}>доступ к инструментам управления системой</span>\n        </div>\n      </section>\n    </main>\n  );\n}\n",
      "kind": "app-route-file",
      "routePath": "/admin",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/api/auth/[...nextauth]/route.ts",
      "size": 236,
      "hash": "eab432039eba77e26e308ffd0432fe36aa92dc1d",
      "textSample": "import NextAuth from \"next-auth\";\nimport { authOptions } from \"@/auth.config\";\n\nexport const runtime = \"nodejs\";\nexport const dynamic = \"force-dynamic\";\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };",
      "kind": "app-route-file",
      "routePath": "/api/auth/[...nextauth]",
      "pageType": "route",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/layout.tsx",
      "size": 708,
      "hash": "740eb3443028e26ea167522a7fe0b48f3b43bdd1",
      "textSample": "// app/layout.tsx\nimport type { ReactNode } from 'react';\nimport Providers from './providers';\nimport '@/styles/globals.css';\n\nexport const metadata = { title: 'G108 CRM' };\n\n// Глобальный SSE-клиент\nimport Live from '@/app/(app)/chat/live';\nimport { auth } from '@/auth.config';\n\nexport const dynamic = 'force-dynamic';\nexport const revalidate = 0;\n\nexport default async function RootLayout({ children }: { children: ReactNode }) {\n  const session = await auth();\n  const uid = (session?.user as any)?.id as string | undefined;\n\n  return (\n    <html lang=\"ru\">\n      <body>\n        <Providers>{children}</Providers>\n        {uid ? <Live uid={uid} /> : null}\n      </body>\n    </html>\n  );\n}\n",
      "kind": "app-route-file",
      "routePath": "/",
      "pageType": "layout",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": true,
        "revalidate": true,
        "generateMetadata": false,
        "metadata": true
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/page.tsx",
      "size": 205,
      "hash": "5eb1ac80e3d2ca8ed05e3850f2170dd04ad12c88",
      "textSample": "import { redirect } from 'next/navigation';\nimport { auth } from '@/auth.config';\n\nexport default async function Home() {\n  const session = await auth();\n  redirect(session ? '/dashboard' : '/sign-in');\n}\n",
      "kind": "app-route-file",
      "routePath": "/",
      "pageType": "page",
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "app/providers.tsx",
      "size": 270,
      "hash": "6f24d8c14c264c01749f0c6317fff154f522ed39",
      "textSample": "// app/providers.tsx\r\n'use client';\r\n\r\nimport { SessionProvider } from 'next-auth/react';\r\nimport type { ReactNode } from 'react';\r\n\r\nexport default function Providers({ children }: { children: ReactNode }) {\r\n  return <SessionProvider>{children}</SessionProvider>;\r\n}\r\n",
      "kind": "app-helper-file",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "auth.config.ts",
      "size": 2068,
      "hash": "0b09431572823c351d9aaa7c964cfeb810699a20",
      "textSample": "// auth.config.ts\nimport type { NextAuthOptions, DefaultSession } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { getServerSession } from 'next-auth';\nimport { compare } from 'bcryptjs';\nimport { prisma } from '@/lib/prisma';\n\ndeclare module 'next-auth' {\n  interface Session extends DefaultSession {\n    user: DefaultSession['user'] & { id: string; role: string | null };\n  }\n  // при необходимости можно расширить тип User тут\n}\n\nexport const authOptions: NextAuthOptions = {\n  session: { strategy: 'jwt' },\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        username: { label: 'Логин или Email', type: 'text' },\n        password: { label: 'Пароль', type: 'password' },\n      },\n      async authorize(credentials) {\n        if (!credentials?.username || !credentials?.password) return null;\n\n        const user =\n          (await prisma.user.findFirst({\n            where: {\n              OR: [\n                { username: credentials.username },\n                { email: credentials.username },\n              ],\n            },\n          })) || null;\n\n        if (!user?.passwordHash) return null;\n\n        const ok = await compare(credentials.password, user.passwordHash);\n        if (!ok) return null;\n\n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email ?? undefined,\n          role: user.role ?? null,\n        } as any;\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.uid = (user as any).id;\n        token.role = (user as any).role ?? null;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        (session.user as any).id = token.uid as string;\n        (session.user as any).role = (token as any).role ?? null;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: '/sign-in',\n  },\n};\n\nexport async function auth() {\n  return getServerSession(authOptions);\n}\n",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/AddUserModal.tsx",
      "size": 782,
      "hash": "61ad018a62ab4894627acdc1d669eeb6646f76bf",
      "textSample": "'use client';\r\n\r\nimport React from 'react';\r\nimport Modal from './Modal';\r\nimport UserForm from './UserForm';\r\n\r\nexport default function AddUserModal({ action }: { action: (fd: FormData) => Promise<void> }) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={() => setOpen(true)}\r\n        style={{\r\n          height: 36, padding: '6px 12px', borderRadius: 10,\r\n          border: '1px solid #8d2828', background: '#8d2828', color: '#fff', cursor: 'pointer'\r\n        }}\r\n      >\r\n        добавить\r\n      </button>\r\n\r\n      <Modal open={open} onClose={() => setOpen(false)} title=\"Создать пользователя\" width={780}>\r\n        <UserForm action={action} mode=\"create\" />\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/EditUserModal.tsx",
      "size": 952,
      "hash": "be1a0e236c06356a2d79f6d87535a905361b27dc",
      "textSample": "'use client';\r\n\r\nimport React from 'react';\r\nimport Modal from './Modal';\r\nimport UserForm, { UserFormInitials } from './UserForm';\r\n\r\nexport default function EditUserModal({\r\n  action, userId, initial,\r\n}: {\r\n  action: (fd: FormData) => Promise<void>;\r\n  userId: string;\r\n  initial: UserFormInitials & { name: string };\r\n}) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={() => setOpen(true)}\r\n        style={{\r\n          height: 32, padding: '4px 10px', borderRadius: 10,\r\n          border: '1px solid rgba(229,231,235,.9)', background: '#fff', cursor: 'pointer'\r\n        }}\r\n      >\r\n        редактировать\r\n      </button>\r\n\r\n      <Modal open={open} onClose={() => setOpen(false)} title={`Редактировать: ${initial.name}`} width={780}>\r\n        <UserForm action={action} mode=\"edit\" initialId={userId} initialValues={initial} />\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/Modal.tsx",
      "size": 2002,
      "hash": "5bb5b6434c7af53e8683a2b750b69fc0385677b3",
      "textSample": "'use client';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nexport default function Modal({\r\n  open, onClose, title, width = 780, children,\r\n}: { open: boolean; onClose: () => void; title?: string; width?: number; children: React.ReactNode }) {\r\n  const [mounted, setMounted] = useState(false);\r\n  useEffect(() => setMounted(true), []);\r\n  if (!open || !mounted) return null;\r\n\r\n  return createPortal(\r\n    <div\r\n      onClick={onClose}\r\n      style={{\r\n        position: 'fixed', inset: 0, zIndex: 50,\r\n        background: 'rgba(0,0,0,.44)',\r\n        display: 'flex', alignItems: 'center', justifyContent: 'center',\r\n        padding: 12,\r\n      }}\r\n    >\r\n      <div\r\n        onClick={(e) => e.stopPropagation()}\r\n        style={{\r\n          width, maxWidth: '96vw',\r\n          borderRadius: 18,\r\n          border: '1px solid rgba(229,231,235,.85)',\r\n          background: 'linear-gradient(180deg, rgba(255,255,255,0.68), rgba(255,255,255,0.42))',\r\n          backdropFilter: 'saturate(180%) blur(14px)',\r\n          WebkitBackdropFilter: 'saturate(180%) blur(14px)',\r\n          boxShadow: '0 18px 48px rgba(0,0,0,.18), inset 0 1px 0 rgba(255,255,255,.35)',\r\n          overflow: 'hidden',\r\n        }}\r\n      >\r\n        <div style={{ padding: '14px 16px', borderBottom: '1px solid rgba(229,231,235,.9)' }}>\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <h3 style={{ margin: 0, fontSize: 18, fontWeight: 900, color: '#0f172a', flex: 1 }}>{title}</h3>\r\n            <button\r\n              onClick={onClose}\r\n              aria-label=\"Закрыть\"\r\n              style={{\r\n                height: 36, width: 36, borderRadius: 12,\r\n                border: '1px solid rgba(229,231,235,.9)', background: '#fff', cursor: 'pointer'\r\n              }}\r\n            >×</button>\r\n          </div>\r\n        </div>\r\n        <div style={{ padding: 16 }}>{children}</div>\r\n      </div>\r\n    </div>,\r\n    document.body\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/Providers.tsx",
      "size": 182,
      "hash": "a6652d3615325982b87739ae4065cba049832f33",
      "textSample": "// components/Providers.tsx\n'use client';\n\nimport { ReactNode } from 'react';\n\nexport default function Providers({ children }: { children: ReactNode }) {\n  return <>{children}</>;\n}\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/Sidebar.tsx",
      "size": 9458,
      "hash": "e759abc4c3018f8ed48f248c7152f20d818b7f6c",
      "textSample": "// components/Sidebar.tsx\n'use client';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { useSession, signOut } from 'next-auth/react';\nimport { useEffect, useState } from 'react';\n\nconst BRAND = '#8d2828';\n\nconst ROLE_RU: Record<string, string> = {\n  admin: 'Администратор',\n  director: 'Директор',\n  deputy_plus: 'Заместитель +',\n  deputy: 'Заместитель',\n  teacher_plus: 'Педагог +',\n  teacher: 'Педагог',\n};\n\nfunction splitFio(full?: string | null) {\n  const s = (full || '').trim();\n  if (!s) return { last: 'ГОСТЬ', rest: '' };\n  const p = s.split(/\\s+/);\n  if (p.length >= 2) return { last: (p[0] || '').toUpperCase(), rest: p.slice(1).join(' ') };\n  return { last: s.toUpperCase(), rest: '' };\n}\n\nfunction Tile({\n  href,\n  label,\n  active,\n  unread,\n}: {\n  href: string;\n  label: string;\n  active?: boolean;\n  unread?: number;\n}) {\n  const showBadge = typeof unread === 'number' && unread > 0 && !active;\n  const isSingleLongWord = !/\\s/.test(label) && label.length >= 9;\n  return (\n    <Link href={href} className=\"navlink\" aria-current={active ? 'true' : undefined}>\n      <div className={`tile glass ${active ? 'active' : ''} ${showBadge ? 'unread' : ''}`}>\n        <span className={`label ${isSingleLongWord ? 'label--single' : 'label--multi'}`}>{label.toLowerCase()}</span>\n        {showBadge ? <span className=\"badge\">{unread! > 99 ? '99+' : unread}</span> : null}\n      </div>\n\n      <style jsx>{`\n        .navlink { display:block; text-decoration:none !important; }\n        .tile {\n          position: relative;\n          display: grid;\n          place-items: center;\n          text-align: center;\n          width: 78%;\n          margin: 0 auto;\n          aspect-ratio: 1 / 1;\n          border-radius: 14px;\n          border: 1px solid rgba(229,231,235,.8);\n          overflow: hidden;\n          cursor: pointer;\n          transition: transform .12s, border-color .12s, box-shadow .12s;\n        }\n        .glass {\n          background: linear-gradient(180deg, rgba(255,255,255,.68), rgba(255,255,255,.4));\n          backdrop-filter: saturate(180%) blur(10px);\n          -webkit-backdrop-filter: saturate(180%) blur(10px);\n          box-shadow: 0 4px 12px rgba(0,0,0,.06), inset 0 1px 0 rgba(255,255,255,.35);\n        }\n        .tile::before {\n          content: \"\"; position: absolute; inset: -35% -35% auto -35%; height: 55%;\n          background:\n            radial-gradient(120px 40px at 10% 0%, rgba(255,255,255,.55), rgba(255,255,255,0) 60%),\n            linear-gradient(90deg, rgba(255,255,255,.35), rgba(255,255,255,0.06));\n          opacity: 0; transform: translateY(-10%); transition: opacity .16s, transform .2s; z-index:1;\n        }\n        .tile:hover { transform: translateY(-1px); border-color:#cfe3ff; box-shadow:0 8px 18px rgba(0,0,0,.08); }\n        .tile:hover::before { opacity: 1; transform: translateY(0); }\n        .tile.active { outline: 2px solid rgba(207,227,255,.9); }\n        .tile.unread::after { content:\"\"; position:absolute; left:0; top:0; height:3px; width:100%; background:#ef9b28; z-index:2; }\n\n        .label { position:relative; z-index:3; color:#0f172a; font-weight:700; line-height:1.08;\n                 display:-webkit-box; -webkit-box-orient:vertical; overflow:hidden;\n                 line-clamp: 2;         /* стандарт */\n                 -webkit-line-clamp: 2; /* fallback для WebKit */\n        }\n        .label--multi { font-size:12px; letter-spacing:.01em; }\n        .label--single { font-size:11px; letter-spacing:.01em; font-stretch:95%; }\n\n        .badge { position:absolute; right:6px; top:6px; font-size:10.5px; line-height:18px; min-width:22px;\n                 text-align:center; padding:0 6px; border-radius:9999px; background:${BRAND}; color:#fff; font-weight:800;\n                 box-shadow:0 1px 4px rgba(0,0,0,.12); }\n      `}</style>\n    </Link>\n  );\n}\n\nexport default function Sidebar({ unreadChats = 0 }: { unreadChats?: number }) {\n  const pathname = usePathname();\n  const { data } = u",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/UnreadBadgeClient.tsx",
      "size": 662,
      "hash": "3ab92f9f783e4c0363fbc0164004745e08f5cc51",
      "textSample": "//'use client'\r\n'use client';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function UnreadBadgeClient({ initial }: { initial: number }) {\r\n  const [n, setN] = useState(initial);\r\n\r\n  useEffect(() => {\r\n    const onBump = () => setN(x => x + 1);\r\n    window.addEventListener('app:unread-bump', onBump as any);\r\n    return () => window.removeEventListener('app:unread-bump', onBump as any);\r\n  }, []);\r\n\r\n  return (\r\n    <span style={{\r\n      display:'inline-block', fontSize:12, padding:'3px 8px', borderRadius:9999,\r\n      background:'#f3f4f6', border:'1px solid rgba(229,231,235,.85)', marginLeft:8\r\n    }}>\r\n      {n}\r\n    </span>\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/UserForm.tsx",
      "size": 4263,
      "hash": "98c6ca646a6ef3111de4610713d3e95366924de6",
      "textSample": "'use client';\r\n\r\nimport React from 'react';\r\n\r\nconst BORDER = 'rgba(229,231,235,.9)';\r\nconst BRAND = '#8d2828';\r\n\r\nconst inp: React.CSSProperties = {\r\n  height: 36, fontSize: 14, padding: '6px 10px',\r\n  borderRadius: 10, border: `1px solid ${BORDER}`, background: '#fff', outline: 'none',\r\n};\r\nconst btnPrimary: React.CSSProperties = {\r\n  height: 36, padding: '6px 12px', borderRadius: 10,\r\n  border: `1px solid ${BRAND}`, background: BRAND, color: '#fff', cursor: 'pointer',\r\n};\r\n\r\nexport type UserFormInitials = {\r\n  name?: string; username?: string; email?: string; phone?: string; classroom?: string;\r\n  role?: string; birthday?: string; telegram?: string; about?: string;\r\n  notifyEmail?: boolean; notifyTelegram?: boolean;\r\n};\r\n\r\nexport default function UserForm({\r\n  action, mode, initialId, initialValues,\r\n}: {\r\n  action: (fd: FormData) => Promise<void>;\r\n  mode: 'create' | 'edit';\r\n  initialId?: string;\r\n  initialValues?: UserFormInitials;\r\n}) {\r\n  return (\r\n    <form action={action}>\r\n      {mode === 'edit' && <input type=\"hidden\" name=\"id\" defaultValue={initialId} />}\r\n\r\n      <div style={{ display: 'grid', gap: 12, gridTemplateColumns: 'repeat(2, minmax(0, 1fr))' }}>\r\n        <Field label=\"ФИО\"><input name=\"name\" defaultValue={initialValues?.name} style={inp} required /></Field>\r\n        <Field label=\"Логин\"><input name=\"username\" defaultValue={initialValues?.username} style={inp} /></Field>\r\n\r\n        <Field label=\"E-mail\"><input name=\"email\" type=\"email\" defaultValue={initialValues?.email} style={inp} /></Field>\r\n        <Field label=\"Телефон\"><input name=\"phone\" defaultValue={initialValues?.phone} style={inp} /></Field>\r\n\r\n        <Field label=\"Классное руководство\"><input name=\"classroom\" defaultValue={initialValues?.classroom} style={inp} /></Field>\r\n        <Field label=\"Роль\">\r\n          <select name=\"role\" defaultValue={initialValues?.role ?? 'teacher'} style={inp}>\r\n            <option value=\"director\">Директор</option>\r\n            <option value=\"deputy_plus\">Заместитель +</option>\r\n            <option value=\"deputy\">Заместитель</option>\r\n            <option value=\"teacher_plus\">Педагог +</option>\r\n            <option value=\"teacher\">Педагог</option>\r\n          </select>\r\n        </Field>\r\n\r\n        <Field label=\"Дата рождения\"><input name=\"birthday\" type=\"date\" defaultValue={initialValues?.birthday} style={inp} /></Field>\r\n        <Field label=\"Telegram\"><input name=\"telegram\" defaultValue={initialValues?.telegram} style={inp} /></Field>\r\n\r\n        <div style={{ gridColumn: '1 / -1' }}>\r\n          <Field label=\"О себе\">\r\n            <textarea name=\"about\" defaultValue={initialValues?.about} style={{ ...inp, minHeight: 96 }} />\r\n          </Field>\r\n        </div>\r\n\r\n        {mode === 'create'\r\n          ? <Field label=\"Пароль (при создании)\"><input name=\"password\" type=\"password\" style={inp} /></Field>\r\n          : <Field label=\"Новый пароль (опционально)\"><input name=\"newPassword\" type=\"password\" style={inp} /></Field>\r\n        }\r\n\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>\r\n          <label style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\r\n            <input type=\"checkbox\" name=\"notifyEmail\" defaultChecked={!!initialValues?.notifyEmail} />\r\n            уведомлять по e-mail\r\n          </label>\r\n          <label style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\r\n            <input type=\"checkbox\" name=\"notifyTelegram\" defaultChecked={!!initialValues?.notifyTelegram} />\r\n            уведомлять в telegram\r\n          </label>\r\n        </div>\r\n\r\n        <div style={{ gridColumn: '1 / -1', display: 'flex', justifyContent: 'flex-end', gap: 8 }}>\r\n          <button style={btnPrimary} type=\"submit\">{mode === 'create' ? 'создать' : 'сохранить'}</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction Field({ label, children }: { label: string; children: React.ReactNode }) {\r\n  return (\r\n    <div style={{ display: 'grid', gap: 6 }}>\r\n      <label style={{ font",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "components/UserMenu.tsx",
      "size": 300,
      "hash": "a64e68b57220dfa2f053c90826f55e51b3e04706",
      "textSample": "// components/UserMenu.tsx\r\n'use client';\r\n\r\nimport { signOut } from 'next-auth/react';\r\n\r\nexport default function UserMenu() {\r\n  return (\r\n    <button\r\n      onClick={() => signOut({ callbackUrl: '/sign-in' })}\r\n      className=\"underline text-sm\"\r\n    >\r\n      Выход\r\n    </button>\r\n  );\r\n}\r\n",
      "kind": "component",
      "routePath": null,
      "pageType": null,
      "isClient": true,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/auth.ts",
      "size": 2981,
      "hash": "29080f73a72fcca883e0d75af988abf8089dcf7f",
      "textSample": "// lib/auth.ts\r\nimport NextAuth, { NextAuthOptions, getServerSession } from \"next-auth\";\r\nimport Credentials from \"next-auth/providers/credentials\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport * as RBAC from \"@/lib/rbac\";\r\n\r\nfunction isRootUserSafe(user: any): boolean {\r\n  try {\r\n    if (typeof (RBAC as any)?.isRootUser === \"function\") {\r\n      return !!(RBAC as any).isRootUser(user);\r\n    }\r\n  } catch {}\r\n  return user?.name === \"Евжик Иван Сергеевич\";\r\n}\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  debug: process.env.NODE_ENV === \"development\",\r\n  session: { strategy: \"jwt\" },\r\n  pages: { signIn: \"/sign-in\" },\r\n  providers: [\r\n    Credentials({\r\n      credentials: {\r\n        username: { label: \"username/email/ФИО\", type: \"text\" },\r\n        password: { label: \"password\", type: \"password\" },\r\n      },\r\n      authorize: async (creds) => {\r\n        try {\r\n          const username = String(creds?.username || \"\").trim();\r\n          const password = String(creds?.password || \"\");\r\n          if (!username || !password) return null;\r\n\r\n          const user =\r\n            (await prisma.user.findFirst({ where: { username } })) ||\r\n            (await prisma.user.findFirst({ where: { email: username } })) ||\r\n            (await prisma.user.findFirst({ where: { name: username } }));\r\n\r\n          if (!user || !user.passwordHash) return null;\r\n\r\n          const ok = await bcrypt.compare(password, user.passwordHash);\r\n          if (!ok) return null;\r\n\r\n          return {\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email,\r\n            username: user.username,\r\n            role: user.role,\r\n          } as any;\r\n        } catch (e) {\r\n          console.error(\"[auth][authorize] error:\", e);\r\n          return null;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        (token as any).uid = (user as any).id;\r\n        token.name = user.name || token.name;\r\n        (token as any).role = (user as any).role || null;\r\n        (token as any).username = (user as any).username || null;\r\n        (token as any).isRoot = isRootUserSafe(user);\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      (session.user as any) = {\r\n        id: (token as any).uid || token.sub,\r\n        name: session.user?.name || (token as any).name || \"\",\r\n        email: session.user?.email || null,\r\n        username: (token as any).username || null,\r\n        role: (token as any).role || null,\r\n        isRoot: !!(token as any).isRoot,\r\n      };\r\n      return session;\r\n    },\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n\r\n// для совместимости с существующим кодом (`auth()` в API-роутах)\r\nexport const auth = () => getServerSession(authOptions);\r\n\r\n// next-auth handler для маршрута\r\nconst handler = NextAuth(authOptions);\r\nexport { handler };\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/chatSSE.ts",
      "size": 1135,
      "hash": "26460c523fa4b587e98d05ce37e7f118c32769ac",
      "textSample": "// lib/chatSSE.ts\r\ntype Client = { controller: ReadableStreamDefaultController };\r\nconst channels = new Map<string, Set<Client>>();\r\nconst enc = new TextEncoder();\r\n\r\nexport function subscribe(threadId: string, controller: ReadableStreamDefaultController) {\r\n  let set = channels.get(threadId);\r\n  if (!set) { set = new Set(); channels.set(threadId, set); }\r\n  const client: Client = { controller };\r\n  set.add(client);\r\n  return () => {\r\n    const s = channels.get(threadId);\r\n    if (!s) return;\r\n    s.delete(client);\r\n    if (s.size === 0) channels.delete(threadId);\r\n  };\r\n}\r\n\r\nexport function publishMessage(threadId: string, messagePayload: unknown) {\r\n  broadcast(threadId, { type: \"message\", data: messagePayload });\r\n}\r\nexport function publishRead(threadId: string, readPayload: unknown) {\r\n  broadcast(threadId, { type: \"read\", data: readPayload });\r\n}\r\n\r\nfunction broadcast(threadId: string, payload: any) {\r\n  const s = channels.get(threadId);\r\n  if (!s || s.size === 0) return;\r\n  const data = enc.encode(`data: ${JSON.stringify(payload)}\\n\\n`);\r\n  for (const c of s) { try { c.controller.enqueue(data); } catch {} }\r\n}\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/db.ts",
      "size": 367,
      "hash": "290c7f4e3cf8ec339e932c04e3f4451a61d6175f",
      "textSample": "﻿import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma?: PrismaClient };\r\n\r\nexport const db =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    // log: ['query'], // при необходимости включай лог\r\n  });\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = db;\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/dbInfo.ts",
      "size": 715,
      "hash": "c231edc4c5364856851c6c3b973f68560d2a8e43",
      "textSample": "// lib/dbInfo.ts\r\nexport function getDbInfo() {\r\n  const url = process.env.DATABASE_URL || \"\";\r\n  try {\r\n    const u = new URL(url);\r\n    const host = u.hostname;       // ep-summer-frog-...neon.tech\r\n    const database = u.pathname.replace(/^\\//, \"\") || \"\";\r\n    const isPgBouncer = /pgbouncer=true/i.test(u.search);\r\n    return { host, database, isPgBouncer, raw: url };\r\n  } catch {\r\n    return { host: \"\", database: \"\", isPgBouncer: false, raw: url };\r\n  }\r\n}\r\n\r\nexport function maskUrl(url: string) {\r\n  if (!url) return \"\";\r\n  try {\r\n    const u = new URL(url);\r\n    if (u.password) u.password = \"***\";\r\n    if (u.username) u.username = \"***\";\r\n    return u.toString();\r\n  } catch {\r\n    return url;\r\n  }\r\n}\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/edu.ts",
      "size": 2622,
      "hash": "282f9a719918958fed02b75806d363005fbaf301",
      "textSample": "// lib/edu.ts\r\n// Справочники для форм. При желании — вытянем из БД, но пока так удобнее поддерживать.\r\n\r\nexport const SUBJECTS_2025_RU: string[] = [\r\n  // Языки и словесность\r\n  \"Русский язык\",\r\n  \"Литература\",\r\n  \"Иностранный язык (английский)\",\r\n  // Математика и информатика\r\n  \"Математика\",\r\n  \"Алгебра\",\r\n  \"Геометрия\",\r\n  \"Информатика\",\r\n  // Естественные науки\r\n  \"Физика\",\r\n  \"Химия\",\r\n  \"Биология\",\r\n  \"География\",\r\n  // Общественно-научные дисциплины\r\n  \"История России\",\r\n  \"Всеобщая история\",\r\n  \"Обществознание\",\r\n  \"Право (вариативный)\",\r\n  \"Экономика (вариативный)\",\r\n  // Искусство, технологии, безопасность, спорт\r\n  \"Изобразительное искусство\",\r\n  \"Музыка\",\r\n  \"Технология\",\r\n  \"Физическая культура\",\r\n  \"ОБиЗР\",\r\n  // Культурологические модули\r\n  \"ОДНКНР\",\r\n  // Старшая школа\r\n  \"Индивидуальный проект\"\r\n];\r\n\r\n// Методические объединения — по структуре раздела «Педагогический состав» гимназии №108.\r\nexport const METHODICAL_GROUPS_108: string[] = [\r\n  \"МО начальной школы\",\r\n  \"МО русского языка и литературы\",\r\n  \"МО иностранных языков\",\r\n  \"МО математики и информатики\",\r\n  \"МО естествознания\",\r\n  \"МО истории и обществознания\",\r\n  \"МО физической культуры и спорта\",\r\n  \"МО дополнительного образования\",\r\n  \"МО классных руководителей\",\r\n  \"Администрация\",\r\n  \"Техперсонал\",\r\n  \"Психологи\"\r\n];\r\n\r\n// Роли — читаем из БД через /api/roles, но на случай деградации можно подстраховаться:\r\nexport const FALLBACK_ROLES = [\r\n  { slug: \"director\",        name: \"Директор\" },\r\n  { slug: \"deputy_plus\",     name: \"Заместитель +\" },\r\n  { slug: \"deputy\",          name: \"Заместитель\" },\r\n  { slug: \"teacher_plus\",    name: \"Педагог +\" },\r\n  { slug: \"teacher\",         name: \"Педагог\" }\r\n];\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/http.ts",
      "size": 345,
      "hash": "d092c1396e662c339fc9e9e279bb341c5509661c",
      "textSample": "// app/lib/http.ts\r\nexport async function safeJson<T = any>(res: Response): Promise<T> {\r\n  const text = await res.text();\r\n  if (!text) throw new Error(`Пустой ответ ${res.status}`);\r\n  try {\r\n    return JSON.parse(text) as T;\r\n  } catch {\r\n    throw new Error(`Неверный JSON ${res.status}: ${text.slice(0, 400)}`);\r\n  }\r\n}\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/prisma.ts",
      "size": 366,
      "hash": "203dde552e7a73ceb45b2fc8be5c74cbf9be7a15",
      "textSample": "// lib/prisma.ts\nimport { PrismaClient } from '@prisma/client';\n\nconst g = globalThis as unknown as { prisma?: PrismaClient };\n\nexport const prisma =\n  g.prisma ??\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === 'development'\n        ? ['query', 'error', 'warn']\n        : ['error'],\n  });\n\nif (process.env.NODE_ENV !== 'production') g.prisma = prisma;\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/rbac.ts",
      "size": 3842,
      "hash": "50a3778e119d9023bf0c1b60489511a92be0ccdf",
      "textSample": "﻿// lib/rbac.ts\r\nimport { prisma } from \"@/lib/prisma\";\r\n\r\nexport const ROLE = {\r\n  DIRECTOR: \"Р”РёСЂРµРєС‚РѕСЂ\",\r\n  DEPUTY_PLUS: \"Р—Р°РјРµСЃС‚РёС‚РµР»СЊ +\",\r\n  DEPUTY: \"Р—Р°РјРµСЃС‚РёС‚РµР»СЊ\",\r\n  TEACHER_PLUS: \"РџРµРґР°РіРѕРі +\",\r\n  TEACHER: \"РџРµРґР°РіРѕРі\",\r\n} as const;\r\n\r\nexport type Action =\r\n  | \"task.create\"\r\n  | \"task.assign\"\r\n  | \"task.hide\"\r\n  | \"task.viewHidden\"\r\n  | \"user.manage\"\r\n  | \"user.updatePhone:self\"\r\n  | \"user.updatePhone:any\"\r\n  | \"settings.changeUi\";\r\n\r\nfunction rootIds(): Set<string> {\r\n  const raw = process.env.ROOT_USER_IDS || \"\";\r\n  return new Set(raw.split(\",\").map((s) => s.trim()).filter(Boolean));\r\n}\r\n\r\ntype RoleRow = { name: string; power: number };\r\n\r\nexport async function getUserRoles(userId: string): Promise<RoleRow[]> {\r\n  const rows = await prisma.$queryRaw<RoleRow[]>`\r\n    SELECT r.name, r.power\r\n    FROM Role r\r\n    JOIN UserRole ur ON ur.roleId = r.id\r\n    WHERE ur.userId = ${userId}\r\n  `;\r\n  return rows;\r\n}\r\n\r\nexport async function maxPower(userId: string): Promise<number> {\r\n  if (rootIds().has(userId)) return Number.MAX_SAFE_INTEGER;\r\n  const roles = await getUserRoles(userId);\r\n  return roles.length ? Math.max(...roles.map((r) => r.power)) : 0;\r\n}\r\n\r\nexport async function hasAnyRole(userId: string, names: string[]) {\r\n  if (rootIds().has(userId)) return true;\r\n  const roles = await getUserRoles(userId);\r\n  return roles.some((r) => names.includes(r.name));\r\n}\r\n\r\nexport async function can(userId: string, action: Action): Promise<boolean> {\r\n  if (rootIds().has(userId)) return true;\r\n\r\n  switch (action) {\r\n    case \"settings.changeUi\":\r\n    case \"user.updatePhone:self\":\r\n      return true;\r\n    case \"user.manage\":\r\n    case \"task.create\":\r\n    case \"task.assign\":\r\n      return hasAnyRole(userId, [ROLE.DIRECTOR, ROLE.DEPUTY_PLUS]);\r\n    case \"task.hide\":\r\n      return hasAnyRole(userId, [ROLE.DIRECTOR, ROLE.DEPUTY_PLUS, ROLE.DEPUTY]);\r\n    case \"task.viewHidden\":\r\n      return hasAnyRole(userId, [ROLE.DIRECTOR, ROLE.DEPUTY_PLUS, ROLE.DEPUTY]);\r\n    case \"user.updatePhone:any\":\r\n      return hasAnyRole(userId, [ROLE.DIRECTOR, ROLE.DEPUTY_PLUS, ROLE.DEPUTY]);\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n// -------------------- Р’РёРґРёРјРѕСЃС‚СЊ Р·Р°РґР°С‡Рё --------------------\r\n\r\ntype FlagRow = { hidden: number; minRolePowerToSeeHidden: number };\r\ntype CntRow = { cnt: number };\r\n\r\nexport async function canSeeTask(userId: string, taskId: string): Promise<boolean> {\r\n  if (rootIds().has(userId)) return true;\r\n\r\n  // 1) Р¤Р»Р°РіРё Р·Р°РґР°С‡Рё\r\n  const flags = await prisma.$queryRaw<FlagRow[]>`\r\n    SELECT hidden, minRolePowerToSeeHidden\r\n    FROM Task\r\n    WHERE id = ${taskId}\r\n    LIMIT 1\r\n  `;\r\n  if (!flags.length) return false;\r\n  const hidden = !!flags[0].hidden;\r\n  const threshold = flags[0].minRolePowerToSeeHidden;\r\n\r\n  if (!hidden) return true;\r\n\r\n  // 2) РќР°Р·РЅР°С‡РµРЅ РЅР°РїСЂСЏРјСѓСЋ?\r\n  const direct = await prisma.$queryRaw<CntRow[]>`\r\n    SELECT COUNT(*) as cnt FROM TaskAssigneeUser\r\n    WHERE taskId = ${taskId} AND userId = ${userId}\r\n  `;\r\n  if ((direct[0]?.cnt ?? 0) > 0) return true;\r\n\r\n  // 3) РќР°Р·РЅР°С‡РµРЅ С‡РµСЂРµР· РіСЂСѓРїРїСѓ?\r\n  const viaGroup = await prisma.$queryRaw<CntRow[]>`\r\n    SELECT COUNT(*) as cnt\r\n    FROM TaskAssigneeGroup tg\r\n    JOIN GroupMember gm ON gm.groupId = tg.groupId\r\n    WHERE tg.taskId = ${taskId} AND gm.userId = ${userId}\r\n  `;\r\n  if ((viaGroup[0]?.cnt ?? 0) > 0) return true;\r\n\r\n  // 4) Р”РѕСЃС‚Р°С‚РѕС‡РµРЅ Р»Рё СѓСЂРѕРІРµРЅСЊ СЂРѕР»Рё\r\n  const power = await maxPower(userId);\r\n  return power >= threshold;\r\n}\r\n\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/roles.ts",
      "size": 1196,
      "hash": "fb01c361f9c03bbf7e29075544bb283ad6c05fda",
      "textSample": "// lib/roles.ts\nexport type Role =\n  | 'guest'\n  | 'user'\n  | 'student'\n  | 'staff'\n  | 'teacher'\n  | 'deputy'\n  | 'deputy_plus'\n  | 'director';\n\nexport const roleOrder: Role[] = [\n  'guest',\n  'user',\n  'student',\n  'staff',\n  'teacher',\n  'deputy',\n  'deputy_plus',\n  'director',\n];\n\nexport function isRole(value: unknown): value is Role {\n  return typeof value === 'string' && (roleOrder as string[]).includes(value);\n}\n\nexport function normalizeRole(value: unknown): Role | null {\n  if (typeof value !== 'string') return null;\n  const v = value.trim();\n  return isRole(v) ? (v as Role) : null;\n}\n\nexport function canViewAdmin(role: Role | null | undefined): boolean {\n  return role === 'director' || role === 'deputy_plus';\n}\n\nexport function canCreateTasks(role: Role | null | undefined): boolean {\n  if (!role) return false;\n  return roleOrder.indexOf(role) >= roleOrder.indexOf('deputy');\n}\n\nexport function canViewTasks(role: Role | null | undefined): boolean {\n  if (!role) return false;\n  return roleOrder.indexOf(role) >= roleOrder.indexOf('teacher');\n}\n\nexport function hasFullAccess(role: Role | null | undefined): boolean {\n  return role === 'deputy_plus' || role === 'director';\n}\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "lib/serialize.ts",
      "size": 604,
      "hash": "8bcef753eb10a19f364f9857979b2e6c0865ddd8",
      "textSample": "// app/lib/serialize.ts\r\nexport function parseStrArray(input: unknown): string[] {\r\n  if (Array.isArray(input)) return input.map(x => String(x ?? \"\")).filter(Boolean);\r\n  if (typeof input !== \"string\" || !input.trim()) return [];\r\n  try {\r\n    const v = JSON.parse(input);\r\n    return Array.isArray(v) ? v.map(x => String(x ?? \"\")).filter(Boolean) : [];\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\nexport function toDbStrArray(v: unknown): string | null {\r\n  if (!Array.isArray(v)) return null;\r\n  const arr = v.map(x => String(x ?? \"\")).filter(Boolean);\r\n  return arr.length ? JSON.stringify(arr) : null;\r\n}\r\n",
      "kind": "lib",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "middleware.ts",
      "size": 309,
      "hash": "b3010a7f6488efa9114151dbb6d9de6904712cb5",
      "textSample": "import { withAuth } from \"next-auth/middleware\";\n\nexport default withAuth({\n  pages: { signIn: \"/sign-in\" },\n  callbacks: { authorized: ({ token }) => !!token },\n  secret: process.env.NEXTAUTH_SECRET\n});\n\nexport const config = {\n  matcher: [\"/((?!api/auth|_next/static|_next/image|favicon.ico|sign-in).*)\"]\n};",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "next-env.d.ts",
      "size": 216,
      "hash": "4eeda91c7bb116ef5d18c84ce15e5588ec2133c3",
      "textSample": "/// <reference types=\"next\" />\r\n/// <reference types=\"next/image-types/global\" />\r\n\r\n// NOTE: This file should not be edited\r\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\r\n",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "next.config.ts",
      "size": 121,
      "hash": "5bba21f2b8cad71a1c79903f8a28518f9f2647d1",
      "textSample": "﻿import type { NextConfig } from \"next\";\r\nconst config: NextConfig = { reactStrictMode: true };\r\nexport default config;",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "package-lock.json",
      "size": 56952,
      "hash": "8b73c2fb78db0559733fc15cdf0b5463c93af06a",
      "textSample": "{\r\n  \"name\": \"g108crm-core\",\r\n  \"version\": \"0.1.0\",\r\n  \"lockfileVersion\": 3,\r\n  \"requires\": true,\r\n  \"packages\": {\r\n    \"\": {\r\n      \"name\": \"g108crm-core\",\r\n      \"version\": \"0.1.0\",\r\n      \"dependencies\": {\r\n        \"@prisma/client\": \"^6.14.0\",\r\n        \"@types/bcryptjs\": \"2.4.6\",\r\n        \"bcryptjs\": \"3.0.2\",\r\n        \"next\": \"^15.4.6\",\r\n        \"next-auth\": \"4.24.11\",\r\n        \"react\": \"^18.3.1\",\r\n        \"react-dom\": \"^18.3.1\"\r\n      },\r\n      \"devDependencies\": {\r\n        \"@types/node\": \"^24.2.1\",\r\n        \"@types/react\": \"^19.1.10\",\r\n        \"@types/react-dom\": \"^19.1.7\",\r\n        \"prisma\": \"^6.14.0\",\r\n        \"typescript\": \"^5.9.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=18\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/runtime\": {\r\n      \"version\": \"7.28.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.2.tgz\",\r\n      \"integrity\": \"sha512-KHp2IflsnGywDjBWDkR9iEqiWSpc8GIi0lgTT3mOElT0PP1tG26P4tmFI2YvAdzgq9RGyoHZQEIEdZy6Ec5xCA==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@emnapi/runtime\": {\r\n      \"version\": \"1.4.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.5.tgz\",\r\n      \"integrity\": \"sha512-++LApOtY0pEEz1zrd9vy1/zXVaVJJ/EbAF3u0fXIzPJEDtnITsBGbbK0EkM72amhl/R5b+5xx0Y/QhcVOpuulg==\",\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"dependencies\": {\r\n        \"tslib\": \"^2.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-darwin-arm64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-ryFMfvxxpQRsgZJqBd4wsttYQbCxsJksrv9Lw/v798JcQ8+w84mBWuXwl+TT0WJ/WrYOLaYpwQXi3sA9nTIaIg==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-darwin-arm64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-darwin-x64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-yHpJYynROAj12TA6qil58hmPmAwxKKC7reUqtGLzsOHfP7/rniNGTL8tjWX6L3CTV4+5P4ypcS7Pp+7OB+8ihA==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-darwin-x64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-darwin-arm64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-sBZmpwmxqwlqG9ueWFXtockhsxefaV6O84BMOrhtg/YqbTaRdqDE7hxraVE3y6gVM4eExmfzW4a8el9ArLeEiQ==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-darwin-x64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-M64XVuL94OgiNHa5/m2YvEQI5q2cl9d/wk0qFTDVXcYzi43lxuiFTftMR1tOnFQovVXNZJ5TURSDK2pNe9Yzqg==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_mo",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "package.json",
      "size": 1262,
      "hash": "7cdc5a8f7692b221c874c82c56107dc7a1e9fe84",
      "textSample": "{\r\n  \"name\": \"g108crm-core\",\r\n  \"private\": true,\r\n  \"version\": \"0.1.0\",\r\n  \"engines\": {\r\n    \"node\": \">=18\"\r\n  },\r\n  \"scripts\": {\r\n    \"snapshot\": \"node tools/snapshot.js\",\r\n    \"snapshot:env\": \"node tools/snapshot.js --include-env-names\",\r\n    \"typecheck\": \"tsc -p tsconfig.json --noEmit\",\r\n    \"list:endpoints\": \"node scripts/list-endpoints.mjs\",\r\n    \"dev\": \"next dev -p 3000\",\r\n    \"start\": \"next start -p 3000\",\r\n    \"prisma:generate\": \"prisma generate\",\r\n    \"prisma:migrate:deploy\": \"prisma migrate deploy\",\r\n    \"lint\": \"eslint . --ext .ts,.tsx --max-warnings=0\",\r\n    \"build\": \"next build\",\r\n    \"build:fast\": \"next build --no-lint\",\r\n    \"prisma:deploy\": \"prisma migrate deploy\",\r\n    \"db:seed\": \"prisma db seed\",\r\n    \"vercel-build\": \"prisma generate && prisma migrate deploy && next build\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@prisma/client\": \"^6.14.0\",\r\n    \"@types/bcryptjs\": \"2.4.6\",\r\n    \"bcryptjs\": \"3.0.2\",\r\n    \"next\": \"^15.4.6\",\r\n    \"next-auth\": \"4.24.11\",\r\n    \"react\": \"^18.3.1\",\r\n    \"react-dom\": \"^18.3.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^24.2.1\",\r\n    \"@types/react\": \"^19.1.10\",\r\n    \"@types/react-dom\": \"^19.1.7\",\r\n    \"prisma\": \"^6.14.0\",\r\n    \"typescript\": \"^5.9.2\"\r\n  },\r\n  \"postinstall\": \"prisma generate\"\r\n  \r\n}\r\n",
      "kind": "package",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/dev.db",
      "size": 0,
      "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
      "textSample": null,
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/000_init/migration.sql",
      "size": 14,
      "hash": "3b17ac717a2294785f1f977628b9cba0de0e2c03",
      "textSample": "/* baseline */",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250814151727_init/migration.sql",
      "size": 4653,
      "hash": "19c7a0e6571a9abecdb97baafe4fe0b8d933840b",
      "textSample": "-- CreateTable\r\nCREATE TABLE \"public\".\"User\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"name\" TEXT NOT NULL,\r\n    \"username\" TEXT,\r\n    \"email\" TEXT,\r\n    \"phone\" TEXT,\r\n    \"birthday\" TIMESTAMP(3),\r\n    \"classroom\" TEXT,\r\n    \"role\" TEXT,\r\n    \"avatarUrl\" TEXT,\r\n    \"telegram\" TEXT,\r\n    \"about\" TEXT,\r\n    \"notifyEmail\" BOOLEAN NOT NULL DEFAULT true,\r\n    \"notifyTelegram\" BOOLEAN NOT NULL DEFAULT false,\r\n    \"subjects\" TEXT,\r\n    \"methodicalGroups\" TEXT,\r\n    \"passwordHash\" TEXT,\r\n    \"lastSeen\" TIMESTAMP(3),\r\n\r\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"Group\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"name\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"Group_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"GroupMember\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"userId\" TEXT NOT NULL,\r\n    \"groupId\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"GroupMember_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"Thread\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"aId\" TEXT,\r\n    \"bId\" TEXT,\r\n    \"lastMessageAt\" TIMESTAMP(3),\r\n    \"lastMessageText\" TEXT,\r\n    \"title\" TEXT NOT NULL DEFAULT '',\r\n\r\n    CONSTRAINT \"Thread_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"Message\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n    \"text\" TEXT NOT NULL,\r\n    \"authorId\" TEXT NOT NULL,\r\n    \"threadId\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"Message_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"Task\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"title\" TEXT NOT NULL,\r\n    \"description\" TEXT NOT NULL,\r\n    \"dueDate\" TIMESTAMP(3) NOT NULL,\r\n    \"hidden\" BOOLEAN NOT NULL DEFAULT false,\r\n    \"priority\" TEXT NOT NULL DEFAULT 'normal',\r\n\r\n    CONSTRAINT \"Task_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"TaskAssignee\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"taskId\" TEXT NOT NULL,\r\n    \"userId\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"TaskAssignee_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"Tag\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"name\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"Tag_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateTable\r\nCREATE TABLE \"public\".\"TaskTag\" (\r\n    \"id\" TEXT NOT NULL,\r\n    \"taskId\" TEXT NOT NULL,\r\n    \"tagId\" TEXT NOT NULL,\r\n\r\n    CONSTRAINT \"TaskTag_pkey\" PRIMARY KEY (\"id\")\r\n);\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"User_username_key\" ON \"public\".\"User\"(\"username\");\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"User_email_key\" ON \"public\".\"User\"(\"email\");\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"User_phone_key\" ON \"public\".\"User\"(\"phone\");\r\n\r\n-- CreateIndex\r\nCREATE INDEX \"Thread_lastMessageAt_id_idx\" ON \"public\".\"Thread\"(\"lastMessageAt\", \"id\");\r\n\r\n-- CreateIndex\r\nCREATE UNIQUE INDEX \"Tag_name_key\" ON \"public\".\"Tag\"(\"name\");\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"GroupMember\" ADD CONSTRAINT \"GroupMember_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"public\".\"User\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"GroupMember\" ADD CONSTRAINT \"GroupMember_groupId_fkey\" FOREIGN KEY (\"groupId\") REFERENCES \"public\".\"Group\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"Thread\" ADD CONSTRAINT \"Thread_aId_fkey\" FOREIGN KEY (\"aId\") REFERENCES \"public\".\"User\"(\"id\") ON DELETE SET NULL ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"Thread\" ADD CONSTRAINT \"Thread_bId_fkey\" FOREIGN KEY (\"bId\") REFERENCES \"public\".\"User\"(\"id\") ON DELETE SET NULL ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"Message\" ADD CONSTRAINT \"Message_authorId_fkey\" FOREIGN KEY (\"authorId\") REFERENCES \"public\".\"User\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"Message\" ADD CONSTRAINT \"Message_threadId_fkey\" FOREIGN KEY (\"threadId\") REFERENCES \"public\".\"Thread\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\r\n\r\n-- AddForeignKey\r\nALTER TABLE \"public\".\"TaskAssignee\" ADD CONSTRAINT \"TaskAssignee_taskId_fkey",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250816_002949_add_readmark_and_attachment/migration.sql",
      "size": 2762,
      "hash": "adb8b1bb6aabd5f19b3865a47d55aba8d4da6ddd",
      "textSample": "��-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000r\u0000e\u0000a\u0000d\u0000A\u0000t\u0000\"\u0000 \u0000T\u0000I\u0000M\u0000E\u0000S\u0000T\u0000A\u0000M\u0000P\u0000(\u00003\u0000)\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000,\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000i\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000n\u0000a\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000i\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000s\u0000i\u0000z\u0000e\u0000\"\u0000 \u0000I\u0000N\u0000T\u0000E\u0000G\u0000E\u0000R\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000d\u0000a\u0000t\u0000a\u0000\"\u0000 \u0000B\u0000Y\u0000T\u0000E\u0000A\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000(\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000(\u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000_\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000_\u0000c\u0000r\u0000e\u0000a\u0000t\u0000e\u0000d\u0000A\u0000t\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000\"\u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000,\u0000 \u0000\"\u0000c\u0000r\u0000e\u0000a\u0000t\u0000e\u0000d\u0000A\u0000t\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000U\u0000s\u0000e\u0000r\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250816_003914_add_readmark_and_attachment_take2/migration.sql",
      "size": 2762,
      "hash": "adb8b1bb6aabd5f19b3865a47d55aba8d4da6ddd",
      "textSample": "��-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000r\u0000e\u0000a\u0000d\u0000A\u0000t\u0000\"\u0000 \u0000T\u0000I\u0000M\u0000E\u0000S\u0000T\u0000A\u0000M\u0000P\u0000(\u00003\u0000)\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000,\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000i\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000n\u0000a\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000i\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000s\u0000i\u0000z\u0000e\u0000\"\u0000 \u0000I\u0000N\u0000T\u0000E\u0000G\u0000E\u0000R\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000d\u0000a\u0000t\u0000a\u0000\"\u0000 \u0000B\u0000Y\u0000T\u0000E\u0000A\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000(\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000(\u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000_\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000_\u0000c\u0000r\u0000e\u0000a\u0000t\u0000e\u0000d\u0000A\u0000t\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000\"\u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000,\u0000 \u0000\"\u0000c\u0000r\u0000e\u0000a\u0000t\u0000e\u0000d\u0000A\u0000t\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000U\u0000s\u0000e\u0000r\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000d\u0000d\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/20250816_004527_require_thread_participants/migration.sql",
      "size": 6096,
      "hash": "c7b4ec85432d37a792df6fab0bc012c3ab4ccef3",
      "textSample": "��-\u0000-\u0000 \u0000C\u00044\u00040\u0004;\u00048\u0004B\u0004L\u0004 \u0000A\u0004>\u0004>\u00041\u0004I\u00045\u0004=\u00048\u0004O\u0004 \u00008\u00047\u0004 \u0000B\u0004@\u00045\u00044\u0004>\u00042\u0004 \u0000A\u0004 \u0000N\u0000U\u0000L\u0000L\u0000-\u0000C\u0004G\u00040\u0004A\u0004B\u0004=\u00048\u0004:\u00040\u0004<\u00048\u0004\r\u0000\n\u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000F\u0000R\u0000O\u0000M\u0000 \u0000\"\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000\"\u0000\r\u0000\n\u0000W\u0000H\u0000E\u0000R\u0000E\u0000 \u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000 \u0000I\u0000N\u0000 \u0000(\u0000S\u0000E\u0000L\u0000E\u0000C\u0000T\u0000 \u0000\"\u0000i\u0000d\u0000\"\u0000 \u0000F\u0000R\u0000O\u0000M\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000W\u0000H\u0000E\u0000R\u0000E\u0000 \u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000 \u0000I\u0000S\u0000 \u0000N\u0000U\u0000L\u0000L\u0000 \u0000O\u0000R\u0000 \u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000 \u0000I\u0000S\u0000 \u0000N\u0000U\u0000L\u0000L\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u00044\u00040\u0004;\u00048\u0004B\u0004L\u0004 \u0000A\u00040\u0004<\u00048\u0004 \u0000B\u0004@\u00045\u00044\u0004K\u0004 \u0000A\u0004 \u0000N\u0000U\u0000L\u0000L\u0000-\u0000C\u0004G\u00040\u0004A\u0004B\u0004=\u00048\u0004:\u00040\u0004<\u00048\u0004\r\u0000\n\u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000F\u0000R\u0000O\u0000M\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000W\u0000H\u0000E\u0000R\u0000E\u0000 \u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000 \u0000I\u0000S\u0000 \u0000N\u0000U\u0000L\u0000L\u0000 \u0000O\u0000R\u0000 \u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000 \u0000I\u0000S\u0000 \u0000N\u0000U\u0000L\u0000L\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0004=\u0004O\u0004B\u0004L\u0004 \u0000A\u0004B\u00040\u0004@\u0004K\u00045\u0004 \u0000F\u0000K\u0000 \u0000A\u0004>\u0004 \u0000A\u0004B\u0004@\u00040\u0004B\u00045\u00043\u00048\u00045\u00049\u0004 \u0000S\u0000E\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000D\u0000R\u0000O\u0000P\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000I\u0000F\u0000 \u0000E\u0000X\u0000I\u0000S\u0000T\u0000S\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000a\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000;\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000D\u0000R\u0000O\u0000P\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000I\u0000F\u0000 \u0000E\u0000X\u0000I\u0000S\u0000T\u0000S\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000b\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u00046\u00045\u0004A\u0004B\u0004>\u0004G\u00048\u0004B\u0004L\u0004 \u0000A\u0004B\u0004>\u0004;\u00041\u0004F\u0004K\u0004\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000C\u0000O\u0000L\u0000U\u0000M\u0000N\u0000 \u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000 \u0000S\u0000E\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000;\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000C\u0000O\u0000L\u0000U\u0000M\u0000N\u0000 \u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000 \u0000S\u0000E\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u00007\u00040\u0004=\u0004>\u00042\u0004>\u0004 \u0000?\u0004>\u00042\u00045\u0004A\u00048\u0004B\u0004L\u0004 \u0000F\u0000K\u0000 \u0000A\u0004 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000/\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000a\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000U\u0000s\u0000e\u0000r\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000A\u0000D\u0000D\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000b\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000F\u0000O\u0000R\u0000E\u0000I\u0000G\u0000N\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000)\u0000 \u0000R\u0000E\u0000F\u0000E\u0000R\u0000E\u0000N\u0000C\u0000E\u0000S\u0000 \u0000\"\u0000U\u0000s\u0000e\u0000r\u0000\"\u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000 \u0000O\u0000N\u0000 \u0000U\u0000P\u0000D\u0000A\u0000T\u0000E\u0000 \u0000C\u0000A\u0000S\u0000C\u0000A\u0000D\u0000E\u0000 \u0000O\u0000N\u0000 \u0000D\u0000E\u0000L\u0000E\u0000T\u0000E\u0000 \u0000R\u0000E\u0000S\u0000T\u0000R\u0000I\u0000C\u0000T\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000>\u0004?\u0004F\u00048\u0004>\u0004=\u00040\u0004;\u0004L\u0004=\u0004>\u0004:\u0000 \u0000C\u0004A\u0004:\u0004>\u0004@\u00045\u0004=\u00048\u00045\u0004 \u0000?\u0004>\u00048\u0004A\u0004:\u00040\u0004 \u0000?\u00040\u0004@\u0004K\u0004\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000I\u0000F\u0000 \u0000N\u0000O\u0000T\u0000 \u0000E\u0000X\u0000I\u0000S\u0000T\u0000S\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000p\u0000a\u0000i\u0000r\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000(\u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000,\u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000D\u0000r\u0000o\u0000p\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000D\u0000R\u0000O\u0000P\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000a\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000D\u0000r\u0000o\u0000p\u0000F\u0000o\u0000r\u0000e\u0000i\u0000g\u0000n\u0000K\u0000e\u0000y\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000D\u0000R\u0000O\u0000P\u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000_\u0000b\u0000I\u0000d\u0000_\u0000f\u0000k\u0000e\u0000y\u0000\"\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000A\u0000l\u0000t\u0000e\u0000r\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000T\u0000h\u0000r\u0000e\u0000a\u0000d\u0000\"\u0000 \u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000C\u0000O\u0000L\u0000U\u0000M\u0000N\u0000 \u0000\"\u0000a\u0000I\u0000d\u0000\"\u0000 \u0000S\u0000E\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000A\u0000L\u0000T\u0000E\u0000R\u0000 \u0000C\u0000O\u0000L\u0000U\u0000M\u0000N\u0000 \u0000\"\u0000b\u0000I\u0000d\u0000\"\u0000 \u0000S\u0000E\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000r\u0000e\u0000a\u0000d\u0000A\u0000t\u0000\"\u0000 \u0000T\u0000I\u0000M\u0000E\u0000S\u0000T\u0000A\u0000M\u0000P\u0000(\u00003\u0000)\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000t\u0000h\u0000r\u0000e\u0000a\u0000d\u0000I\u0000d\u0000\"\u0000,\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000T\u0000a\u0000b\u0000l\u0000e\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000T\u0000A\u0000B\u0000L\u0000E\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000 \u0000(\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000i\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000n\u0000a\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000i\u0000m\u0000e\u0000\"\u0000 \u0000T\u0000E\u0000X\u0000T\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000s\u0000i\u0000z\u0000e\u0000\"\u0000 \u0000I\u0000N\u0000T\u0000E\u0000G\u0000E\u0000R\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000d\u0000a\u0000t\u0000a\u0000\"\u0000 \u0000B\u0000Y\u0000T\u0000E\u0000A\u0000 \u0000N\u0000O\u0000T\u0000 \u0000N\u0000U\u0000L\u0000L\u0000,\u0000\r\u0000\n\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000C\u0000O\u0000N\u0000S\u0000T\u0000R\u0000A\u0000I\u0000N\u0000T\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000p\u0000k\u0000e\u0000y\u0000\"\u0000 \u0000P\u0000R\u0000I\u0000M\u0000A\u0000R\u0000Y\u0000 \u0000K\u0000E\u0000Y\u0000 \u0000(\u0000\"\u0000i\u0000d\u0000\"\u0000)\u0000\r\u0000\n\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000_\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000R\u0000e\u0000a\u0000d\u0000M\u0000a\u0000r\u0000k\u0000\"\u0000(\u0000\"\u0000u\u0000s\u0000e\u0000r\u0000I\u0000d\u0000\"\u0000)\u0000;\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000I\u0000n\u0000d\u0000e\u0000x\u0000\r\u0000\n\u0000C\u0000R\u0000E\u0000A\u0000T\u0000E\u0000 \u0000I\u0000N\u0000D\u0000E\u0000X\u0000 \u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000_\u0000m\u0000e\u0000s\u0000s\u0000a\u0000g\u0000e\u0000I\u0000d\u0000_\u0000i\u0000d\u0000x\u0000\"\u0000 \u0000O\u0000N\u0000 \u0000\"\u0000p\u0000u\u0000b\u0000l\u0000i\u0000c\u0000\"\u0000.\u0000\"\u0000A\u0000t\u0000t\u0000a\u0000c\u0000h\u0000m\u0000e\u0000n\u0000t\u0000\"\u0000(\u0000\"\u0000m\u0000e\u0000s\u0000s\u0000a\u0000",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/init_baseline_20250811_225344/migration.sql",
      "size": 14,
      "hash": "3b17ac717a2294785f1f977628b9cba0de0e2c03",
      "textSample": "/* baseline */",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/migrations/migration_lock.toml",
      "size": 128,
      "hash": "7abbf1b5bc2ed90d381336ef493ef3a44c488e3d",
      "textSample": "# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = \"postgresql\"\n",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/schema.prisma",
      "size": 4445,
      "hash": "61cc103d895dfddcca79173ddcb5cd41532a0678",
      "textSample": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\") // pooled (PgBouncer)\n  // Если у вас настроен прямой URL для миграций, можно раскомментировать:\n  // directUrl = env(\"DIRECT_URL\")\n}\n\nmodel User {\n  id               String    @id @default(uuid())\n  name             String\n  username         String?   @unique\n  email            String?   @unique\n  phone            String?   @unique\n  birthday         DateTime?\n  classroom        String?\n  role             String?\n  avatarUrl        String?\n  telegram         String?\n  about            String?\n  notifyEmail      Boolean   @default(true)\n  notifyTelegram   Boolean   @default(false)\n  subjects         String?\n  methodicalGroups String?\n  passwordHash     String?\n  lastSeen         DateTime?\n\n  messages         Message[]      @relation(\"UserMessages\")\n  threadsA         Thread[]       @relation(\"ThreadA\")\n  threadsB         Thread[]       @relation(\"ThreadB\")\n  readMarks        ReadMark[]     @relation(\"ReadMarkUser\")\n  groupMemberships GroupMember[]\n  taskAssignments  TaskAssignee[]\n\n  // обратная сторона связи для MessageHide — ЭТО НОВАЯ СТРОКА\n  messageHides MessageHide[]\n}\n\nmodel Group {\n  id      String        @id @default(uuid())\n  name    String\n  members GroupMember[]\n}\n\nmodel GroupMember {\n  id      String @id @default(uuid())\n  userId  String\n  groupId String\n  user    User   @relation(fields: [userId], references: [id])\n  group   Group  @relation(fields: [groupId], references: [id])\n}\n\nmodel Thread {\n  id              String    @id @default(uuid())\n  aId             String\n  bId             String\n  lastMessageAt   DateTime?\n  lastMessageText String?\n  title           String    @default(\"\")\n\n  a User @relation(\"ThreadA\", fields: [aId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  b User @relation(\"ThreadB\", fields: [bId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  messages  Message[]\n  readMarks ReadMark[] @relation(\"ReadMarkThread\")\n\n  @@index([lastMessageAt, id])\n}\n\nmodel Message {\n  id        String   @id @default(uuid())\n  createdAt DateTime @default(now())\n  text      String\n  authorId  String\n  threadId  String\n\n  // поля под «ред.» и мягкое удаление\n  editedAt  DateTime?\n  deletedAt DateTime?\n\n  author User   @relation(\"UserMessages\", fields: [authorId], references: [id])\n  thread Thread @relation(fields: [threadId], references: [id])\n\n  // вложения могут остаться в схеме, но мы их не используем в коде\n  attachments Attachment[] @relation(\"MessageAttachments\")\n\n  // «удалить для себя»\n  hides MessageHide[]\n\n  @@index([threadId, createdAt])\n}\n\nmodel MessageHide {\n  messageId String\n  userId    String\n\n  message Message @relation(fields: [messageId], references: [id])\n  user    User    @relation(fields: [userId], references: [id])\n\n  @@id([messageId, userId])\n  @@index([userId])\n}\n\nmodel Task {\n  id          String         @id @default(uuid())\n  title       String\n  description String\n  dueDate     DateTime\n  hidden      Boolean        @default(false)\n  priority    String         @default(\"normal\")\n  assignees   TaskAssignee[]\n  tags        TaskTag[]\n}\n\nmodel TaskAssignee {\n  id     String @id @default(uuid())\n  taskId String\n  userId String\n  task   Task   @relation(fields: [taskId], references: [id])\n  user   User   @relation(fields: [userId], references: [id])\n}\n\nmodel Tag {\n  id    String    @id @default(uuid())\n  name  String    @unique\n  tasks TaskTag[]\n}\n\nmodel TaskTag {\n  id     String @id @default(uuid())\n  taskId String\n  tagId  String\n  task   Task   @relation(fields: [taskId], references: [id])\n  tag    Tag    @relation(fields: [tagId], references: [id])\n}\n\nmodel ReadMark {\n  threadId String\n  userId   String\n  readAt   DateTime\n\n  thread Thread @relation(\"ReadMarkThread\", fields: [threadId], references: [id])\n  user   User   @relation(\"ReadMarkUser\", fields: [userId], references: [id])\n\n  @@id([threadId, userId])\n  @@index([userId])\n}\n\nmodel At",
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "prisma/seed.cjs",
      "size": 764,
      "hash": "fb18e2eea7347bda1908cc3be22262d65a46032f",
      "textSample": null,
      "kind": "prisma",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": "scripts/fix-admin.cjs",
      "size": 629,
      "hash": "e6f33ebbe53282ae1ee4c27fb655f17776de182e",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": "scripts/list-endpoints.mjs",
      "size": 2236,
      "hash": "f74750e57f3edcdc5d6d2f4541dc4c81ce4b8cdc",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": "scripts/upsert-admin.cjs",
      "size": 846,
      "hash": "1b5aa627d845ff0c1bcbe458f24779d2781af002",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    },
    {
      "path": "styles/globals.css",
      "size": 3164,
      "hash": "29a13eb25ca650d32d68ad25b8c7e5fc5ae54e26",
      "textSample": "/* ====== Тема / токены ====== */\n:root{\n  --brand:#8d2828;\n  --bg:#f7f7f8;\n  --text:#111827;\n  --muted:#374151;\n\n  --border: rgba(229,231,235,.8);\n  --glass-top: rgba(255,255,255,.68);\n  --glass-bottom: rgba(255,255,255,.40);\n  --glass-shadow: 0 6px 16px rgba(0,0,0,.06);\n}\n\n/* ====== База/ресет (минимально) ====== */\n*,*::before,*::after{ box-sizing:border-box; }\nhtml,body{ height:100%; }\nbody{\n  margin:0;\n  color:var(--text);\n  background:var(--bg);\n  font-family: ui-sans-serif, system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\";\n  text-rendering:optimizeLegibility;\n  -webkit-font-smoothing:antialiased;\n  -moz-osx-font-smoothing:grayscale;\n}\nbutton,input,select,textarea{ font:inherit; color:inherit; }\nbutton{ cursor:pointer; }\n:focus-visible{ outline:3px solid rgba(207,227,255,.7); outline-offset:2px; border-radius:8px; }\n\n/* ====== Ссылки — глобально без подчёркивания ====== */\na, a:visited, a:active{ color:inherit; text-decoration:none; }\na:hover{ text-decoration:none; }\n\n/* ====== Утилиты стекла (по стилю сайдбара) ====== */\n.u-glass{\n  background:linear-gradient(180deg,var(--glass-top),var(--glass-bottom));\n  backdrop-filter:saturate(180%) blur(10px);\n  -webkit-backdrop-filter:saturate(180%) blur(10px);\n  border:1px solid var(--border);\n  box-shadow:var(--glass-shadow), inset 0 1px 0 rgba(255,255,255,.35);\n  border-radius:16px;\n}\n.u-glass-lite{\n  background:rgba(255,255,255,.55);\n  backdrop-filter:saturate(160%) blur(6px);\n  -webkit-backdrop-filter:saturate(160%) blur(6px);\n  border:1px solid rgba(229,231,235,.7);\n  border-radius:14px;\n  box-shadow:inset 0 1px 0 rgba(255,255,255,.35);\n}\n\n/* ====== Таблицы (общая база) ====== */\ntable{ border-collapse:separate; border-spacing:0; }\n\n/* ====== Страницы авторизации (оставил, но в «стекле») ====== */\n.auth-wrap{\n  max-width:420px; margin:64px auto; padding:16px; border-radius:16px;\n  background:linear-gradient(180deg,var(--glass-top),var(--glass-bottom));\n  backdrop-filter:saturate(180%) blur(10px);\n  -webkit-backdrop-filter:saturate(180%) blur(10px);\n  border:1px solid var(--border);\n  box-shadow:var(--glass-shadow), inset 0 1px 0 rgba(255,255,255,.35);\n}\n.auth-title{ font-size:22px; margin:0 0 12px; font-weight:900; color:var(--text); }\n.auth-error{ color:#b91c1c; margin:0 0 10px; }\n.auth-form{ display:grid; gap:12px; }\n.auth-form label{ display:grid; gap:6px; }\n.auth-form input{\n  padding:10px 12px; border:1px solid rgba(229,231,235,.9);\n  border-radius:10px; background:#fff; outline:none;\n}\n.auth-form input:focus{\n  border-color:#cfe3ff; box-shadow:0 0 0 3px rgba(207,227,255,.4);\n}\n.auth-form button{\n  height:36px; border:1px solid var(--brand); border-radius:10px;\n  background:var(--brand); color:#fff;\n}\n.auth-form button:hover{ filter:brightness(.96); }\n\n/* ====== На всякий: ссылки внутри кликабельных карточек/плиток без подчёркиваний ====== */\n[role=\"button\"], .tile-link, .navlink{ text-decoration:none !important; }\n",
      "kind": "style",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "tools/snapshot.js",
      "size": 9459,
      "hash": "85a6c5673d5a476e65924e67287091cc787e4cbc",
      "textSample": "// tools/snapshot.js\r\n/* \r\n  Проектный снимок: строит дерево и JSON-индекс проекта Next.js (App Router).\r\n  Запуск: node tools/snapshot.js [--include-env-names] [--max-bytes=16384]\r\n*/\r\n\r\nconst fs = require('fs');\r\nconst fsp = fs.promises;\r\nconst path = require('path');\r\nconst crypto = require('crypto');\r\n\r\nconst ROOT = process.cwd();\r\nconst OUT_DIR = path.join(ROOT, 'project-snapshot');\r\nconst MAX_BYTES = Number((process.argv.find(a => a.startsWith('--max-bytes=')) || '').split('=')[1] || 16384);\r\nconst INCLUDE_ENV_NAMES = process.argv.includes('--include-env-names');\r\n\r\nconst IGNORE_DIRS = new Set([\r\n  'node_modules', '.next', '.turbo', '.vercel', '.git', '.cache', 'coverage', 'dist', 'build'\r\n]);\r\n\r\nconst PAGE_FILES = new Set([\r\n  'page.tsx', 'page.jsx',\r\n  'layout.tsx', 'layout.jsx',\r\n  'route.ts', 'route.js',\r\n  'loading.tsx', 'loading.jsx',\r\n  'error.tsx', 'error.jsx',\r\n  'template.tsx', 'template.jsx',\r\n  'default.tsx', 'default.jsx',\r\n  'not-found.tsx', 'not-found.jsx'\r\n]);\r\n\r\nasync function ensureOut() {\r\n  await fsp.mkdir(OUT_DIR, { recursive: true });\r\n}\r\n\r\nfunction isTextFile(fp) {\r\n  return /\\.(tsx?|jsx?|css|md|json|yml|yaml|env|toml|prisma|sql|svg|html?)$/i.test(fp);\r\n}\r\n\r\nasync function sha1OfFile(fp) {\r\n  try {\r\n    const h = crypto.createHash('sha1');\r\n    const s = fs.createReadStream(fp);\r\n    return await new Promise((res, rej) => {\r\n      s.on('data', d => h.update(d));\r\n      s.on('end', () => res(h.digest('hex')));\r\n      s.on('error', rej);\r\n    });\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction appRouteFromFile(appDir, fileAbs) {\r\n  // Преобразуем app/(group)/users/[id]/page.tsx -> /users/[id]\r\n  const rel = path.relative(appDir, fileAbs).replaceAll(path.sep, '/');\r\n  const parts = rel.split('/');\r\n  // убираем файл\r\n  parts.pop();\r\n  const segments = parts.filter(seg => !(seg.startsWith('(') && seg.endsWith(')')));\r\n  const route = '/' + segments.join('/');\r\n  return route.replace(/\\/+/g, '/');\r\n}\r\n\r\nfunction detectIsClient(fileText) {\r\n  // 'use client' в начале файла?\r\n  const head = fileText.slice(0, 512);\r\n  return /['\"]use client['\"]/.test(head);\r\n}\r\n\r\nfunction detectHasUseServer(fileText) {\r\n  return /['\"]use server['\"]/.test(fileText);\r\n}\r\n\r\nfunction detectExports(fileText) {\r\n  const exp = {\r\n    dynamic: /export\\s+const\\s+dynamic\\s*=\\s*['\"`][^'\"`]+['\"`]/.test(fileText),\r\n    revalidate: /export\\s+const\\s+revalidate\\s*=/.test(fileText),\r\n    generateMetadata: /export\\s+async\\s+function\\s+generateMetadata|export\\s+function\\s+generateMetadata/.test(fileText),\r\n    metadata: /export\\s+const\\s+metadata\\s*=/.test(fileText),\r\n  };\r\n  return exp;\r\n}\r\n\r\nfunction detectSearchParamsMention(fileText) {\r\n  // не парсим строго типы, просто фиксируем, что параметр встречается в сигнатуре\r\n  return /(export\\s+default\\s+async\\s+function|export\\s+default\\s+function)\\s*\\([\\s\\S]*searchParams\\s*:?\\s*/.test(fileText);\r\n}\r\n\r\nasync function readHead(fp, maxBytes = MAX_BYTES) {\r\n  try {\r\n    const fh = await fsp.open(fp, 'r');\r\n    const { buffer, bytesRead } = await fh.read(Buffer.alloc(Math.min(maxBytes, (await fh.stat()).size)), 0, Math.min(maxBytes, (await fh.stat()).size), 0);\r\n    await fh.close();\r\n    return buffer.toString('utf8', 0, bytesRead);\r\n  } catch {\r\n    return '';\r\n  }\r\n}\r\n\r\nasync function walk(dir, acc = []) {\r\n  const entries = await fsp.readdir(dir, { withFileTypes: true });\r\n  for (const e of entries) {\r\n    if (IGNORE_DIRS.has(e.name)) continue;\r\n    const abs = path.join(dir, e.name);\r\n    if (e.isDirectory()) {\r\n      await walk(abs, acc);\r\n    } else {\r\n      acc.push(abs);\r\n    }\r\n  }\r\n  return acc;\r\n}\r\n\r\nfunction toTree(lines) {\r\n  // Формируем красивое дерево для README/вложения\r\n  const root = {};\r\n  for (const rel of lines) {\r\n    const parts = rel.split('/');\r\n    let node = root;\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const p = parts[i];\r\n      node.children = node.children || {};\r\n      node.children[p] = node.children[p] || {};\r\n      node = node.children[p];\r\n   ",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "tsconfig.json",
      "size": 702,
      "hash": "c74862a159ab404d1849b87ce1248ead926ad00f",
      "textSample": "{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ES2020\",\r\n    \"lib\": [\r\n      \"dom\",\r\n      \"esnext\"\r\n    ],\r\n    \"module\": \"esnext\",\r\n    \"moduleResolution\": \"bundler\",\r\n    \"strict\": true,\r\n    \"noEmit\": true,\r\n    \"jsx\": \"preserve\",\r\n    \"esModuleInterop\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"skipLibCheck\": true,\r\n    \"paths\": {\r\n      \"@/*\": [\r\n        \"./*\"\r\n      ]\r\n    },\r\n    \"allowJs\": true,\r\n    \"incremental\": true,\r\n    \"isolatedModules\": true,\r\n    \"plugins\": [\r\n      {\r\n        \"name\": \"next\"\r\n      }\r\n    ],\r\n    \"baseUrl\": \".\"\r\n  },\r\n  \"include\": [\r\n    \"**/*.ts\",\r\n    \"**/*.tsx\",\r\n    \"next-env.d.ts\",\r\n    \".next/types/**/*.ts\"\r\n  ],\r\n  \"exclude\": [\r\n    \"node_modules\"\r\n  ]\r\n}",
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": {
        "dynamic": false,
        "revalidate": false,
        "generateMetadata": false,
        "metadata": false
      },
      "mentionsSearchParams": false
    },
    {
      "path": "tsconfig.tsbuildinfo",
      "size": 110634,
      "hash": "2753f4b9414f9d95f3bf3fc73cff7aba0f166937",
      "textSample": null,
      "kind": "file",
      "routePath": null,
      "pageType": null,
      "isClient": false,
      "hasUseServer": false,
      "exportsFlags": null,
      "mentionsSearchParams": false
    }
  ]
}